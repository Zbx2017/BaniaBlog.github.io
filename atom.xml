<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BaniaBlog</title>
  
  <subtitle>Sharing Technology</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-13T07:07:00.534Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Bania</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>KNN</title>
    <link href="http://yoursite.com/2020/02/13/KNN/"/>
    <id>http://yoursite.com/2020/02/13/KNN/</id>
    <published>2020-02-13T06:57:08.000Z</published>
    <updated>2020-02-13T07:07:00.534Z</updated>
    
    <content type="html"><![CDATA[<h4 id="KNN"><a href="#KNN" class="headerlink" title="KNN"></a>KNN</h4><h5 id="KNN-Classifier"><a href="#KNN-Classifier" class="headerlink" title="KNN Classifier"></a>KNN Classifier</h5><p>In assignment1 the first question is K-Nearest Neighbor Classifier. You should open the classifiers file and write your code in the k_nearest_neighbor.py. </p><p>The first thing you should keep in mind is the idea of KNN. Let me give a brief of it. In our dataset, we often split the data into training data and testing data. In testing data, we do not know the value of the target variable(the variable we need to predict), while in training data, the target variable is given and we use this data to train our model. For KNN, we also need the training data to predict the target variable in the testing data. How to achieve this? We can understand it by the name of KNN. For example, now we have a testing data point and we need to know which categories it belongs to. And then we find k points which are near the testing point most. The way we decide the k points is by measuring the distance between the testing point and all training data points. After we get these k points and they all have their own categories, we can see the most common category in these points and the testing point belongs to this category. </p><p>The idea of KNN is quite straightforward. In conclusion, we just need three steps:</p><ol><li>Measuring the distance between testing data and training data.</li><li>For every testing data point, selecting nearsest k points. </li><li>In those k points, find the most common value of target variable and use it to predict the value of target variable for testing data.</li></ol><p>Knowing the idea of KNN, now we can code in the file. You can see that there are some instructions in the file, and you just need to follow them. </p><p>These code are already written for you and you just need to understand them. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> past.builtins <span class="keyword">import</span> xrange</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KNearestNeighbor</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="string">""" a kNN classifier with L2 distance """</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">     <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(self, X, y)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Train the classifier. For k-nearest neighbors this is just </span></span><br><span class="line"><span class="string">    memorizing the training data.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Inputs:</span></span><br><span class="line"><span class="string">    - X: A numpy array of shape (num_train, D) containing the training data</span></span><br><span class="line"><span class="string">    consisting of num_train samples each of dimension D.</span></span><br><span class="line"><span class="string">    - y: A numpy array of shape (N,) containing the training labels, where</span></span><br><span class="line"><span class="string">      y[i] is the label for X[i].</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    self.X_train = X</span><br><span class="line">    self.y_train = y</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, X, k=<span class="number">1</span>, num_loops=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Predict labels for test data using this classifier.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Inputs:</span></span><br><span class="line"><span class="string">    - X: A numpy array of shape (num_test, D) containing test data consisting</span></span><br><span class="line"><span class="string">         of num_test samples each of dimension D.</span></span><br><span class="line"><span class="string">    - k: The number of nearest neighbors that vote for the predicted labels.</span></span><br><span class="line"><span class="string">    - num_loops: Determines which implementation to use to compute distances</span></span><br><span class="line"><span class="string">      between training points and testing points.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    - y: A numpy array of shape (num_test,) containing predicted labels for the</span></span><br><span class="line"><span class="string">      test data, where y[i] is the predicted label for the test point X[i].  </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> num_loops == <span class="number">0</span>:</span><br><span class="line">      dists = self.compute_distances_no_loops(X)</span><br><span class="line">    <span class="keyword">elif</span> num_loops == <span class="number">1</span>:</span><br><span class="line">      dists = self.compute_distances_one_loop(X)</span><br><span class="line">    <span class="keyword">elif</span> num_loops == <span class="number">2</span>:</span><br><span class="line">      dists = self.compute_distances_two_loops(X)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">raise</span> ValueError(<span class="string">'Invalid value %d for num_loops'</span> % num_loops)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> self.predict_labels(dists, k=k)</span><br></pre></td></tr></table></figure><p>Here is the first step: measuring the distance. We have three algorithms to do this. Different algorithms have different performance and you can see it in the next session. </p><p>The first algorithm is simple but consume more time.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_distances_two_loops</span><span class="params">(self, X)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Compute the distance between each test point in X and each training point</span></span><br><span class="line"><span class="string">    in self.X_train using a nested loop over both the training data and the </span></span><br><span class="line"><span class="string">    test data.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Inputs:</span></span><br><span class="line"><span class="string">    - X: A numpy array of shape (num_test, D) containing test data.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    - dists: A numpy array of shape (num_test, num_train) where dists[i, j]</span></span><br><span class="line"><span class="string">      is the Euclidean distance between the ith test point and the jth training</span></span><br><span class="line"><span class="string">      point.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    num_test = X.shape[<span class="number">0</span>]</span><br><span class="line">    num_train = self.X_train.shape[<span class="number">0</span>]</span><br><span class="line">    dists = np.zeros((num_test, num_train))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(num_test):</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> xrange(num_train): </span><br><span class="line">        <span class="comment"># calculate the distance</span></span><br><span class="line">        dists[i][j] = np.sum((X[i] - self.X_train[j])**<span class="number">2</span>)**<span class="number">0.5</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        np.sum() method is used to add an matrix, axis is one of the peremeter in this           method. In this case, the X[i] - self.X_train[j] has one axis, and we do not need         to give the axis peremeter or if you like you can set it to 0.</span></span><br><span class="line"><span class="string">        We can also see that in many numpy method there will be axis peremeter.Different         dataset has different dimension and axis is the one you want to delete by using           the method. </span></span><br><span class="line"><span class="string">        For example, by using np.sum(One dimensional dataset, axis=0) it will give you a         point. np.sum(two dimensional dataset, axis=0) will add each row and return a one         dimensional data, while axis=1 will add each column. </span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">#####################################################################</span></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span>                                                             #</span></span><br><span class="line">        <span class="comment"># Compute the l2 distance between the ith test point and the jth    #</span></span><br><span class="line">        <span class="comment"># training point, and store the result in dists[i, j]. You should   #</span></span><br><span class="line">        <span class="comment"># not use a loop over dimension.                                    #</span></span><br><span class="line">        <span class="comment">#####################################################################</span></span><br><span class="line">        <span class="comment">#         pass</span></span><br><span class="line">        <span class="comment">#####################################################################</span></span><br><span class="line">        <span class="comment">#                       END OF YOUR CODE                            #</span></span><br><span class="line">        <span class="comment">#####################################################################</span></span><br><span class="line">    <span class="keyword">return</span> dists</span><br></pre></td></tr></table></figure><p>The second algorithm uses one loop.  The most important method is tile().</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_distances_one_loop</span><span class="params">(self, X)</span>:</span></span><br><span class="line">   <span class="string">"""</span></span><br><span class="line"><span class="string">   Compute the distance between each test point in X and each training point</span></span><br><span class="line"><span class="string">   in self.X_train using a single loop over the test data.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Input / Output: Same as compute_distances_two_loops</span></span><br><span class="line"><span class="string">   """</span></span><br><span class="line">   num_test = X.shape[<span class="number">0</span>]</span><br><span class="line">   num_train = self.X_train.shape[<span class="number">0</span>]</span><br><span class="line">   dists = np.zeros((num_test, num_train))</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> xrange(num_test):</span><br><span class="line">       diff = np.tile(X[i], (num_train, <span class="number">1</span>)) - self.X_train</span><br><span class="line">       dists[i] = np.sum(diff**<span class="number">2</span>, axis=<span class="number">1</span>)**<span class="number">0.5</span></span><br><span class="line">       <span class="string">"""</span></span><br><span class="line"><span class="string">       np.tile() can duplicate an array in different size. The second peremeter(rows,           columns) indicate the array should be duplicated rows times in the row                   direction and columns times in the column direction. </span></span><br><span class="line"><span class="string">       In this case, we duplicate the X[i] num_train times so the size of the X[i] is           the same with X_train, then do the substraction.</span></span><br><span class="line"><span class="string">       """</span></span><br><span class="line">     <span class="comment">#######################################################################</span></span><br><span class="line">     <span class="comment"># <span class="doctag">TODO:</span>                                                               #</span></span><br><span class="line">     <span class="comment"># Compute the l2 distance between the ith test point and all training #</span></span><br><span class="line">     <span class="comment"># points, and store the result in dists[i, :].                        #</span></span><br><span class="line">     <span class="comment">#######################################################################</span></span><br><span class="line">   </span><br><span class="line">     <span class="comment">#       pass</span></span><br><span class="line">     <span class="comment">#######################################################################</span></span><br><span class="line">     <span class="comment">#                         END OF YOUR CODE                            #</span></span><br><span class="line">     <span class="comment">#######################################################################</span></span><br><span class="line">   <span class="keyword">return</span> dists</span><br></pre></td></tr></table></figure><p>The last algorithm is the most effective one because it uses no loops. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_distances_no_loops</span><span class="params">(self, X)</span>:</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  Compute the distance between each test point in X and each training point</span></span><br><span class="line"><span class="string">  in self.X_train using no explicit loops.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Input / Output: Same as compute_distances_two_loops</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  num_test = X.shape[<span class="number">0</span>]</span><br><span class="line">  num_train = self.X_train.shape[<span class="number">0</span>]</span><br><span class="line">  dists = np.zeros((num_test, num_train)) </span><br><span class="line">  <span class="comment"># the main idea is (a-b)**2 = a**2 +b**2 -2ab</span></span><br><span class="line">  multi_matrix = np.dot(X, self.X_train.T)</span><br><span class="line">  X_sum = np.sum(X**<span class="number">2</span>, axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>)</span><br><span class="line">  <span class="comment"># using sum will return a vector so we set keepdims to True and it will not change       the shape of the data.</span></span><br><span class="line">  X_squared = np.tile(X_sum,  multi_matrix.shape[<span class="number">1</span>])</span><br><span class="line">  X_train_sum = np.sum(self.X_train.T**<span class="number">2</span>, axis=<span class="number">0</span>)</span><br><span class="line">  X_train_squared = np.tile(X_train_sum, (multi_matrix.shape[<span class="number">0</span>], <span class="number">1</span>))</span><br><span class="line">  dists = (X_squared + X_train_squared - <span class="number">2</span>*multi_matrix)**<span class="number">0.5</span></span><br><span class="line">  <span class="comment">#########################################################################</span></span><br><span class="line">  <span class="comment"># <span class="doctag">TODO:</span>                                                                 #</span></span><br><span class="line">  <span class="comment"># Compute the l2 distance between all test points and all training      #</span></span><br><span class="line">  <span class="comment"># points without using any explicit loops, and store the result in      #</span></span><br><span class="line">  <span class="comment"># dists.                                                                #</span></span><br><span class="line">  <span class="comment">#                                                                       #</span></span><br><span class="line">  <span class="comment"># You should implement this function using only basic array operations; #</span></span><br><span class="line">  <span class="comment"># in particular you should not use functions from scipy.                #</span></span><br><span class="line">  <span class="comment">#                                                                       #</span></span><br><span class="line">  <span class="comment"># HINT: Try to formulate the l2 distance using matrix multiplication    #</span></span><br><span class="line">  <span class="comment">#       and two broadcast sums.                                         #</span></span><br><span class="line">  <span class="comment">#########################################################################</span></span><br><span class="line">  <span class="comment">#     pass</span></span><br><span class="line">  <span class="comment">#########################################################################</span></span><br><span class="line">  <span class="comment">#                         END OF YOUR CODE                              #</span></span><br><span class="line">  <span class="comment">#########################################################################</span></span><br><span class="line">  <span class="keyword">return</span> dists</span><br></pre></td></tr></table></figure><p>Then, we can test those three algorithms to see whether they can get the same result. </p><p><img src="/2020/02/13/KNN/1581326111097.png" alt="1581326111097"></p><p>Now we will turn to step2 and step3. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">predict_labels</span><span class="params">(self, dists, k=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Given a matrix of distances between test points and training points,</span></span><br><span class="line"><span class="string">    predict a label for each test point.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Inputs:</span></span><br><span class="line"><span class="string">    - dists: A numpy array of shape (num_test, num_train) where dists[i, j]</span></span><br><span class="line"><span class="string">      gives the distance betwen the ith test point and the jth training point.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    - y: A numpy array of shape (num_test,) containing predicted labels for the</span></span><br><span class="line"><span class="string">      test data, where y[i] is the predicted label for the test point X[i].  </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    num_test = dists.shape[<span class="number">0</span>]</span><br><span class="line">    y_pred = np.zeros(num_test)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(num_test):</span><br><span class="line">      <span class="comment"># A list of length k storing the labels of the k nearest neighbors to</span></span><br><span class="line">      <span class="comment"># the ith test point.</span></span><br><span class="line">        closest_y = []</span><br><span class="line">      <span class="comment">#########################################################################</span></span><br><span class="line">      <span class="comment"># <span class="doctag">TODO:</span>                                                                 #</span></span><br><span class="line">      <span class="comment"># Use the distance matrix to find the k nearest neighbors of the ith    #</span></span><br><span class="line">      <span class="comment"># testing point, and use self.y_train to find the labels of these       #</span></span><br><span class="line">      <span class="comment"># neighbors. Store these labels in closest_y.                           #</span></span><br><span class="line">      <span class="comment"># Hint: Look up the function numpy.argsort.                             #</span></span><br><span class="line">      <span class="comment">#########################################################################</span></span><br><span class="line">      </span><br><span class="line">        labels_index = np.argsort(dists[i]) </span><br><span class="line">        closest_y = np.array(self.y_train)[labels_index[:k]]</span><br><span class="line">        </span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        np.argsort() can return the index of the value from low to high. Then we can get         the k points. </span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"><span class="comment">#       pass</span></span><br><span class="line">      <span class="comment">#########################################################################</span></span><br><span class="line">      <span class="comment"># <span class="doctag">TODO:</span>                                                                 #</span></span><br><span class="line">      <span class="comment"># Now that you have found the labels of the k nearest neighbors, you    #</span></span><br><span class="line">      <span class="comment"># need to find the most common label in the list closest_y of labels.   #</span></span><br><span class="line">      <span class="comment"># Store this label in y_pred[i]. Break ties by choosing the smaller     #</span></span><br><span class="line">      <span class="comment"># label.                                                                #</span></span><br><span class="line">      <span class="comment">#########################################################################</span></span><br><span class="line">       </span><br><span class="line"><span class="comment">#         from collections import Counter</span></span><br><span class="line"><span class="comment">#         labels_counter = Counter(closest_y)</span></span><br><span class="line"><span class="comment">#         y_pred[i] = labels_counter.most_common()[0][0]</span></span><br><span class="line">       <span class="comment"># The above is one way to get the most common value in closest_y. And I have the          #more simple way below.  </span></span><br><span class="line">        y_pred[i] = np.argmax(np.bincount(closest_y.tolist()))</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        np.bincount() returns the times of different value appears in closest_y.</span></span><br><span class="line"><span class="string">        np.argmax() returns the most common value in closest_y</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#       pass</span></span><br><span class="line">      <span class="comment">#########################################################################</span></span><br><span class="line">      <span class="comment">#                           END OF YOUR CODE                            # </span></span><br><span class="line">      <span class="comment">#########################################################################</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y_pred</span><br></pre></td></tr></table></figure><p>We can use a simple example to test the model. The result is true, which means now we can use it to classify our data.</p><p><img src="/2020/02/13/KNN/1581327098979.png" alt="1581327098979"></p><h5 id="Training-and-Testing"><a href="#Training-and-Testing" class="headerlink" title="Training and Testing"></a>Training and Testing</h5><p>In this session, I will show you the whole process of training and testing the model and get the predictions. First, you have to open the knn.ipynb file and you can see you are given some instructions. </p><p>1) Load the dataset. </p><p><img src="/2020/02/13/KNN/1581327308499.png" alt="1581327308499"></p><p><img src="/2020/02/13/KNN/1581327332838.png" alt="1581327332838"></p><p>You can find the shape of X_train, y_train, X_test and y_test. load_CIFAR10() is a method that can split the data into training data and testing data. </p><p>Then using method below can visualize the dataset. </p><p><img src="/2020/02/13/KNN/1581327868618.png" alt="1581327868618"></p><p><img src="/2020/02/13/KNN/1581327880973.png" alt="1581327880973"></p><p>For the original dataset is too large, we just choose some of the data to analyse. </p><p><img src="/2020/02/13/KNN/1581327940045.png" alt="1581327940045"></p><p>Then import the knn to train.</p><p><img src="/2020/02/13/KNN/1581328056138.png" alt="1581328056138"></p><p><img src="/2020/02/13/KNN/1581328071246.png" alt="1581328071246"></p><p>We can draw the graph above to see the distance between testing data and training data. Then we can use the model to predict and get the accuracy. We can see that the accuracy is 0.274. It is very low, because we classify the data just by the RGB value of the picture. </p><p><img src="/2020/02/13/KNN/1581328131076.png" alt="1581328131076"></p><p><img src="/2020/02/13/KNN/1581328226483.png" alt="1581328226483"></p><p>When we set k to 1, the accuracy slightly increases. And then we see whether we can get the same distance matrix by using three different algorithms. </p><p><img src="/2020/02/13/KNN/1581328356671.png" alt="1581328356671"></p><p><img src="/2020/02/13/KNN/1581328379895.png" alt="1581328379895"></p><p>Then look at the running time. It is obvious that no-loops is the most effective. </p><p><img src="/2020/02/13/KNN/1581328411502.png" alt="1581328411502"></p><p>You may notice that when we use k=1 and k=5, the accuracy is different, so can we find the best k value which has the highest accuracy? For this, we can use cross validation. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">num_folds = <span class="number">5</span></span><br><span class="line">k_choices = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line">X_train_folds = []</span><br><span class="line">y_train_folds = []</span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span>                                                                        #</span></span><br><span class="line"><span class="comment"># Split up the training data into folds. After splitting, X_train_folds and    #</span></span><br><span class="line"><span class="comment"># y_train_folds should each be lists of length num_folds, where                #</span></span><br><span class="line"><span class="comment"># y_train_folds[i] is the label vector for the points in X_train_folds[i].     #</span></span><br><span class="line"><span class="comment"># Hint: Look up the numpy array_split function.                                #</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line">X_train_folds = np.array_split(X_train, num_folds)</span><br><span class="line">y_train_folds = np.array_split(y_train, num_folds)</span><br><span class="line"><span class="comment"># pass</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#                                 END OF YOUR CODE                             #</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A dictionary holding the accuracies for different values of k that we find</span></span><br><span class="line"><span class="comment"># when running cross-validation. After running cross-validation,</span></span><br><span class="line"><span class="comment"># k_to_accuracies[k] should be a list of length num_folds giving the different</span></span><br><span class="line"><span class="comment"># accuracy values that we found when using that value of k.</span></span><br><span class="line">k_to_accuracies = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span>                                                                        #</span></span><br><span class="line"><span class="comment"># Perform k-fold cross validation to find the best value of k. For each        #</span></span><br><span class="line"><span class="comment"># possible value of k, run the k-nearest-neighbor algorithm num_folds times,   #</span></span><br><span class="line"><span class="comment"># where in each case you use all but one of the folds as training data and the #</span></span><br><span class="line"><span class="comment"># last fold as a validation set. Store the accuracies for all fold and all     #</span></span><br><span class="line"><span class="comment"># values of k in the k_to_accuracies dictionary.                               #</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="keyword">for</span> k_value <span class="keyword">in</span> k_choices:</span><br><span class="line">    k_to_accuracies[k_value] = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_folds):</span><br><span class="line">        <span class="comment"># didn't work</span></span><br><span class="line"><span class="comment">#         X_train_cv = np.delete(X_train_folds, i).tolist()</span></span><br><span class="line"><span class="comment">#         y_train_cv = np.delete(y_train_folds, i).tolist()        </span></span><br><span class="line"><span class="comment">#         X_train_cv = np.delete(X_train_folds, i,         axis=0).reshape(X_train_folds[i].shape[0],X_train_folds[i].shape[1])</span></span><br><span class="line">        X_train_temp = np.delete(X_train_folds, i, axis=<span class="number">0</span>)</span><br><span class="line">        X_train_cv = np.concatenate(X_train_temp)</span><br><span class="line">        y_train_temp = np.delete(y_train_folds, i, axis=<span class="number">0</span>)</span><br><span class="line">        y_train_cv = np.concatenate(y_train_temp)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        classifier.train(X_train_cv, y_train_cv)</span><br><span class="line">        dist = classifier.compute_distances_no_loops(X_train_folds[i])</span><br><span class="line">        y_test_predictions = classifier.predict_labels(dist, k_value)</span><br><span class="line">        num_corrects = np.sum(y_test_predictions == y_train_folds[i])</span><br><span class="line">        accuracy = float(num_corrects) / y_train_folds[i].shape[<span class="number">0</span>]</span><br><span class="line">        k_to_accuracies[k_value].append(accuracy)</span><br><span class="line"><span class="comment"># pass</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#                                 END OF YOUR CODE                             #</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Print out the computed accuracies</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> sorted(k_to_accuracies):</span><br><span class="line">    <span class="keyword">for</span> accuracy <span class="keyword">in</span> k_to_accuracies[k]:</span><br><span class="line">        print(<span class="string">'k = %d, accuracy = %f'</span> % (k, accuracy))</span><br></pre></td></tr></table></figure><p>You can draw the graph to see which k is the best. </p><p><img src="/2020/02/13/KNN/1581329141634.png" alt="1581329141634"></p><p><img src="/2020/02/13/KNN/1581329151487.png" alt="1581329151487"></p><p><img src="/2020/02/13/KNN/1581329185444.png" alt="1581329185444"></p><p>We can see that 8 is the best value for k and we use it to get the accuracy: 0.274.</p><h5 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h5><p>KNN is an easy algorithm to classify different categories just by calculating the distance between testing data and training data. There are three ways to calculae the distance and the no-loops way is the most efficient. But it is not a very effective way to correctly classify different categories. The accuracy is not very high as we can see from the result. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;KNN&quot;&gt;&lt;a href=&quot;#KNN&quot; class=&quot;headerlink&quot; title=&quot;KNN&quot;&gt;&lt;/a&gt;KNN&lt;/h4&gt;&lt;h5 id=&quot;KNN-Classifier&quot;&gt;&lt;a href=&quot;#KNN-Classifier&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>CS231n assignment1 Environment Setup</title>
    <link href="http://yoursite.com/2020/02/13/Setup/"/>
    <id>http://yoursite.com/2020/02/13/Setup/</id>
    <published>2020-02-13T05:56:34.000Z</published>
    <updated>2020-02-13T06:37:41.648Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Environment-setup"><a href="#Environment-setup" class="headerlink" title="Environment setup"></a>Environment setup</h3><p>In this session, I will illustrate how to setup an environment for the CS231n assignment1. It is a little difference from the way we carry out our projects before. I know that many people would use Pycharm to do python programming, which is convenient and easy. However, the requirement of the environment for assigment1 is based on ubuntu system and ipython. If you do not have ubuntu system, you can download it from its website or if you are using window system, you can get it from microsoft store.  The one I use is Ubuntu 18.04 LTS. I assume that you have downloaded ubuntu system and use python3.x, and now I will show you the whole environment setup for the assignment. </p><p>In the website: <a href="http://cs231n.github.io/assignments2017/assignment1/" target="_blank" rel="noopener">http://cs231n.github.io/assignments2017/assignment1/</a> , you can see that there are some instructions of the environment setup. </p><ol><li><p>Get the code as a zip file in the website. Click here and you can download the file. Please remember the path of the file.</p><p><img src="/2020/02/13/Setup/1581303993815.png" alt="1581303993815"></p></li><li><p>In your ubuntu setup a virtual environment. </p><p>1) Enter your file.</p></li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd assignment1          <span class="comment"># this is the path of your file</span></span><br></pre></td></tr></table></figure><p>If your file is stored on your windows system, you should remember to add <strong>/mnt/</strong> before the path  eg. <strong>/mnt/c/Users/zhong201707030308/Desktop/assignment1</strong> </p><p>​     2) Install vituralenv if you do not have it.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip <span class="keyword">install</span> virtualenv      <span class="comment"># This may already be installed</span></span><br></pre></td></tr></table></figure><p>​    3)Create a virtual environment.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv -p python3 .env       <span class="comment"># Create a virtual environment (python3)</span></span><br></pre></td></tr></table></figure><p>   4)Activate your virtual environment.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .env/bin/activate         <span class="comment"># Activate the virtual environment</span></span><br></pre></td></tr></table></figure><p>Now that you have created your virtual environment, in this environment you can use python3. Note that you do not have any necessary packages now, so you need to download them. </p><ol><li>Download all the necessary packages. </li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> -r requirements.txt  <span class="comment"># Install dependencies</span></span><br></pre></td></tr></table></figure><p>The requirements.txt has listed all the libraries you may have to use.  You may also face the same problem as I did when installing the libraries. The first one may be downloading numpy==1.10.4. The easiest way to deal with it is downloading the latest version. It is quite tricky sometimes when you are installing some packages. In this case, the only thing you can do is to search on the internet. The second problem is site==0.0.1. You will be prompted that the compute can find any version of site, but you do not need to worry about it. You can just ignore this package which does not matter the programming. </p><p>After that ,you have installed some necessary packages, but if you need other libraries you can just install them by yourself. Next, I will show you other way to install these packages. </p><ol><li><p>Start programming. </p><p>1）Download dataset.</p></li></ol><p>In the assignment1 file enter the path:  <strong>cs231n/datasets</strong>, and then use <strong>./get_datasets.sh</strong> to get the dataset.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd cs231n/datasets</span><br><span class="line"></span><br><span class="line">./get_datasets.sh</span><br></pre></td></tr></table></figure><p>When you have implemented the command above, you will find that in the <strong>datasets/cifar-10-batches-py</strong> file there are many datasets. You can click readme.html to see the descriptions of the data.</p><p><img src="/2020/02/13/Setup/1581306454897.png" alt="1581306454897"></p><p>​      2) Start your jupyter notebook.</p><p>Use the command : <strong>jupyter notebook</strong> and you can start it. In this case, you can get the url and then open your notebook on the website. </p><p><img src="/2020/02/13/Setup/1581306823481.png" alt="1581306823481"></p><p><img src="/2020/02/13/Setup/1581306996635.png" alt="1581306996635"></p><p>If you want to create a .py file and want to run it on the notebook, you should click <strong>New</strong> on the top right  corner and then choose python3. </p><p><img src="/2020/02/13/Setup/1581307248848.png" alt="1581307248848"></p><p>Then you can program your code and run it. </p><p><img src="/2020/02/13/Setup/1581307297557.png" alt="1581307297557"></p><p>However, you may face the last and troublesome problem that is you can not import the packages which you have installed before. That is because the python3 jupyter notebook uses is not the same with the python3 that you have created in the virtual environment. You need to change the path of it. </p><p>First, check the path of python3 you use in the virtual environment. </p><p><img src="/2020/02/13/Setup/1581307763017.png" alt="1581307763017"></p><p>The path is where your python.exe exists. </p><p>Second, check the path of python3 the jupyter notebook uses. </p><p><img src="/2020/02/13/Setup/1581307874063.png" alt="1581307874063"></p><p>The first time I run this code, I got <strong>“/usr/bin/python3”</strong>. You can notice that the two paths are different. Now, you should modify the path of the jupyter notebook. </p><p><img src="/2020/02/13/Setup/1581308104047.png" alt="1581308104047"></p><p>Then enter the path shown above in your ubuntu and modify the kernel.json .</p><p><img src="/2020/02/13/Setup/1581308180368.png" alt="1581308180368"></p><p><img src="/2020/02/13/Setup/1581308206901.png" alt="1581308206901"></p><p>Change the path to your python’s path, then you can import all those packages successfully. That means you can enjoy the coding. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Environment-setup&quot;&gt;&lt;a href=&quot;#Environment-setup&quot; class=&quot;headerlink&quot; title=&quot;Environment setup&quot;&gt;&lt;/a&gt;Environment setup&lt;/h3&gt;&lt;p&gt;In this se
      
    
    </summary>
    
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
</feed>
