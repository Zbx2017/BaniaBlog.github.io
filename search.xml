<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Heapsort</title>
    <url>/2020/08/10/Heapsort/</url>
    <content><![CDATA[<h3 id="堆排序（Heapsort）"><a href="#堆排序（Heapsort）" class="headerlink" title="堆排序（Heapsort）"></a>堆排序（Heapsort）</h3><h5 id="Heap-property"><a href="#Heap-property" class="headerlink" title="Heap property"></a>Heap property</h5><p>堆数据结构是数组对象，它可以用近似完全二叉树进行表示。例如下面数组A，可以表示成a图的二叉树形式。</p>
<p><img src="/2020/08/10/Heapsort/heap.png" alt="img"></p>
<p>设一节点的索引为i，从上图可以看到，其父节点的索引和子节点的索引与该节点的索引有如下关系：</p>
<script type="math/tex; mode=display">
parent(i) = i//2  \quad(// 表示取整)\\</script><script type="math/tex; mode=display">
left(i) = 2i\\</script><script type="math/tex; mode=display">
right(i) = 2i + 1\\</script><p>例如，元素14的索引为2，其父节点索引为2//2 = 1，左子节点索引为2x2 = 4, 右子节点为2x2+1 = 5</p>
<p>堆有最大堆（max heaps）和最小堆（min heaps）结构，两种结构分别满足不同的特性。对于max heaps，除根节点外，所有节点的父节点的值要大于或等于该节点的值。也即：</p>
<script type="math/tex; mode=display">
A[parent(i)] \ge A[i]</script><p>对于min heaps，其特性刚好相反：</p>
<script type="math/tex; mode=display">
A[parent(i)] \le A[i]</script><p>但是任意给出一个数组，不一定满足堆的上述特性，因此需要相应的操作来保持堆的特性，下面以max heaps为例，讲述堆的相关操作。</p>
<h5 id="Max-heapify"><a href="#Max-heapify" class="headerlink" title="Max heapify"></a>Max heapify</h5><p>max heapify是用来保持堆的特性，对某一节点，判断该节点是否满足堆的特性，如果不满足则将该节点移动合适的位置。</p>
<p><img src="/2020/08/10/Heapsort/heapify.png" alt="img"></p>
<p>如上图，元素4不满足最大堆的特性因为它要比14和7都要小，因此4需要和14和7中最大的一个元素互换位置，以保证父节点的值大于等于子节点的值。互换位置后再次判断是否满足特性，这时仍然不满足，因此需要再次移动直到图c的位置。</p>
<p>因为当移动节点后仍然是进行相同的操作：判断是否满足特性，不满足则移动。因此可以用递归的方式进行编写代码，程序的时间复杂度为O(logn)。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heapify</span><span class="params">(arr, n, i)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    arr:数组</span></span><br><span class="line"><span class="string">    n：数组的长度</span></span><br><span class="line"><span class="string">    i: 当前节点的索引</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    r = <span class="number">2</span>*i + <span class="number">1</span></span><br><span class="line">    l = <span class="number">2</span>*i</span><br><span class="line">    <span class="comment"># 判断左子节点是否大于当前节点</span></span><br><span class="line">    <span class="keyword">if</span> l &lt; n <span class="keyword">and</span> arr[l] &gt; arr[i]:</span><br><span class="line">        largest = l</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        largest = i</span><br><span class="line">    <span class="comment"># 判断右子节点是否大于当前节点 </span></span><br><span class="line">    <span class="keyword">if</span> r &lt; n <span class="keyword">and</span> arr[r] &gt; arr[largest]:</span><br><span class="line">        largest = r</span><br><span class="line">    <span class="comment"># 不满足特性，交换节点位置，交换后再次进行heapify</span></span><br><span class="line">    <span class="keyword">if</span> largest <span class="keyword">is</span> <span class="keyword">not</span> i:</span><br><span class="line">        arr[i], arr[largest] = arr[largest], arr[i]</span><br><span class="line">        heapify(arr, n, largest)</span><br></pre></td></tr></table></figure>
<p>有了上述操作后，我们就可以根据数组来建立max heaps.</p>
<h5 id="Build-max-heaps"><a href="#Build-max-heaps" class="headerlink" title="Build max -heaps"></a>Build max -heaps</h5><p>堆的本质还是一个数组，Max-Heapify只是改变了元素的位置，使其满足最大堆的特性，因此需要对每一个元素检查其是否满足特性。但是A[n/2 + 1,…,n]这部分的元素都是子节点，因为2x(n/2 + 1)&gt;n，超出了索引范围，为此我们只需考虑前半部分的元素，其时间复杂度可以很容易得分析出为O(nlogn)。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_max_heaps</span><span class="params">(arr, n)</span>:</span></span><br><span class="line">    i = n//<span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> i &gt;= <span class="number">0</span>:</span><br><span class="line">        heapify(arr, n, i)</span><br><span class="line">        i -= <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h5 id="Heapsort-algorithm"><a href="#Heapsort-algorithm" class="headerlink" title="Heapsort algorithm"></a>Heapsort algorithm</h5><p>建立好的最大堆如图c，第一个元素是数组中的最大的元素，而索引靠后的元素是数组中较小的元素。如果我们需要升序排序，那么每一次可以将第一个元素和最后一个元素交换，改变数组的元素排列。交换后利用max-heapify，保持最大堆特性，这时第一个元素是前n-1个元素中最大的元素，将其放在n-1的位置处，以此类推即可完成排序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heapSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    n = len(arr)</span><br><span class="line">	build_max_heaps(arr, n)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(n<span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">        arr[k], arr[<span class="number">0</span>] = arr[<span class="number">0</span>], arr[k]</span><br><span class="line">        heapify(arr, k, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = [<span class="number">13</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">heapSort(arr)</span><br><span class="line">n = len(arr)</span><br><span class="line">print(<span class="string">"Sorted array is"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    print(<span class="string">" &#123;&#125;"</span>.format(arr[i]), end=<span class="string">""</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># output: </span></span><br><span class="line"><span class="comment"># Sorted array is</span></span><br><span class="line"><span class="comment"># 5 6 7 11 12 13</span></span><br></pre></td></tr></table></figure>
<p>整个程序的时间复杂度为O(nlogn)</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>最短路径算法-1</title>
    <url>/2020/08/09/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95-1/</url>
    <content><![CDATA[<h3 id="最短路径算法-1"><a href="#最短路径算法-1" class="headerlink" title="最短路径算法-1"></a>最短路径算法-1</h3><p>BFS和DFS都可以用来找两点之间的最短路径，这里我将介绍其他几种最短路径的算法。</p>
<h5 id="爬山法（Hill-Climbing）"><a href="#爬山法（Hill-Climbing）" class="headerlink" title="爬山法（Hill-Climbing）"></a>爬山法（Hill-Climbing）</h5><p>在图的表示中，我介绍了如何自定义类来表示图，其中就有启发式距离的表示。爬山法是在DFS上基于启发式距离的一种算法。有点类似于贪婪算法，每一次选择离目标顶点最近的顶点进行遍历，因此只需对DFS的代码增加选取离目标最近顶点即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hill_climbing</span><span class="params">(graph, start, goal)</span>:</span></span><br><span class="line">    pathlist=[(start,)]</span><br><span class="line">    <span class="keyword">if</span> start == goal:</span><br><span class="line">        <span class="keyword">return</span> [start]</span><br><span class="line">    <span class="keyword">while</span> len(pathlist) &gt; <span class="number">0</span>:</span><br><span class="line">        curr_path = pathlist.pop(<span class="number">0</span>)</span><br><span class="line">        curr_node = curr_path[<span class="number">-1</span>]</span><br><span class="line">        new_nodes = graph.get_connected_nodes(curr_node)</span><br><span class="line">        <span class="keyword">if</span> len(curr_path) &gt; <span class="number">1</span>:</span><br><span class="line">            new_nodes = [node <span class="keyword">for</span> node <span class="keyword">in</span> new_nodes <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> curr_path]</span><br><span class="line">        <span class="keyword">if</span> goal <span class="keyword">in</span> new_nodes:</span><br><span class="line">            goal_path = curr_path + (goal, )</span><br><span class="line">            <span class="keyword">return</span> list(goal_path)</span><br><span class="line">        <span class="comment"># 根据启发式距离对顶点进行排序</span></span><br><span class="line">        dis = [(graph.get_heuristic(node, goal), node) <span class="keyword">for</span> node <span class="keyword">in</span> new_nodes]</span><br><span class="line">        dis = sorted(dis)</span><br><span class="line">        <span class="comment"># 取距离最近的顶点</span></span><br><span class="line">        new_nodes = [node[<span class="number">1</span>] <span class="keyword">for</span> node <span class="keyword">in</span> dis]</span><br><span class="line">        new_paths = [curr_path + (node,) <span class="keyword">for</span> node <span class="keyword">in</span> new_nodes]</span><br><span class="line">        new_paths.extend(pathlist)</span><br><span class="line">        pathlist = new_paths</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure>
<p>爬山法运行起来要比DFS效率要高，因为省去了一些顶点，但是缺点在于容易陷入局部最优，而不能找到全局最优的路径。</p>
<h5 id="集束搜索（Beam-Search）"><a href="#集束搜索（Beam-Search）" class="headerlink" title="集束搜索（Beam Search）"></a>集束搜索（Beam Search）</h5><p>前面的爬山法是在DFS算法基础上改进的，而集束搜索是在BFS算法基础上改进的。BFS会遍历每一层级的所有顶点，而集束搜索会选择前k个离目标顶点的启发式距离最近的顶点进行遍历，k称为集束宽度（beam width）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">beam_search</span><span class="params">(graph, start, goal, beam_width)</span>:</span></span><br><span class="line">    pathlist = [(start,)]</span><br><span class="line">    <span class="keyword">if</span> start == goal:</span><br><span class="line">        <span class="keyword">return</span> [start]</span><br><span class="line">    <span class="keyword">while</span> len(pathlist) &gt; <span class="number">0</span>:</span><br><span class="line">        new_paths = []</span><br><span class="line">        <span class="comment"># 取前beam_width个路径</span></span><br><span class="line">        pathlist = pathlist[:beam_width]</span><br><span class="line">        <span class="keyword">while</span> len(pathlist) &gt; <span class="number">0</span>:</span><br><span class="line">            curr_path = pathlist.pop(<span class="number">0</span>)</span><br><span class="line">            curr_node = curr_path[<span class="number">-1</span>]</span><br><span class="line">            new_nodes = graph.get_connected_nodes(curr_node)</span><br><span class="line">            <span class="keyword">if</span> len(curr_path) &gt; <span class="number">1</span>:</span><br><span class="line">                new_nodes = [node <span class="keyword">for</span> node <span class="keyword">in</span> new_nodes <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> curr_path]</span><br><span class="line">            <span class="keyword">if</span> goal <span class="keyword">in</span> new_nodes:</span><br><span class="line">                goal_path = curr_path + (goal,)</span><br><span class="line">                <span class="keyword">return</span> list(goal_path)</span><br><span class="line">            new_paths += [curr_path + (node,) <span class="keyword">for</span> node <span class="keyword">in</span> new_nodes]</span><br><span class="line">        pathlist.extend(new_paths)</span><br><span class="line">        <span class="comment"># sort pathlist</span></span><br><span class="line">        dis = [(graph.get_heuristic(path[<span class="number">-1</span>], goal), path) <span class="keyword">for</span> path <span class="keyword">in</span> pathlist]</span><br><span class="line">        dis = sorted(dis)</span><br><span class="line">        pathlist = [path[<span class="number">1</span>] <span class="keyword">for</span> path <span class="keyword">in</span> dis]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure>
<h5 id="分支界定法（branch-and-bound）"><a href="#分支界定法（branch-and-bound）" class="headerlink" title="分支界定法（branch and bound）"></a>分支界定法（branch and bound）</h5><p>前面的两种算法都是基于启发式距离，而路径最短往往说的是实际的路径长度，分支界定法就是基于实际的路径长度，每次选路径最短进行遍历。因此需要一个方法来统计到目前顶点的累积路径长度：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">path_length</span><span class="params">(graph, node_names)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    node_names:遍历过的顶点</span></span><br><span class="line"><span class="string">    return:返回累积路径长度</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    length = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; len(node_names) - <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> graph.are_connected(node_names[i], node_names[i+<span class="number">1</span>]):</span><br><span class="line">            length += graph.get_edge(node_names[i], node_names[i+<span class="number">1</span>]).length</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> length</span><br></pre></td></tr></table></figure>
<p>同时，只需将爬山法的对启发式距离排序的程序改为对所有路径按累积路径长度进行排序即可，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">branch_and_bound</span><span class="params">(graph, start, goal)</span>:</span></span><br><span class="line">    pathlist = [(start,)]</span><br><span class="line">    <span class="keyword">if</span> start == goal:</span><br><span class="line">        <span class="keyword">return</span> [start]</span><br><span class="line">    goal_path = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">while</span> len(pathlist) &gt; <span class="number">0</span>:</span><br><span class="line">        curr_path = pathlist.pop(<span class="number">0</span>)</span><br><span class="line">        curr_node = curr_path[<span class="number">-1</span>]</span><br><span class="line">        new_nodes = graph.get_connected_nodes(curr_node)</span><br><span class="line">        <span class="keyword">if</span> len(curr_path) &gt; <span class="number">1</span>:</span><br><span class="line">            new_nodes = [node <span class="keyword">for</span> node <span class="keyword">in</span> new_nodes <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> curr_path]</span><br><span class="line">        <span class="keyword">if</span> goal <span class="keyword">in</span> new_nodes <span class="keyword">and</span> goal_path:</span><br><span class="line">            new_goal_path = curr_path + (goal,)</span><br><span class="line">            <span class="keyword">if</span> path_length(graph, new_goal_path) &lt; path_length(graph, goal_path):</span><br><span class="line">                goal_path = new_goal_path</span><br><span class="line">        <span class="keyword">elif</span> goal <span class="keyword">in</span> new_nodes <span class="keyword">and</span> <span class="keyword">not</span> goal_path:</span><br><span class="line">            goal_path = curr_path + (goal,)</span><br><span class="line">        new_paths = [curr_path + (node,) <span class="keyword">for</span> node <span class="keyword">in</span> new_nodes]</span><br><span class="line">        new_paths.extend(pathlist)</span><br><span class="line">        pathlist = new_paths</span><br><span class="line">        <span class="comment"># 按路径长度对所有路径进行排序</span></span><br><span class="line">        dis = [(path_length(graph, path), path) <span class="keyword">for</span> path <span class="keyword">in</span> pathlist]</span><br><span class="line">        dis = sorted(dis)</span><br><span class="line">        <span class="comment"># 取最短的路径</span></span><br><span class="line">        pathlist = [path[<span class="number">1</span>] <span class="keyword">for</span> path <span class="keyword">in</span> dis]</span><br><span class="line">    <span class="keyword">if</span> goal_path:</span><br><span class="line">        <span class="keyword">return</span> list(goal_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure>
<h5 id="A-算法"><a href="#A-算法" class="headerlink" title="A* 算法"></a>A* 算法</h5><p>A*算法是同时基于累积路径长度和启发式距离的算法，对于程序的编写，我们只需在上述代码中增加启发式距离即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_star</span><span class="params">(graph, start, goal)</span>:</span></span><br><span class="line">    pathlist = [(start,)]</span><br><span class="line">    <span class="keyword">if</span> start == goal:</span><br><span class="line">        <span class="keyword">return</span> [start]</span><br><span class="line">    goal_path = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">while</span> len(pathlist) &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span> goal_path:</span><br><span class="line">        curr_path = pathlist.pop(<span class="number">0</span>)</span><br><span class="line">        curr_node = curr_path[<span class="number">-1</span>]</span><br><span class="line">        new_nodes = graph.get_connected_nodes(curr_node)</span><br><span class="line">        <span class="keyword">if</span> len(curr_path) &gt; <span class="number">1</span>:</span><br><span class="line">            new_nodes = [node <span class="keyword">for</span> node <span class="keyword">in</span> new_nodes <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> curr_path]</span><br><span class="line">        <span class="keyword">if</span> goal <span class="keyword">in</span> new_nodes:</span><br><span class="line">            goal_path = curr_path + (goal,)</span><br><span class="line">        new_paths = [curr_path + (node,) <span class="keyword">for</span> node <span class="keyword">in</span> new_nodes]</span><br><span class="line">        new_paths.extend(pathlist)</span><br><span class="line">        pathlist = new_paths</span><br><span class="line">        <span class="comment"># 按 累计长度+启发式距离 对所有路径进行排序</span></span><br><span class="line">        dis = [(path_length(graph, path)+graph.get_heuristic(path[<span class="number">-1</span>], goal),</span><br><span class="line">                path) <span class="keyword">for</span> path <span class="keyword">in</span> pathlist]</span><br><span class="line">        dis = sorted(dis)</span><br><span class="line">        pathlist = [path[<span class="number">1</span>] <span class="keyword">for</span> path <span class="keyword">in</span> dis]</span><br><span class="line">    <span class="keyword">if</span> goal_path:</span><br><span class="line">        <span class="keyword">return</span> list(goal_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure>
<p>A<em> 算法是其中效率比较高的算法，但其运行的好坏，在于启发式距离设定的好坏。如果get_heuristic(node, goal)始终小于等于节点node到goal的实际距离，则A</em>算法保证一定能够找到最短路径。但是当get_heuristic(node, goal)的值越小，算法将遍历越多的节点，也就导致算法越慢。</p>
<p>如果get_heuristic(node, goal)大于节点node到goal的实际距离，则A*算法不能保证找到最短路径，不过此时会很快。</p>
]]></content>
  </entry>
  <entry>
    <title>DFS</title>
    <url>/2020/08/09/DFS/</url>
    <content><![CDATA[<h3 id="DFS-深度优先搜索"><a href="#DFS-深度优先搜索" class="headerlink" title="DFS(深度优先搜索)"></a>DFS(深度优先搜索)</h3><p>DFS也是一种常见的图的搜索算法，与BFS不同，DFS不按层级遍历，而是从一条路径遍历到末尾，再返回原来的路径，选择另一路径继续相同的操作，直到全部遍历完成，或到达停止的条件，这一过程类似于走迷宫一样。因此我们还可以用递归的方法实现DFS算法。</p>
<p>在BFS算法中，我们借助了队列的数据结构，遵循先进先出原则，从而实现对每一层级的遍历。与之相反，在DFS，我们需要借助堆栈的数据结构，遵循后进先出原则，从而实现深度优先。</p>
<p>非递归方法的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs_1</span><span class="params">(graph, start)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    return:返回依次序遍历的顶点</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    visited, stack = set(), [start]</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        vertex = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> vertex <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">            visited.add(vertex)</span><br><span class="line">            stack.extend(set(graph.get_connected_nodes(vertex)) - visited)</span><br><span class="line">    <span class="keyword">return</span> visited</span><br></pre></td></tr></table></figure>
<p>递归方法的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs_rec</span><span class="params">(graph, node, visited=None)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    return:返回依次序遍历的顶点</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> visited <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        visited = []</span><br><span class="line">    <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">        visited.append(node)</span><br><span class="line">        <span class="keyword">for</span> neighbour <span class="keyword">in</span> graph.get_connected_nodes(node):</span><br><span class="line">            dfs_rec(graph, neighbour, visited)</span><br><span class="line">    <span class="keyword">return</span> visited</span><br></pre></td></tr></table></figure>
<p>如果需要寻找两个顶点间的最短路径，可以采用类似在BFS中找最短路径的方法，代码结构基本一致，其中的细节需要做如下改动：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs_path</span><span class="params">(graph, start, goal)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param graph:</span></span><br><span class="line"><span class="string">    :param start:</span></span><br><span class="line"><span class="string">    :param goal:</span></span><br><span class="line"><span class="string">    :return: return the path from start to goal, when the goal is found, the</span></span><br><span class="line"><span class="string">    programme will stop.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    pathlist=[(start,)]</span><br><span class="line">    <span class="keyword">if</span> start == goal:</span><br><span class="line">        <span class="keyword">return</span> [start]</span><br><span class="line">    <span class="keyword">while</span> len(pathlist) &gt; <span class="number">0</span>:</span><br><span class="line">        curr_path = pathlist.pop(<span class="number">0</span>)</span><br><span class="line">        curr_node = curr_path[<span class="number">-1</span>]</span><br><span class="line">        new_nodes = graph.get_connected_nodes(curr_node)</span><br><span class="line">        <span class="keyword">if</span> len(curr_path) &gt; <span class="number">1</span>:</span><br><span class="line">            new_nodes = [node <span class="keyword">for</span> node <span class="keyword">in</span> new_nodes <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> curr_path]</span><br><span class="line">        <span class="keyword">if</span> goal <span class="keyword">in</span> new_nodes:</span><br><span class="line">            goal_path = curr_path + (goal, )</span><br><span class="line">            <span class="keyword">return</span> goal_path</span><br><span class="line">        new_paths = [curr_path + (node, ) <span class="keyword">for</span> node <span class="keyword">in</span> new_nodes]</span><br><span class="line">        new_paths.extend(pathlist)</span><br><span class="line">        pathlist = new_paths</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure>
<p>同时，如果需要找到所有的路径，基本思路与BFS的类似：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs_all_path</span><span class="params">(graph, start, goal)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param graph:</span></span><br><span class="line"><span class="string">    :param start:</span></span><br><span class="line"><span class="string">    :param goal:</span></span><br><span class="line"><span class="string">    :return: return the list of all the paths from start to goal</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    stack = [(start, [start])]</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        (vertex, path) = stack.pop()</span><br><span class="line">        <span class="keyword">for</span> next <span class="keyword">in</span> set(graph.get_connected_nodes(vertex)) - set(path):</span><br><span class="line">            <span class="keyword">if</span> next == goal:</span><br><span class="line">                <span class="keyword">yield</span> path + [next]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append((next, path + [next]))</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>BFS</title>
    <url>/2020/08/09/BFS/</url>
    <content><![CDATA[<h3 id="BFS-广度优先搜索"><a href="#BFS-广度优先搜索" class="headerlink" title="BFS(广度优先搜索)"></a>BFS(广度优先搜索)</h3><p>图的应用中，最重要的一部分就是图的搜索和遍历，图的搜索算法有很多，而BFS是其中一种比较简单的搜索算法。算法核心在于，从初始顶点开始，一层一层遍历搜索顶点，直到所有顶点搜索完毕，如下图所示：</p>
<p><img src="/2020/08/09/BFS/BFS.png" alt="img"></p>
<p>实现这个算法，我们首先定义level字典，保存每个vertex的层级信息，frontier列表用来保存上一层级遍历过的vertex，parent字典用来保存每个vertex的上一个vertex。为此代码的思路如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">初始化：level，frontier，parent 保存初始顶点</span><br><span class="line">遍历frontier的所有顶点：</span><br><span class="line">	定义next列表，保存下一次需要遍历的顶点</span><br><span class="line">	遍历所有与frontier中顶点相连的其他顶点：</span><br><span class="line">		如果不在level中即没有遍历：</span><br><span class="line">			更新level，parent，next</span><br><span class="line">	frontier &#x3D; next</span><br><span class="line">	层级加一</span><br></pre></td></tr></table></figure>
<p>因此我们的代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs_1</span><span class="params">(graph, start)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    return: 被遍历的顶点次序和level字典</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    level = &#123;start: <span class="number">0</span>&#125;</span><br><span class="line">    parent = &#123;start: <span class="literal">None</span>&#125;</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    frontier = [start]</span><br><span class="line">    node_visited = [start]</span><br><span class="line">    <span class="keyword">while</span> frontier:</span><br><span class="line">        next = []</span><br><span class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> frontier:</span><br><span class="line">            <span class="keyword">for</span> v <span class="keyword">in</span> graph.get_connected_nodes(u):</span><br><span class="line">                <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> level:</span><br><span class="line">                    level[v] = i</span><br><span class="line">                    parent[v] = u</span><br><span class="line">                    next.append(v)</span><br><span class="line">                    node_visited.append(v)</span><br><span class="line">        frontier = next</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> node_visited, level</span><br></pre></td></tr></table></figure>
<p>根据BFS的核心思想，我们可以对代码进行不同版本的修改，比如利用队列的特性，可以将上述代码简化，结果返回遍历顶点的次序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs_2</span><span class="params">(graph, start)</span>:</span></span><br><span class="line">    explore = []</span><br><span class="line">    queue = [start]</span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        node = queue.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> explore:</span><br><span class="line">            explore.append(node)</span><br><span class="line">            <span class="keyword">for</span> neighbor <span class="keyword">in</span> graph.get_connected_nodes(node):</span><br><span class="line">                queue.append(neighbor)</span><br><span class="line">    <span class="keyword">return</span> explore</span><br></pre></td></tr></table></figure>
<p>如果需要用BFS找到两点之间的最短路径，可以将第一版的代码修改如下：</p>
<p>在for循环中增加是否找到目标顶点的判断条件，如果是则结束遍历，reach_goal标志设为true，最后利用parent字典，反向遍历找到start到goal的路径。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs_path</span><span class="params">(graph, start, goal)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> start == goal:</span><br><span class="line">        <span class="keyword">return</span> [start]</span><br><span class="line">    level = &#123;start: <span class="number">0</span>&#125;</span><br><span class="line">    parent = &#123;start: <span class="literal">None</span>&#125;</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    frontier = [start]</span><br><span class="line">    node_visited = [start]</span><br><span class="line">    reach_goal = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">while</span> frontier:</span><br><span class="line">        next = []</span><br><span class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> frontier:</span><br><span class="line">            <span class="keyword">if</span> goal <span class="keyword">in</span> graph.get_connected_nodes(u):</span><br><span class="line">                parent[goal] = u</span><br><span class="line">                reach_goal = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">for</span> v <span class="keyword">in</span> graph.get_connected_nodes(u):</span><br><span class="line">                <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> level:</span><br><span class="line">                    level[v] = i</span><br><span class="line">                    parent[v] = u</span><br><span class="line">                    next.append(v)</span><br><span class="line">                    node_visited.append(v)</span><br><span class="line">        frontier = next</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> reach_goal:</span><br><span class="line">        pathlist = []</span><br><span class="line">        temp = goal</span><br><span class="line">        <span class="keyword">while</span> temp:</span><br><span class="line">            pathlist.append(temp)</span><br><span class="line">            temp = parent[temp]</span><br><span class="line">        pathlist.reverse()</span><br><span class="line">        <span class="keyword">return</span> pathlist</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure>
<p>第二种方法没有用parent字典，它是保存当前的路径，从而无需对parent字典反向遍历。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs_path_2</span><span class="params">(graph, start, goal)</span>:</span></span><br><span class="line">    pathlist = [(start,)]</span><br><span class="line">    <span class="keyword">if</span> start == goal:</span><br><span class="line">        <span class="keyword">return</span> [start]</span><br><span class="line">    <span class="keyword">while</span> len(pathlist) &gt; <span class="number">0</span>:</span><br><span class="line">        new_paths = []</span><br><span class="line">        <span class="keyword">while</span> len(pathlist) &gt; <span class="number">0</span>:</span><br><span class="line">            curr_path = pathlist.pop(<span class="number">0</span>)</span><br><span class="line">            curr_node = curr_path[<span class="number">-1</span>]</span><br><span class="line">            new_nodes = graph.get_connected_nodes(curr_node)</span><br><span class="line">            <span class="comment"># 更新顶点信息</span></span><br><span class="line">            <span class="keyword">if</span> len(curr_path) &gt; <span class="number">1</span>:</span><br><span class="line">                new_nodes = [node <span class="keyword">for</span> node <span class="keyword">in</span> new_nodes <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> curr_path]</span><br><span class="line">            <span class="keyword">if</span> goal <span class="keyword">in</span> new_nodes:</span><br><span class="line">                goal_path = curr_path + (goal,)</span><br><span class="line">                <span class="keyword">return</span> goal_path</span><br><span class="line">            <span class="comment"># 更新路径信息</span></span><br><span class="line">            new_paths += [curr_path + (node,) <span class="keyword">for</span> node <span class="keyword">in</span> new_nodes]</span><br><span class="line">        pathlist.extend(new_paths)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure>
<p>如果需要找到从初始顶点到目标顶点的所有路径，我们只需修改找到目标顶点的判断条件即可，使程序继续执行，这里我们可以利用yield关键字，同时利用集合的差集运算，去掉已经遍历过的顶点。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs_allpaths</span><span class="params">(graph, start, goal)</span>:</span></span><br><span class="line">    queue = [(start, [start])]</span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        (vertex, path) = queue.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> next <span class="keyword">in</span> set(graph.get_connected_nodes(vertex)) - set(path):</span><br><span class="line">            <span class="keyword">if</span> next == goal:</span><br><span class="line">                <span class="keyword">yield</span> path + [next]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                queue.append((next, path + [next]))</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Graph</title>
    <url>/2020/08/09/Graph/</url>
    <content><![CDATA[<h4 id="图（Graph）的表示"><a href="#图（Graph）的表示" class="headerlink" title="图（Graph）的表示"></a>图（Graph）的表示</h4><h5 id="1-图的概念"><a href="#1-图的概念" class="headerlink" title="1.图的概念"></a>1.图的概念</h5><p>图是一种重要的数据结构，在解决实际问题中也经常用到这种数据结构，其基本表示为G=(V, E)，V(vectex)是图的顶点，E(edge)表示图的边。我们的地图在计算机中就可以表示成一个Graph，不同的标志性地点为vectex，地点之间的路表示为edge，这样就可以方便操作实际中的地图去解决一些复杂的问题，比如找两个地点之间的最短路径，旅行商问题等等。</p>
<p>图分为有向图和无向图，有向图指的是各个顶点之间有一定的方向，一个顶点到另一个顶点需要按照给定的方向进行移动；而无向图指的是顶点之间没有固定方向。如下图所示，第一幅图为无向图，第二幅图为有向图。在有向图中，顶点1指向顶点2，说明1可以移向2，但是2不能移向1。</p>
<p><img src="/2020/08/09/Graph/有向图.png" alt="img"></p>
<p><img src="/2020/08/09/Graph/无向图.png" alt="img"></p>
<h5 id="2-图的表示"><a href="#2-图的表示" class="headerlink" title="2.图的表示"></a>2.图的表示</h5><p>图的表示就是表示清楚顶点信息和边的信息。有两种表示方法，邻接链表和邻接矩阵。如上面两张图可分别表示如下：</p>
<p><img src="/2020/08/09/Graph/图的表示1.png" alt="img"></p>
<p><img src="/2020/08/09/Graph/图的表示2.png" alt="img"></p>
<p>在计算机中，我们可以使用一些数据结构来简化图的表达，比如在Python中，我们可以用下面代码来表示一个图：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">graph = &#123;<span class="string">'A'</span>: set([<span class="string">'B'</span>, <span class="string">'C'</span>]),</span><br><span class="line">         <span class="string">'B'</span>: set([<span class="string">'A'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>]),</span><br><span class="line">         <span class="string">'C'</span>: set([<span class="string">'A'</span>, <span class="string">'F'</span>]),</span><br><span class="line">         <span class="string">'D'</span>: set([<span class="string">'B'</span>]),</span><br><span class="line">         <span class="string">'E'</span>: set([<span class="string">'B'</span>, <span class="string">'F'</span>]),</span><br><span class="line">         <span class="string">'F'</span>: set([<span class="string">'C'</span>, <span class="string">'E'</span>])&#125;</span><br></pre></td></tr></table></figure>
<p>graph是一个字典，其中keys是所有的vertices，values是与该顶点连接的其他顶点。如果我们需要获取所有的顶点，那么可以利用字典的keys()方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">graph.keys()</span><br><span class="line"></span><br><span class="line">output: dict_keys([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>])</span><br></pre></td></tr></table></figure>
<p>获取与某个顶点相连的其他顶点，就可直接利用字典的取值方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">graph[<span class="string">'A'</span>]</span><br><span class="line"></span><br><span class="line">output: &#123;<span class="string">'B'</span>, <span class="string">'C'</span>&#125;</span><br></pre></td></tr></table></figure>
<p>但是如果图中的每一个边有权，我们称之为有权图时，利用上述的表示方法不能很方便地得到权重信息，为此我们可以封装一个类，定义获取边，权重等相关信息的函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Fall 2012 6.034 Lab 2: Search</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    set()</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    <span class="keyword">from</span> sets <span class="keyword">import</span> Set <span class="keyword">as</span> set, ImmutableSet <span class="keyword">as</span> frozenset</span><br><span class="line"></span><br><span class="line">NAME=<span class="string">"NAME"</span></span><br><span class="line">NODE1=<span class="string">"NODE1"</span></span><br><span class="line">NODE2=<span class="string">"NODE2"</span></span><br><span class="line">VAL=<span class="string">"LENGTH"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Edge</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, node1, node2, length)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.node1 = node1</span><br><span class="line">        self.node2 = node2</span><br><span class="line">        self.length = length</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Edge '</span> + self.name + \</span><br><span class="line">               <span class="string">' from '</span> + self.node1 + <span class="string">' to '</span> + self.node2 + \</span><br><span class="line">               <span class="string">' with length '</span> + str(self.length)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nodes=None, edgesdict=None, heuristic=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 edges=None)</span>:</span></span><br><span class="line">        <span class="string">'''specify EITHER edgesdict OR edges'''</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> edges:</span><br><span class="line">            self.edges = edges</span><br><span class="line">        <span class="keyword">elif</span> edgesdict:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.edges = [Edge(e[<span class="string">'NAME'</span>], e[<span class="string">'NODE1'</span>], e[<span class="string">'NODE2'</span>], e[<span class="string">'LENGTH'</span>])\</span><br><span class="line">                              <span class="keyword">for</span> e <span class="keyword">in</span> edgesdict]</span><br><span class="line">            <span class="keyword">except</span> KeyError:</span><br><span class="line">                self.edges = [Edge(e[<span class="string">'name'</span>], e[<span class="string">'node1'</span>], e[<span class="string">'node2'</span>], e[<span class="string">'length'</span>])\</span><br><span class="line">                              <span class="keyword">for</span> e <span class="keyword">in</span> edgesdict]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.edges = []</span><br><span class="line">        self.nodes = nodes</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nodes:</span><br><span class="line">            self.nodes = list(set([edge.node1 <span class="keyword">for</span> edge <span class="keyword">in</span> self.edges] + </span><br><span class="line">                                  [edge.node2 <span class="keyword">for</span> edge <span class="keyword">in</span> self.edges]))</span><br><span class="line">        <span class="comment"># heuristic is a dictionary where heuristic[G][S] is the</span></span><br><span class="line">        <span class="comment">#  heuristic distance from S to G</span></span><br><span class="line">        self.heuristic = heuristic</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> heuristic:</span><br><span class="line">            self.heuristic = &#123;&#125;</span><br><span class="line">        self.validate()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> self.nodes:</span><br><span class="line">            <span class="keyword">assert</span> isinstance(name, str), str(type(name))+<span class="string">": "</span>+str(name)</span><br><span class="line">        <span class="keyword">assert</span> len(self.nodes) == len(set(self.nodes)), <span class="string">"no duplicate nodes"</span></span><br><span class="line">        edgenames = [edge.name <span class="keyword">for</span> edge <span class="keyword">in</span> self.edges]</span><br><span class="line">        <span class="keyword">assert</span> len(edgenames) == len(set(edgenames)), <span class="string">"no duplicate edges"</span></span><br><span class="line">        <span class="keyword">for</span> edge <span class="keyword">in</span> self.edges:</span><br><span class="line">            <span class="keyword">assert</span> isinstance(edge.name, str), type(edge.name)</span><br><span class="line">            <span class="keyword">assert</span> edge.node1 <span class="keyword">in</span> self.nodes</span><br><span class="line">            <span class="keyword">assert</span> edge.node2 <span class="keyword">in</span> self.nodes</span><br><span class="line">            <span class="keyword">assert</span> edge.length &gt; <span class="number">0</span>, <span class="string">"positive edges only today"</span></span><br><span class="line">        <span class="keyword">for</span> start <span class="keyword">in</span> self.nodes:</span><br><span class="line">            <span class="keyword">for</span> end <span class="keyword">in</span> self.nodes:</span><br><span class="line">                <span class="keyword">assert</span> self.get_heuristic(start,end) &gt;= <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_connected_nodes</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        gets a list of all node id values connected to a given node.</span></span><br><span class="line"><span class="string">        'node' should be a node name, not a dictionary.</span></span><br><span class="line"><span class="string">        The return value is a list of node names.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">assert</span> node <span class="keyword">in</span> self.nodes, <span class="string">"No node "</span>+str(node)+<span class="string">" in graph "</span>+str(self)</span><br><span class="line">        result = [x.node2 <span class="keyword">for</span> x <span class="keyword">in</span> self.edges <span class="keyword">if</span> x.node1 == node]</span><br><span class="line">        result += [x.node1 <span class="keyword">for</span> x <span class="keyword">in</span> self.edges <span class="keyword">if</span> x.node2 == node]</span><br><span class="line">        <span class="keyword">return</span> sorted(result)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_edge</span><span class="params">(self, node1, node2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        checks the list of edges and returns an edge if</span></span><br><span class="line"><span class="string">        both connected nodes are part of the edge, or 'None' otherwise.</span></span><br><span class="line"><span class="string">        'node1' and 'node2' are names of nodes, not 'NODE' dictionaries.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">assert</span> node1 <span class="keyword">in</span> self.nodes, <span class="string">"No node "</span>+str(node1)+<span class="string">" in graph "</span>+str(self)</span><br><span class="line">        <span class="keyword">assert</span> node2 <span class="keyword">in</span> self.nodes, <span class="string">"No node "</span>+str(node2)+<span class="string">" in graph "</span>+str(self)</span><br><span class="line">        node_names = ( node1, node2 )</span><br><span class="line">        <span class="keyword">for</span> edge <span class="keyword">in</span> self.edges:</span><br><span class="line">            <span class="keyword">if</span> ((edge.node1, edge.node2) == node_names <span class="keyword">or</span> </span><br><span class="line">                (edge.node2, edge.node1) == node_names):</span><br><span class="line">                <span class="keyword">return</span> edge</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">are_connected</span><span class="params">(self, node1, node2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        checks if two edges are connected.</span></span><br><span class="line"><span class="string">        'node1' and 'node2' are names of nodes, not 'NODE' dictionaries.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> bool(self.get_edge(node1, node2) )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_heuristic</span><span class="params">(self, start, goal)</span>:</span></span><br><span class="line">        <span class="string">""" Return the value of the heuristic from the start to the goal"""</span></span><br><span class="line">        <span class="keyword">assert</span> start <span class="keyword">in</span> self.nodes, <span class="string">"No node "</span>+str(start)+<span class="string">" in graph "</span>+str(self)</span><br><span class="line">        <span class="keyword">assert</span> goal <span class="keyword">in</span> self.nodes, <span class="string">"No node "</span>+str(goal)+<span class="string">" in graph "</span>+str(self)</span><br><span class="line">        <span class="keyword">if</span> goal <span class="keyword">in</span> self.heuristic:</span><br><span class="line">            <span class="keyword">if</span> start <span class="keyword">in</span> self.heuristic[goal]:</span><br><span class="line">                <span class="keyword">return</span> self.heuristic[goal][start]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span> <span class="comment"># we have checked that everything is positive</span></span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span> <span class="comment"># we have checked that everything is positive</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_valid_path</span><span class="params">(self, path)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">is_valid_path_reducer</span><span class="params">(elt_a, elt_b)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> elt_a == <span class="literal">False</span> <span class="keyword">or</span> <span class="keyword">not</span> self.are_connected(elt_a, elt_b):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> elt_b</span><br><span class="line">        <span class="keyword">return</span> (reduce(is_valid_path_reducer, path) != <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_edge</span><span class="params">(self, node1, node2, length, name=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node1 <span class="keyword">not</span> <span class="keyword">in</span> self.nodes:</span><br><span class="line">            self.nodes.append(node1)</span><br><span class="line">        <span class="keyword">if</span> node2 <span class="keyword">not</span> <span class="keyword">in</span> self.nodes:</span><br><span class="line">            self.nodes.append(node2)</span><br><span class="line">        <span class="keyword">if</span> name == <span class="literal">None</span>:</span><br><span class="line">            name = (<span class="string">"%s %s"</span> % (node1, node2))</span><br><span class="line">        self.edges.append(Edge(name, node1, node2, length))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_heuristic</span><span class="params">(self, start, goal, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> goal <span class="keyword">not</span> <span class="keyword">in</span> self.heuristic:</span><br><span class="line">            self.heuristic[goal] = &#123;&#125;</span><br><span class="line">        self.heuristic[goal][start] = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Graph: \n  edges="</span>+str(self.edges)+<span class="string">"\n  heuristic="</span>+str(self.heuristic)</span><br></pre></td></tr></table></figure>
<p>根据init方法的定义，一个图可以如下定义：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AGRAPH = Graph(nodes = [<span class="string">'S'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'G'</span>],</span><br><span class="line">               edgesdict = [&#123;<span class="string">'NAME'</span>: <span class="string">'eSA'</span>, <span class="string">'LENGTH'</span>: <span class="number">3</span>, <span class="string">'NODE1'</span>: <span class="string">'S'</span>, <span class="string">'NODE2'</span>: <span class="string">'A'</span>&#125;,</span><br><span class="line">                            &#123;<span class="string">'NAME'</span>: <span class="string">'eSB'</span>, <span class="string">'LENGTH'</span>: <span class="number">1</span>, <span class="string">'NODE1'</span>: <span class="string">'S'</span>, <span class="string">'NODE2'</span>: <span class="string">'B'</span>&#125;,</span><br><span class="line">                            &#123;<span class="string">'NAME'</span>: <span class="string">'eAB'</span>, <span class="string">'LENGTH'</span>: <span class="number">1</span>, <span class="string">'NODE1'</span>: <span class="string">'A'</span>, <span class="string">'NODE2'</span>: <span class="string">'B'</span>&#125;,</span><br><span class="line">                            &#123;<span class="string">'NAME'</span>: <span class="string">'eAC'</span>, <span class="string">'LENGTH'</span>: <span class="number">1</span>, <span class="string">'NODE1'</span>: <span class="string">'A'</span>, <span class="string">'NODE2'</span>: <span class="string">'C'</span>&#125;,</span><br><span class="line">                            &#123;<span class="string">'NAME'</span>: <span class="string">'eCG'</span>, <span class="string">'LENGTH'</span>: <span class="number">10</span>, <span class="string">'NODE1'</span>: <span class="string">'C'</span>, <span class="string">'NODE2'</span>: <span class="string">'G'</span>&#125;],</span><br><span class="line">               heuristic = &#123;<span class="string">'G'</span>:&#123;<span class="string">'S'</span>: <span class="number">12</span>,</span><br><span class="line">                                 <span class="string">'A'</span>: <span class="number">9</span>,</span><br><span class="line">                                 <span class="string">'B'</span>: <span class="number">12</span>,</span><br><span class="line">                                 <span class="string">'C'</span>: <span class="number">8</span>,</span><br><span class="line">                                 <span class="string">'G'</span>: <span class="number">0</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>
<p>heuristic是启发式的距离，在A*算法中会使用到这个属性，这里不做过多的描述。我们只需明白图的表示可以很灵活多样，但关键在于把需要的信息表达清楚即可，特别是顶点和边的信息。对于不同问题，我们可以使用不同的数据结构和算法对图进行表示。</p>
<h5 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h5><p>1.算法导论第三版</p>
<p>2.MIT Artificial Intelligence open course Assignment lab2 code </p>
]]></content>
  </entry>
  <entry>
    <title>Dropout</title>
    <url>/2020/03/02/Dropout/</url>
    <content><![CDATA[<p>In previous tasks, we only used <strong>L2</strong> regularization to prevent overfitting. It can be implemented by penalizing the squared magnitude of all parameters directly in the objective. And here we will learn another way of regularization: Dropout. It is a effective, simple regularization technique. The idea of Dropout is that we randomly choose the inputs while training, and then we create a thinner inputs for training. Note that for testing process we should not implement Dropout.  For more information, you can click the link and read the paper: <a href="http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf" target="_blank" rel="noopener">http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf</a></p>
<p>The implementation of Dropout in Python is quite straightforward. We can use <code>np.random.binomial()</code> method to create a binary matrix with the shape of inputs then the some elements of inputs can be randomly set to zero. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dropout_forward</span><span class="params">(x, dropout_param)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Performs the forward pass for (inverted) dropout.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Inputs:</span></span><br><span class="line"><span class="string">    - x: Input data, of any shape</span></span><br><span class="line"><span class="string">    - dropout_param: A dictionary with the following keys:</span></span><br><span class="line"><span class="string">      - p: Dropout parameter. We drop each neuron output with probability p.</span></span><br><span class="line"><span class="string">      - mode: 'test' or 'train'. If the mode is train, then perform dropout;</span></span><br><span class="line"><span class="string">        if the mode is test, then just return the input.</span></span><br><span class="line"><span class="string">      - seed: Seed for the random number generator. Passing seed makes this</span></span><br><span class="line"><span class="string">        function deterministic, which is needed for gradient checking but not</span></span><br><span class="line"><span class="string">        in real networks.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Outputs:</span></span><br><span class="line"><span class="string">    - out: Array of the same shape as x.</span></span><br><span class="line"><span class="string">    - cache: tuple (dropout_param, mask). In training mode, mask is the dropout</span></span><br><span class="line"><span class="string">      mask that was used to multiply the input; in test mode, mask is None.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    p, mode = dropout_param[<span class="string">'p'</span>], dropout_param[<span class="string">'mode'</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'seed'</span> <span class="keyword">in</span> dropout_param:</span><br><span class="line">        np.random.seed(dropout_param[<span class="string">'seed'</span>])</span><br><span class="line"></span><br><span class="line">    mask = <span class="literal">None</span></span><br><span class="line">    out = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">'train'</span>:</span><br><span class="line">        <span class="comment">#######################################################################</span></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> Implement training phase forward pass for inverted dropout.   #</span></span><br><span class="line">        <span class="comment"># Store the dropout mask in the mask variable.                        #</span></span><br><span class="line">        <span class="comment">#######################################################################</span></span><br><span class="line">        mask = np.random.binomial(<span class="number">1</span>, p, size=x.shape)</span><br><span class="line">        out = x * mask</span><br><span class="line">        <span class="comment">#######################################################################</span></span><br><span class="line">        <span class="comment">#                           END OF YOUR CODE                          #</span></span><br><span class="line">        <span class="comment">#######################################################################</span></span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="string">'test'</span>:</span><br><span class="line">        <span class="comment">#######################################################################</span></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> Implement the test phase forward pass for inverted dropout.   #</span></span><br><span class="line">        <span class="comment">#######################################################################</span></span><br><span class="line">        out = x </span><br><span class="line">        <span class="comment">#######################################################################</span></span><br><span class="line">        <span class="comment">#                            END OF YOUR CODE                         #</span></span><br><span class="line">        <span class="comment">#######################################################################</span></span><br><span class="line"></span><br><span class="line">    cache = (dropout_param, mask)</span><br><span class="line">    out = out.astype(x.dtype, copy=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out, cache</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dropout_backward</span><span class="params">(dout, cache)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Perform the backward pass for (inverted) dropout.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Inputs:</span></span><br><span class="line"><span class="string">    - dout: Upstream derivatives, of any shape</span></span><br><span class="line"><span class="string">    - cache: (dropout_param, mask) from dropout_forward.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    dropout_param, mask = cache</span><br><span class="line">    mode = dropout_param[<span class="string">'mode'</span>]</span><br><span class="line"></span><br><span class="line">    dx = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">'train'</span>:</span><br><span class="line">        <span class="comment">#######################################################################</span></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> Implement training phase backward pass for inverted dropout   #</span></span><br><span class="line">        <span class="comment">#######################################################################</span></span><br><span class="line">        dx = dout * mask</span><br><span class="line">        <span class="comment">#######################################################################</span></span><br><span class="line">        <span class="comment">#                          END OF YOUR CODE                           #</span></span><br><span class="line">        <span class="comment">#######################################################################</span></span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="string">'test'</span>:</span><br><span class="line">        dx = dout</span><br><span class="line">    <span class="keyword">return</span> dx</span><br></pre></td></tr></table></figure>
<p>Then you can see how Dropout influences the performance of training. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Train two identical nets, one with dropout and one without</span></span><br><span class="line">np.random.seed(<span class="number">231</span>)</span><br><span class="line">num_train = <span class="number">500</span></span><br><span class="line">small_data = &#123;</span><br><span class="line">  <span class="string">'X_train'</span>: data[<span class="string">'X_train'</span>][:num_train],</span><br><span class="line">  <span class="string">'y_train'</span>: data[<span class="string">'y_train'</span>][:num_train],</span><br><span class="line">  <span class="string">'X_val'</span>: data[<span class="string">'X_val'</span>],</span><br><span class="line">  <span class="string">'y_val'</span>: data[<span class="string">'y_val'</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">solvers = &#123;&#125;</span><br><span class="line">dropout_choices = [<span class="number">0</span>, <span class="number">0.75</span>]</span><br><span class="line"><span class="keyword">for</span> dropout <span class="keyword">in</span> dropout_choices:</span><br><span class="line">  model = FullyConnectedNet([<span class="number">500</span>], dropout=dropout)</span><br><span class="line">  print(dropout)</span><br><span class="line"></span><br><span class="line">  solver = Solver(model, small_data,</span><br><span class="line">                  num_epochs=<span class="number">25</span>, batch_size=<span class="number">100</span>,</span><br><span class="line">                  update_rule=<span class="string">'adam'</span>,</span><br><span class="line">                  optim_config=&#123;</span><br><span class="line">                    <span class="string">'learning_rate'</span>: <span class="number">5e-4</span>,</span><br><span class="line">                  &#125;,</span><br><span class="line">                  verbose=<span class="literal">True</span>, print_every=<span class="number">100</span>)</span><br><span class="line">  solver.train()</span><br><span class="line">  solvers[dropout] = solver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">train_accs = []</span><br><span class="line">val_accs = []</span><br><span class="line"><span class="keyword">for</span> dropout <span class="keyword">in</span> dropout_choices:</span><br><span class="line">  solver = solvers[dropout]</span><br><span class="line">  train_accs.append(solver.train_acc_history[<span class="number">-1</span>])</span><br><span class="line">  val_accs.append(solver.val_acc_history[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> dropout <span class="keyword">in</span> dropout_choices:</span><br><span class="line">  plt.plot(solvers[dropout].train_acc_history, <span class="string">'o'</span>, label=<span class="string">'%.2f dropout'</span> % dropout)</span><br><span class="line">plt.title(<span class="string">'Train accuracy'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Epoch'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Accuracy'</span>)</span><br><span class="line">plt.legend(ncol=<span class="number">2</span>, loc=<span class="string">'lower right'</span>)</span><br><span class="line">  </span><br><span class="line">plt.subplot(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> dropout <span class="keyword">in</span> dropout_choices:</span><br><span class="line">  plt.plot(solvers[dropout].val_acc_history, <span class="string">'o'</span>, label=<span class="string">'%.2f dropout'</span> % dropout)</span><br><span class="line">plt.title(<span class="string">'Val accuracy'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Epoch'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Accuracy'</span>)</span><br><span class="line">plt.legend(ncol=<span class="number">2</span>, loc=<span class="string">'lower right'</span>)</span><br><span class="line"></span><br><span class="line">plt.gcf().set_size_inches(<span class="number">15</span>, <span class="number">15</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/2020/03/02/Dropout/1583120497975.png" alt="1583120497975"></p>
<p>Obviously, both 0.75-Dropout and 0.00-Dropout do well in the training process with similar accuracy, while in testing process, 0.75-Dropout does better than 0.00-Dropout, which means it can effectively eliminate overfitting. </p>
]]></content>
  </entry>
  <entry>
    <title>BatchNormalization</title>
    <url>/2020/03/01/BatchNormalization/</url>
    <content><![CDATA[<h4 id="Weight-Initialization"><a href="#Weight-Initialization" class="headerlink" title="Weight Initialization"></a>Weight Initialization</h4><p>In last exercise, we learn how to write modular code for the Two-Layer neural network, which makes it easier to build a neural-network model. Today, we will dive deep into it and talk about Batch Normalization which is a method to deal with the problems associated with weights initialization. </p>
<p>Note that we do not know the final value of every weight , but it is more reasonable to assume that approximately half of the weights will be positive and half of them will be negative. Thus, a reasonable-sounding idea might be set all the weights to zero. This turns out to be a mistake because if every neuron in the network computes the same output, then the same gradients during back propagation will be obtained and parameters updates will be the same. </p>
<p>Therefore, we want the weights to be random but very close to zero. The implementation for one weight matrix might look like<code>W = 0.01*np.random.randn(D, H)</code>, then we can get a weight matrix with zero mean and unit standard deviation. </p>
<p>However, here comes the problem of weights initialization that with more layers, we have to be more careful to set the learning rate and the learning rate usually should be very small. This can waste a lot of time for training. We can see this problem when we used a five-layers network to train 50 images in last exercise. This is because the distribution of each layer’s input changes during training as the parameters of the previous layers every time we initialize change. We refer this phenomenon as <strong>internal covariate shift</strong> and we address this problem by normalizing layer inputs or we can call it Batch normalization. </p>
<h4 id="Batch-Normalization"><a href="#Batch-Normalization" class="headerlink" title="Batch Normalization"></a>Batch Normalization</h4><p>When we use Batch Normalization, we make it as a part of the model architecture and perform the normalization for each training mini-batch. Batch Normalization allows us to use larger learning rates and be less careful about initialization. The implementation of Batch Normalization is quite straightforward. You can click the link for more information about it :<a href="https://arxiv.org/abs/1502.03167" target="_blank" rel="noopener">https://arxiv.org/abs/1502.03167</a></p>
<p>The forward batch normalization algorithm is like that: </p>
<p><img src="/2020/03/01/BatchNormalization/1583061383633.png" alt="1583061383633"> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">batchnorm_forward</span><span class="params">(x, gamma, beta, bn_param)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Forward pass for batch normalization.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    During training the sample mean and (uncorrected) sample variance are</span></span><br><span class="line"><span class="string">    computed from minibatch statistics and used to normalize the incoming data.</span></span><br><span class="line"><span class="string">    During training we also keep an exponentially decaying running mean of the</span></span><br><span class="line"><span class="string">    mean and variance of each feature, and these averages are used to normalize</span></span><br><span class="line"><span class="string">    data at test-time.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    At each timestep we update the running averages for mean and variance using</span></span><br><span class="line"><span class="string">    an exponential decay based on the momentum parameter:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    running_mean = momentum * running_mean + (1 - momentum) * sample_mean</span></span><br><span class="line"><span class="string">    running_var = momentum * running_var + (1 - momentum) * sample_var</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Note that the batch normalization paper suggests a different test-time</span></span><br><span class="line"><span class="string">    behavior: they compute sample mean and variance for each feature using a</span></span><br><span class="line"><span class="string">    large number of training images rather than using a running average. For</span></span><br><span class="line"><span class="string">    this implementation we have chosen to use running averages instead since</span></span><br><span class="line"><span class="string">    they do not require an additional estimation step; the torch7</span></span><br><span class="line"><span class="string">    implementation of batch normalization also uses running averages.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Input:</span></span><br><span class="line"><span class="string">    - x: Data of shape (N, D)</span></span><br><span class="line"><span class="string">    - gamma: Scale parameter of shape (D,)</span></span><br><span class="line"><span class="string">    - beta: Shift paremeter of shape (D,)</span></span><br><span class="line"><span class="string">    - bn_param: Dictionary with the following keys:</span></span><br><span class="line"><span class="string">      - mode: 'train' or 'test'; required</span></span><br><span class="line"><span class="string">      - eps: Constant for numeric stability</span></span><br><span class="line"><span class="string">      - momentum: Constant for running mean / variance.</span></span><br><span class="line"><span class="string">      - running_mean: Array of shape (D,) giving running mean of features</span></span><br><span class="line"><span class="string">      - running_var Array of shape (D,) giving running variance of features</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns a tuple of:</span></span><br><span class="line"><span class="string">    - out: of shape (N, D)</span></span><br><span class="line"><span class="string">    - cache: A tuple of values needed in the backward pass</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    mode = bn_param[<span class="string">'mode'</span>]</span><br><span class="line">    eps = bn_param.get(<span class="string">'eps'</span>, <span class="number">1e-5</span>)</span><br><span class="line">    momentum = bn_param.get(<span class="string">'momentum'</span>, <span class="number">0.9</span>)</span><br><span class="line"></span><br><span class="line">    N, D = x.shape</span><br><span class="line">    running_mean = bn_param.get(<span class="string">'running_mean'</span>, np.zeros(D, dtype=x.dtype))</span><br><span class="line">    running_var = bn_param.get(<span class="string">'running_var'</span>, np.zeros(D, dtype=x.dtype))</span><br><span class="line"></span><br><span class="line">    out, cache = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">'train'</span>:</span><br><span class="line">        <span class="comment">#######################################################################</span></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> Implement the training-time forward pass for batch norm.      #</span></span><br><span class="line">        <span class="comment"># Use minibatch statistics to compute the mean and variance, use      #</span></span><br><span class="line">        <span class="comment"># these statistics to normalize the incoming data, and scale and      #</span></span><br><span class="line">        <span class="comment"># shift the normalized data using gamma and beta.                     #</span></span><br><span class="line">        <span class="comment">#                                                                     #</span></span><br><span class="line">        <span class="comment"># You should store the output in the variable out. Any intermediates  #</span></span><br><span class="line">        <span class="comment"># that you need for the backward pass should be stored in the cache   #</span></span><br><span class="line">        <span class="comment"># variable.                                                           #</span></span><br><span class="line">        <span class="comment">#                                                                     #</span></span><br><span class="line">        <span class="comment"># You should also use your computed sample mean and variance together #</span></span><br><span class="line">        <span class="comment"># with the momentum variable to update the running mean and running   #</span></span><br><span class="line">        <span class="comment"># variance, storing your result in the running_mean and running_var   #</span></span><br><span class="line">        <span class="comment"># variables.                                                          #</span></span><br><span class="line">        <span class="comment">#######################################################################</span></span><br><span class="line">        </span><br><span class="line">        x_mean = np.mean(x, axis=<span class="number">0</span>)</span><br><span class="line">        x_var = np.mean((x - x_mean)**<span class="number">2</span>, axis=<span class="number">0</span>)</span><br><span class="line">        x_hat = (x - x_mean) / np.sqrt(x_var + eps)</span><br><span class="line">        out = gamma*x_hat + beta</span><br><span class="line">        </span><br><span class="line">        running_mean = momentum * running_mean + (<span class="number">1</span> - momentum) * x_mean</span><br><span class="line">        running_var = momentum * running_var + (<span class="number">1</span> - momentum) * x_var</span><br><span class="line">        </span><br><span class="line">        cache =( x,x_hat, gamma,  x_mean, x_var, eps)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#######################################################################</span></span><br><span class="line">        <span class="comment">#                           END OF YOUR CODE                          #</span></span><br><span class="line">        <span class="comment">#######################################################################</span></span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="string">'test'</span>:</span><br><span class="line">        <span class="comment">#######################################################################</span></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> Implement the test-time forward pass for batch normalization. #</span></span><br><span class="line">        <span class="comment"># Use the running mean and variance to normalize the incoming data,   #</span></span><br><span class="line">        <span class="comment"># then scale and shift the normalized data using gamma and beta.      #</span></span><br><span class="line">        <span class="comment"># Store the result in the out variable.                               #</span></span><br><span class="line">        <span class="comment">#######################################################################</span></span><br><span class="line">        x_hat = (x - running_mean)/np.sqrt(running_var + eps)</span><br><span class="line">        out = gamma*x_hat + beta</span><br><span class="line">        cahe =( x, x_hat,gamma, running_mean, running_var, eps)</span><br><span class="line">        <span class="comment">#######################################################################</span></span><br><span class="line">        <span class="comment">#                          END OF YOUR CODE                           #</span></span><br><span class="line">        <span class="comment">#######################################################################</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'Invalid forward batchnorm mode "%s"'</span> % mode)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Store the updated running means back into bn_param</span></span><br><span class="line">    bn_param[<span class="string">'running_mean'</span>] = running_mean</span><br><span class="line">    bn_param[<span class="string">'running_var'</span>] = running_var</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out, cache</span><br></pre></td></tr></table></figure>
<p>For the backward algorithm, the paper has calculate the gradients for us and we can use these equations to write the code.</p>
<p><img src="/2020/03/01/BatchNormalization/1583062312769.png" alt="1583062312769"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">batchnorm_backward</span><span class="params">(dout, cache)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Backward pass for batch normalization.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    For this implementation, you should write out a computation graph for</span></span><br><span class="line"><span class="string">    batch normalization on paper and propagate gradients backward through</span></span><br><span class="line"><span class="string">    intermediate nodes.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Inputs:</span></span><br><span class="line"><span class="string">    - dout: Upstream derivatives, of shape (N, D)</span></span><br><span class="line"><span class="string">    - cache: Variable of intermediates from batchnorm_forward.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns a tuple of:</span></span><br><span class="line"><span class="string">    - dx: Gradient with respect to inputs x, of shape (N, D)</span></span><br><span class="line"><span class="string">    - dgamma: Gradient with respect to scale parameter gamma, of shape (D,)</span></span><br><span class="line"><span class="string">    - dbeta: Gradient with respect to shift parameter beta, of shape (D,)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    dx, dgamma, dbeta = <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> Implement the backward pass for batch normalization. Store the    #</span></span><br><span class="line">    <span class="comment"># results in the dx, dgamma, and dbeta variables.                         #</span></span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    x,x_hat,gamma,mean, var ,eps = cache </span><br><span class="line">    dx_hat =dout *gamma</span><br><span class="line">    dvar = np.sum(dx_hat * (x - mean)*(var + eps)**(<span class="number">-3</span>/<span class="number">2</span>)/(<span class="number">-2</span>), axis=<span class="number">0</span>)</span><br><span class="line">    dmean = np.sum(-dx_hat/np.sqrt(var+eps), axis=<span class="number">0</span>) + dvar*np.mean(<span class="number">-2</span>*(x-mean))</span><br><span class="line">    dx = dx_hat/np.sqrt(var+eps)+dvar*<span class="number">2</span>*(x-mean)/x.shape[<span class="number">0</span>]+dmean/x.shape[<span class="number">0</span>]</span><br><span class="line">    dgamma = np.sum(dout*x_hat, axis=<span class="number">0</span>)</span><br><span class="line">    dbeta = np.sum(dout, axis=<span class="number">0</span>)</span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    <span class="comment">#                             END OF YOUR CODE                            #</span></span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dx, dgamma, dbeta</span><br></pre></td></tr></table></figure>
<p>Then, we can add batch layer into the neural networks and we can see the improved performance after implementing Batch Normalization. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">231</span>)</span><br><span class="line"><span class="comment"># Try training a very deep net with batchnorm</span></span><br><span class="line">hidden_dims = [<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line">num_train = <span class="number">1000</span></span><br><span class="line">small_data = &#123;</span><br><span class="line">  <span class="string">'X_train'</span>: data[<span class="string">'X_train'</span>][:num_train],</span><br><span class="line">  <span class="string">'y_train'</span>: data[<span class="string">'y_train'</span>][:num_train],</span><br><span class="line">  <span class="string">'X_val'</span>: data[<span class="string">'X_val'</span>],</span><br><span class="line">  <span class="string">'y_val'</span>: data[<span class="string">'y_val'</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">weight_scale = <span class="number">2e-2</span></span><br><span class="line">bn_model = FullyConnectedNet(hidden_dims, weight_scale=weight_scale, use_batchnorm=<span class="literal">True</span>)</span><br><span class="line">model = FullyConnectedNet(hidden_dims, weight_scale=weight_scale, use_batchnorm=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">bn_solver = Solver(bn_model, small_data,</span><br><span class="line">                num_epochs=<span class="number">10</span>, batch_size=<span class="number">50</span>,</span><br><span class="line">                update_rule=<span class="string">'adam'</span>,</span><br><span class="line">                optim_config=&#123;</span><br><span class="line">                  <span class="string">'learning_rate'</span>: <span class="number">1e-3</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                verbose=<span class="literal">True</span>, print_every=<span class="number">200</span>)</span><br><span class="line">bn_solver.train()</span><br><span class="line"></span><br><span class="line">solver = Solver(model, small_data,</span><br><span class="line">                num_epochs=<span class="number">10</span>, batch_size=<span class="number">50</span>,</span><br><span class="line">                update_rule=<span class="string">'adam'</span>,</span><br><span class="line">                optim_config=&#123;</span><br><span class="line">                  <span class="string">'learning_rate'</span>: <span class="number">1e-3</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                verbose=<span class="literal">True</span>, print_every=<span class="number">200</span>)</span><br><span class="line">solver.train()</span><br></pre></td></tr></table></figure>
<p><img src="/2020/03/01/BatchNormalization/1583062559917.png" alt="1583062559917"></p>
<p><img src="/2020/03/01/BatchNormalization/1583062577631.png" alt="1583062577631"></p>
<p><img src="/2020/03/01/BatchNormalization/1583062593173.png" alt="1583062593173"></p>
<p><img src="/2020/03/01/BatchNormalization/1583062611523.png" alt="1583062611523"></p>
<p>With Batch Normalization, the model can train faster than baseline. Also we can see the initialization of weights in different situations can achieve better performance than the model without Batch Normalization.  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">231</span>)</span><br><span class="line"><span class="comment"># Try training a very deep net with batchnorm</span></span><br><span class="line">hidden_dims = [<span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>]</span><br><span class="line"></span><br><span class="line">num_train = <span class="number">1000</span></span><br><span class="line">small_data = &#123;</span><br><span class="line">  <span class="string">'X_train'</span>: data[<span class="string">'X_train'</span>][:num_train],</span><br><span class="line">  <span class="string">'y_train'</span>: data[<span class="string">'y_train'</span>][:num_train],</span><br><span class="line">  <span class="string">'X_val'</span>: data[<span class="string">'X_val'</span>],</span><br><span class="line">  <span class="string">'y_val'</span>: data[<span class="string">'y_val'</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bn_solvers = &#123;&#125;</span><br><span class="line">solvers = &#123;&#125;</span><br><span class="line">weight_scales = np.logspace(<span class="number">-4</span>, <span class="number">0</span>, num=<span class="number">20</span>)</span><br><span class="line"><span class="keyword">for</span> i, weight_scale <span class="keyword">in</span> enumerate(weight_scales):</span><br><span class="line">  print(<span class="string">'Running weight scale %d / %d'</span> % (i + <span class="number">1</span>, len(weight_scales)))</span><br><span class="line">  bn_model = FullyConnectedNet(hidden_dims, weight_scale=weight_scale, use_batchnorm=<span class="literal">True</span>)</span><br><span class="line">  model = FullyConnectedNet(hidden_dims, weight_scale=weight_scale, use_batchnorm=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">  bn_solver = Solver(bn_model, small_data,</span><br><span class="line">                  num_epochs=<span class="number">10</span>, batch_size=<span class="number">50</span>,</span><br><span class="line">                  update_rule=<span class="string">'adam'</span>,</span><br><span class="line">                  optim_config=&#123;</span><br><span class="line">                    <span class="string">'learning_rate'</span>: <span class="number">1e-3</span>,</span><br><span class="line">                  &#125;,</span><br><span class="line">                  verbose=<span class="literal">False</span>, print_every=<span class="number">200</span>)</span><br><span class="line">  bn_solver.train()</span><br><span class="line">  bn_solvers[weight_scale] = bn_solver</span><br><span class="line"></span><br><span class="line">  solver = Solver(model, small_data,</span><br><span class="line">                  num_epochs=<span class="number">10</span>, batch_size=<span class="number">50</span>,</span><br><span class="line">                  update_rule=<span class="string">'adam'</span>,</span><br><span class="line">                  optim_config=&#123;</span><br><span class="line">                    <span class="string">'learning_rate'</span>: <span class="number">1e-3</span>,</span><br><span class="line">                  &#125;,</span><br><span class="line">                  verbose=<span class="literal">False</span>, print_every=<span class="number">200</span>)</span><br><span class="line">  solver.train()</span><br><span class="line">  solvers[weight_scale] = solver</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot results of weight scale experiment</span></span><br><span class="line">best_train_accs, bn_best_train_accs = [], []</span><br><span class="line">best_val_accs, bn_best_val_accs = [], []</span><br><span class="line">final_train_loss, bn_final_train_loss = [], []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ws <span class="keyword">in</span> weight_scales:</span><br><span class="line">  best_train_accs.append(max(solvers[ws].train_acc_history))</span><br><span class="line">  bn_best_train_accs.append(max(bn_solvers[ws].train_acc_history))</span><br><span class="line">  </span><br><span class="line">  best_val_accs.append(max(solvers[ws].val_acc_history))</span><br><span class="line">  bn_best_val_accs.append(max(bn_solvers[ws].val_acc_history))</span><br><span class="line">  </span><br><span class="line">  final_train_loss.append(np.mean(solvers[ws].loss_history[<span class="number">-100</span>:]))</span><br><span class="line">  bn_final_train_loss.append(np.mean(bn_solvers[ws].loss_history[<span class="number">-100</span>:]))</span><br><span class="line">  </span><br><span class="line">plt.subplot(<span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">plt.title(<span class="string">'Best val accuracy vs weight initialization scale'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Weight initialization scale'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Best val accuracy'</span>)</span><br><span class="line">plt.semilogx(weight_scales, best_val_accs, <span class="string">'-o'</span>, label=<span class="string">'baseline'</span>)</span><br><span class="line">plt.semilogx(weight_scales, bn_best_val_accs, <span class="string">'-o'</span>, label=<span class="string">'batchnorm'</span>)</span><br><span class="line">plt.legend(ncol=<span class="number">2</span>, loc=<span class="string">'lower right'</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">plt.title(<span class="string">'Best train accuracy vs weight initialization scale'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Weight initialization scale'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Best training accuracy'</span>)</span><br><span class="line">plt.semilogx(weight_scales, best_train_accs, <span class="string">'-o'</span>, label=<span class="string">'baseline'</span>)</span><br><span class="line">plt.semilogx(weight_scales, bn_best_train_accs, <span class="string">'-o'</span>, label=<span class="string">'batchnorm'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">plt.title(<span class="string">'Final training loss vs weight initialization scale'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Weight initialization scale'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Final training loss'</span>)</span><br><span class="line">plt.semilogx(weight_scales, final_train_loss, <span class="string">'-o'</span>, label=<span class="string">'baseline'</span>)</span><br><span class="line">plt.semilogx(weight_scales, bn_final_train_loss, <span class="string">'-o'</span>, label=<span class="string">'batchnorm'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.gca().set_ylim(<span class="number">1.0</span>, <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line">plt.gcf().set_size_inches(<span class="number">10</span>, <span class="number">15</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/2020/03/01/BatchNormalization/1583063126691.png" alt="1583063126691"></p>
<p><img src="/2020/03/01/BatchNormalization/1583063140003.png" alt="1583063140003"></p>
]]></content>
  </entry>
  <entry>
    <title>Update rules</title>
    <url>/2020/02/24/Update-rules/</url>
    <content><![CDATA[<p>In previous exercises, we have used vanilla SGD as our update rule. More sophisticated update rules can make it easier to train deep networks. We will implement a few of the most commonly used update rules and compare them to vanilla SGD.</p>
<h4 id="SGD-Momentum"><a href="#SGD-Momentum" class="headerlink" title="SGD+Momentum"></a>SGD+Momentum</h4><p>In SGD, the update rule is :$W = W-\alpha dW​$ where $\alpha​$ is the learning rate and also the key to determining the convergence of the loss function and the training speed. If $\alpha​$ is small, we need more steps to get the minimum loss while if it is too large, the model will not converge. That is the reason why we should be very careful to set the learning rate when we use SGD and sometimes it is quite hard to find the appropriate learning rate. Fortunately, we have a method that can solve the disadvantages of SGD. </p>
<p>Stochastic gradient descent with momentum is a widely used update rule that tends to make deep networks converge faster than vanilla SGD.  The update rule of this method is :</p>
<script type="math/tex; mode=display">
V_t=\gamma V_{t-1} - \alpha dW_{t-1}</script><script type="math/tex; mode=display">
W_t=W_{t-1}+V_t</script><p>where the momentum term $\gamma$ is usually set to 0.9 or a similar value. </p>
<p>The momentum part here is essential to make the learning process converge faster because it increases for dimensions whose gradients point in the same directions and reduces updates for dimensions whose gradients change directions. </p>
<p>In python, we have below code:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sgd_momentum</span><span class="params">(w, dw, config=None)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Performs stochastic gradient descent with momentum.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    config format:</span></span><br><span class="line"><span class="string">    - learning_rate: Scalar learning rate.</span></span><br><span class="line"><span class="string">    - momentum: Scalar between 0 and 1 giving the momentum value.</span></span><br><span class="line"><span class="string">      Setting momentum = 0 reduces to sgd.</span></span><br><span class="line"><span class="string">    - velocity: A numpy array of the same shape as w and dw used to store a</span></span><br><span class="line"><span class="string">      moving average of the gradients.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> config <span class="keyword">is</span> <span class="literal">None</span>: config = &#123;&#125;</span><br><span class="line">    config.setdefault(<span class="string">'learning_rate'</span>, <span class="number">1e-2</span>)</span><br><span class="line">    config.setdefault(<span class="string">'momentum'</span>, <span class="number">0.9</span>)</span><br><span class="line">    v = config.get(<span class="string">'velocity'</span>, np.zeros_like(w))</span><br><span class="line"></span><br><span class="line">    next_w = <span class="literal">None</span></span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> Implement the momentum update formula. Store the updated value in #</span></span><br><span class="line">    <span class="comment"># the next_w variable. You should also use and update the velocity v.     #</span></span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    v = config[<span class="string">'momentum'</span>] * v - config[<span class="string">'learning_rate'</span>]*dw</span><br><span class="line">    next_w = w + v</span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    <span class="comment">#                             END OF YOUR CODE                            #</span></span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    config[<span class="string">'velocity'</span>] = v</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> next_w, config</span><br></pre></td></tr></table></figure>
<p>Then we can see its performance compared to SGD.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num_train = <span class="number">4000</span></span><br><span class="line">small_data = &#123;</span><br><span class="line">  <span class="string">'X_train'</span>: data[<span class="string">'X_train'</span>][:num_train],</span><br><span class="line">  <span class="string">'y_train'</span>: data[<span class="string">'y_train'</span>][:num_train],</span><br><span class="line">  <span class="string">'X_val'</span>: data[<span class="string">'X_val'</span>],</span><br><span class="line">  <span class="string">'y_val'</span>: data[<span class="string">'y_val'</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">solvers = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> update_rule <span class="keyword">in</span> [<span class="string">'sgd'</span>, <span class="string">'sgd_momentum'</span>]:</span><br><span class="line">  print(<span class="string">'running with '</span>, update_rule)</span><br><span class="line">  model = FullyConnectedNet([<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>], weight_scale=<span class="number">5e-2</span>)</span><br><span class="line"></span><br><span class="line">  solver = Solver(model, small_data,</span><br><span class="line">                  num_epochs=<span class="number">5</span>, batch_size=<span class="number">100</span>,</span><br><span class="line">                  update_rule=update_rule,</span><br><span class="line">                  optim_config=&#123;</span><br><span class="line">                    <span class="string">'learning_rate'</span>: <span class="number">1e-2</span>,</span><br><span class="line">                  &#125;,</span><br><span class="line">                  verbose=<span class="literal">True</span>)</span><br><span class="line">  solvers[update_rule] = solver</span><br><span class="line">  solver.train()</span><br><span class="line">  print()</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">plt.title(<span class="string">'Training loss'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Iteration'</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">plt.title(<span class="string">'Training accuracy'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Epoch'</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">plt.title(<span class="string">'Validation accuracy'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Epoch'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> update_rule, solver <span class="keyword">in</span> list(solvers.items()):</span><br><span class="line">  plt.subplot(<span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">  plt.plot(solver.loss_history, <span class="string">'o'</span>, label=update_rule)</span><br><span class="line">  </span><br><span class="line">  plt.subplot(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">  plt.plot(solver.train_acc_history, <span class="string">'-o'</span>, label=update_rule)</span><br><span class="line"></span><br><span class="line">  plt.subplot(<span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">  plt.plot(solver.val_acc_history, <span class="string">'-o'</span>, label=update_rule)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]:</span><br><span class="line">  plt.subplot(<span class="number">3</span>, <span class="number">1</span>, i)</span><br><span class="line">  plt.legend(loc=<span class="string">'upper center'</span>, ncol=<span class="number">4</span>)</span><br><span class="line">plt.gcf().set_size_inches(<span class="number">15</span>, <span class="number">15</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/24/Update-rules/1582538833839.png" alt="1582538833839"></p>
<p><img src="/2020/02/24/Update-rules/1582538861111.png" alt="1582538861111"></p>
<p>Apparently, SGD+Momentum converges faster than SGD because with the same epoch, the former can achieve higher accuracy and have less loss. </p>
<h4 id="RMSprop"><a href="#RMSprop" class="headerlink" title="RMSprop"></a>RMSprop</h4><p>RMSprop is a method that can change the learning rate automatically and make it fit the model well. </p>
<script type="math/tex; mode=display">
\hat W_t = \chi \hat W_{t-1} + (1-\chi)dW_{t-1}^2</script><script type="math/tex; mode=display">
W_t = W_{t-1} - \frac{\alpha}{\sqrt{ \hat W_t + \epsilon }}dW_{t-1}</script><p>where $\chi$ is the decay rate and usually set to 0.9; learning rate $\alpha$ is usually 0.01 . In python, we have:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rmsprop</span><span class="params">(x, dx, config=None)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Uses the RMSProp update rule, which uses a moving average of squared</span></span><br><span class="line"><span class="string">    gradient values to set adaptive per-parameter learning rates.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    config format:</span></span><br><span class="line"><span class="string">    - learning_rate: Scalar learning rate.</span></span><br><span class="line"><span class="string">    - decay_rate: Scalar between 0 and 1 giving the decay rate for the squared</span></span><br><span class="line"><span class="string">      gradient cache.</span></span><br><span class="line"><span class="string">    - epsilon: Small scalar used for smoothing to avoid dividing by zero.</span></span><br><span class="line"><span class="string">    - cache: Moving average of second moments of gradients.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> config <span class="keyword">is</span> <span class="literal">None</span>: config = &#123;&#125;</span><br><span class="line">    config.setdefault(<span class="string">'learning_rate'</span>, <span class="number">1e-2</span>)</span><br><span class="line">    config.setdefault(<span class="string">'decay_rate'</span>, <span class="number">0.99</span>)</span><br><span class="line">    config.setdefault(<span class="string">'epsilon'</span>, <span class="number">1e-8</span>)</span><br><span class="line">    config.setdefault(<span class="string">'cache'</span>, np.zeros_like(x))</span><br><span class="line"></span><br><span class="line">    next_x = <span class="literal">None</span></span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> Implement the RMSprop update formula, storing the next value of x #</span></span><br><span class="line">    <span class="comment"># in the next_x variable. Don't forget to update cache value stored in    #</span></span><br><span class="line">    <span class="comment"># config['cache'].                                                        #</span></span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    config[<span class="string">'cache'</span>] = config[<span class="string">'decay_rate'</span>]*config[<span class="string">'cache'</span>]+(<span class="number">1</span>-config[<span class="string">'decay_rate'</span>])*np.square(dx)</span><br><span class="line">    next_x = x -  config[<span class="string">'learning_rate'</span>]*dx / (np.sqrt(config[<span class="string">'cache'</span>])+config[<span class="string">'epsilon'</span>])</span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    <span class="comment">#                             END OF YOUR CODE                            #</span></span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> next_x, config</span><br></pre></td></tr></table></figure>
<h4 id="Adam"><a href="#Adam" class="headerlink" title="Adam"></a>Adam</h4><p>Adaptive Moment Estimation  is another way that computes adaptive learning rate for each parameter. The algorithm is quite like combining Momentum and RMSprop. </p>
<script type="math/tex; mode=display">
m_t = \beta_1 m_{t-1} + (1-\beta_1) dW_{t-1}</script><script type="math/tex; mode=display">
v_t = \beta_2 v_{t-1} + (1-\beta_2) dW_{t-1}^2</script><script type="math/tex; mode=display">
\hat m_t = \frac{m_t}{1-\beta_1^t}</script><script type="math/tex; mode=display">
\hat v_t = \frac{v_t}{1-\beta_2^t}</script><script type="math/tex; mode=display">
W_t = W_{t-1} - \frac{\alpha \hat m_t}{\sqrt{\hat v_t +\epsilon}}</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adam</span><span class="params">(x, dx, config=None)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Uses the Adam update rule, which incorporates moving averages of both the</span></span><br><span class="line"><span class="string">    gradient and its square and a bias correction term.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    config format:</span></span><br><span class="line"><span class="string">    - learning_rate: Scalar learning rate.</span></span><br><span class="line"><span class="string">    - beta1: Decay rate for moving average of first moment of gradient.</span></span><br><span class="line"><span class="string">    - beta2: Decay rate for moving average of second moment of gradient.</span></span><br><span class="line"><span class="string">    - epsilon: Small scalar used for smoothing to avoid dividing by zero.</span></span><br><span class="line"><span class="string">    - m: Moving average of gradient.</span></span><br><span class="line"><span class="string">    - v: Moving average of squared gradient.</span></span><br><span class="line"><span class="string">    - t: Iteration number.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> config <span class="keyword">is</span> <span class="literal">None</span>: config = &#123;&#125;</span><br><span class="line">    config.setdefault(<span class="string">'learning_rate'</span>, <span class="number">1e-3</span>)</span><br><span class="line">    config.setdefault(<span class="string">'beta1'</span>, <span class="number">0.9</span>)</span><br><span class="line">    config.setdefault(<span class="string">'beta2'</span>, <span class="number">0.999</span>)</span><br><span class="line">    config.setdefault(<span class="string">'epsilon'</span>, <span class="number">1e-8</span>)</span><br><span class="line">    config.setdefault(<span class="string">'m'</span>, np.zeros_like(x))</span><br><span class="line">    config.setdefault(<span class="string">'v'</span>, np.zeros_like(x))</span><br><span class="line">    config.setdefault(<span class="string">'t'</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    next_x = <span class="literal">None</span></span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> Implement the Adam update formula, storing the next value of x in #</span></span><br><span class="line">    <span class="comment"># the next_x variable. Don't forget to update the m, v, and t variables   #</span></span><br><span class="line">    <span class="comment"># stored in config.                                                       #</span></span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    config[<span class="string">'t'</span>] +=<span class="number">1</span></span><br><span class="line">    config[<span class="string">'m'</span>] = config[<span class="string">'beta1'</span>]*config[<span class="string">'m'</span>] + (<span class="number">1</span>-config[<span class="string">'beta1'</span>])*dx</span><br><span class="line">    config[<span class="string">'v'</span>] = config[<span class="string">'beta2'</span>]*config[<span class="string">'v'</span>] + (<span class="number">1</span>-config[<span class="string">'beta2'</span>])*np.square(dx)</span><br><span class="line">        </span><br><span class="line">    m_temp = config[<span class="string">'m'</span>]/(<span class="number">1</span>- np.power(config[<span class="string">'beta1'</span>], config[<span class="string">'t'</span>]))</span><br><span class="line">    v_temp = config[<span class="string">'v'</span>]/(<span class="number">1</span>- np.power(config[<span class="string">'beta2'</span>] ,config[<span class="string">'t'</span>]))</span><br><span class="line">    </span><br><span class="line">    next_x = x-config[<span class="string">'learning_rate'</span>] * m_temp / (np.sqrt(v_temp)+config[<span class="string">'epsilon'</span>])</span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    <span class="comment">#                             END OF YOUR CODE                            #</span></span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> next_x, config</span><br></pre></td></tr></table></figure>
<h4 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison"></a>Comparison</h4><p>Finally, we can compare these rules by seeing how they perform on the data. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">learning_rates = &#123;<span class="string">'rmsprop'</span>: <span class="number">1e-4</span>, <span class="string">'adam'</span>: <span class="number">1e-3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> update_rule <span class="keyword">in</span> [<span class="string">'adam'</span>, <span class="string">'rmsprop'</span>]:</span><br><span class="line">  print(<span class="string">'running with '</span>, update_rule)</span><br><span class="line">  model = FullyConnectedNet([<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>], weight_scale=<span class="number">5e-2</span>)</span><br><span class="line"></span><br><span class="line">  solver = Solver(model, small_data,</span><br><span class="line">                  num_epochs=<span class="number">5</span>, batch_size=<span class="number">100</span>,</span><br><span class="line">                  update_rule=update_rule,</span><br><span class="line">                  optim_config=&#123;</span><br><span class="line">                    <span class="string">'learning_rate'</span>: learning_rates[update_rule]</span><br><span class="line">                  &#125;,</span><br><span class="line">                  verbose=<span class="literal">True</span>)</span><br><span class="line">  solvers[update_rule] = solver</span><br><span class="line">  solver.train()</span><br><span class="line">  print()</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">plt.title(<span class="string">'Training loss'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Iteration'</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">plt.title(<span class="string">'Training accuracy'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Epoch'</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">plt.title(<span class="string">'Validation accuracy'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Epoch'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> update_rule, solver <span class="keyword">in</span> list(solvers.items()):</span><br><span class="line">  plt.subplot(<span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">  plt.plot(solver.loss_history, <span class="string">'o'</span>, label=update_rule)</span><br><span class="line">  </span><br><span class="line">  plt.subplot(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">  plt.plot(solver.train_acc_history, <span class="string">'-o'</span>, label=update_rule)</span><br><span class="line"></span><br><span class="line">  plt.subplot(<span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">  plt.plot(solver.val_acc_history, <span class="string">'-o'</span>, label=update_rule)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]:</span><br><span class="line">  plt.subplot(<span class="number">3</span>, <span class="number">1</span>, i)</span><br><span class="line">  plt.legend(loc=<span class="string">'upper center'</span>, ncol=<span class="number">4</span>)</span><br><span class="line">plt.gcf().set_size_inches(<span class="number">15</span>, <span class="number">15</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/24/Update-rules/1582546014282.png" alt="1582546014282"></p>
<p><img src="/2020/02/24/Update-rules/1582546042532.png" alt="1582546042532"></p>
<p><img src="/2020/02/24/Update-rules/1582546061048.png" alt="1582546061048"></p>
<p>Obviously, Adam performs well on the data for achieving the highest accuracy within the same epoch. When epoch is small, RMSprop performs better than SGD+Momentum, but when epoch is getting large, the gap between them is narrowing. SGD at the end is the last one we should consider to use.</p>
]]></content>
  </entry>
  <entry>
    <title>Two-Layer Network</title>
    <url>/2020/02/24/Two-Layer-Network/</url>
    <content><![CDATA[<p>In assignment1, we have implemented a simple example of neural networks(Two-Layer Network), but the problem is that the implementation is not very modular since the loss and gradient are computed in a single monolithic function. That means if we want to create a complex network, we may find it difficult to implement. So the first part of the assignment2 question1 is to make the implementation more modular based on Two-Layer Network.</p>
<p>For each layer we will implement a <code>forward</code> and a <code>backward</code> function. The <code>forward</code> function will receive inputs, weights, and other parameters and will return both an output and a <code>cache</code> object storing data needed for the backward pass, like this:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">layer_forward</span><span class="params">(x, w)</span>:</span></span><br><span class="line">  <span class="string">""" Receive inputs x and weights w """</span></span><br><span class="line">  <span class="comment"># Do some computations ...</span></span><br><span class="line">  z = <span class="comment"># ... some intermediate value</span></span><br><span class="line">  <span class="comment"># Do some more computations ...</span></span><br><span class="line">  out = <span class="comment"># the output</span></span><br><span class="line"></span><br><span class="line">  cache = (x, w, z, out) <span class="comment"># Values we need to compute gradients</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> out, cache</span><br></pre></td></tr></table></figure>
<p>The backward pass will receive upstream derivatives and the <code>cache</code> object, and will return gradients with respect to the inputs and weights, like this:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">layer_backward</span><span class="params">(dout, cache)</span>:</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  Receive derivative of loss with respect to outputs and cache,</span></span><br><span class="line"><span class="string">  and compute derivative with respect to inputs.</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  <span class="comment"># Unpack cache values</span></span><br><span class="line">  x, w, z, out = cache</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Use values in cache to compute derivatives</span></span><br><span class="line">  dx = <span class="comment"># Derivative of loss with respect to x</span></span><br><span class="line">  dw = <span class="comment"># Derivative of loss with respect to w</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dx, dw</span><br></pre></td></tr></table></figure>
<p>The implementation will be based on the structure of  Networks. In this case, we have <code>affine----&gt;relu----&gt;affine</code> network, so it is wise to create methods for each layers and activation function. </p>
<p>Open layers.py file and implement the methods below:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">affine_forward</span><span class="params">(x, w, b)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Computes the forward pass for an affine (fully-connected) layer.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The input x has shape (N, d_1, ..., d_k) and contains a minibatch of N</span></span><br><span class="line"><span class="string">    examples, where each example x[i] has shape (d_1, ..., d_k). We will</span></span><br><span class="line"><span class="string">    reshape each input into a vector of dimension D = d_1 * ... * d_k, and</span></span><br><span class="line"><span class="string">    then transform it to an output vector of dimension M.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Inputs:</span></span><br><span class="line"><span class="string">    - x: A numpy array containing input data, of shape (N, d_1, ..., d_k)</span></span><br><span class="line"><span class="string">    - w: A numpy array of weights, of shape (D, M)</span></span><br><span class="line"><span class="string">    - b: A numpy array of biases, of shape (M,)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns a tuple of:</span></span><br><span class="line"><span class="string">    - out: output, of shape (N, M)</span></span><br><span class="line"><span class="string">    - cache: (x, w, b)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    out = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> Implement the affine forward pass. Store the result in out. You   #</span></span><br><span class="line">    <span class="comment"># will need to reshape the input into rows.                               #</span></span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    out = np.reshape(x,(x.shape[<span class="number">0</span>], <span class="number">-1</span>)).dot(w)+b</span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    <span class="comment">#                             END OF YOUR CODE                            #</span></span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    cache = (x, w, b)</span><br><span class="line">    <span class="keyword">return</span> out, cache</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">affine_backward</span><span class="params">(dout, cache)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Computes the backward pass for an affine layer.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Inputs:</span></span><br><span class="line"><span class="string">    - dout: Upstream derivative, of shape (N, M)</span></span><br><span class="line"><span class="string">    - cache: Tuple of:</span></span><br><span class="line"><span class="string">      - x: Input data, of shape (N, d_1, ... d_k)</span></span><br><span class="line"><span class="string">      - w: Weights, of shape (D, M)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns a tuple of:</span></span><br><span class="line"><span class="string">    - dx: Gradient with respect to x, of shape (N, d1, ..., d_k)</span></span><br><span class="line"><span class="string">    - dw: Gradient with respect to w, of shape (D, M)</span></span><br><span class="line"><span class="string">    - db: Gradient with respect to b, of shape (M,)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    x, w, b = cache</span><br><span class="line">    dx, dw, db = <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> Implement the affine backward pass.                               #</span></span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    dx = np.reshape(dout.dot(w.T),x.shape)</span><br><span class="line">    dw = np.reshape(x,(x.shape[<span class="number">0</span>], <span class="number">-1</span>)).T.dot(dout)</span><br><span class="line">    db = np.sum(dout, axis=<span class="number">0</span>)</span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    <span class="comment">#                             END OF YOUR CODE                            #</span></span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    <span class="keyword">return</span> dx, dw, db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">relu_forward</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Computes the forward pass for a layer of rectified linear units (ReLUs).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Input:</span></span><br><span class="line"><span class="string">    - x: Inputs, of any shape</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns a tuple of:</span></span><br><span class="line"><span class="string">    - out: Output, of the same shape as x</span></span><br><span class="line"><span class="string">    - cache: x</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    out = <span class="literal">None</span></span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> Implement the ReLU forward pass.                                  #</span></span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    out = np.maximum(<span class="number">0</span>, x)</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    <span class="comment">#                             END OF YOUR CODE                            #         ###########################################################################</span></span><br><span class="line">    cache = x</span><br><span class="line">    <span class="keyword">return</span> out, cache</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">relu_backward</span><span class="params">(dout, cache)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Computes the backward pass for a layer of rectified linear units (ReLUs).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Input:</span></span><br><span class="line"><span class="string">    - dout: Upstream derivatives, of any shape</span></span><br><span class="line"><span class="string">    - cache: Input x, of same shape as dout</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    - dx: Gradient with respect to x</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    dx, x = <span class="literal">None</span>, cache</span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> Implement the ReLU backward pass.                                 #</span></span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    dout[x&lt;=<span class="number">0</span>]=<span class="number">0</span></span><br><span class="line">    dx = dout </span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    <span class="comment">#                             END OF YOUR CODE                            #</span></span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    <span class="keyword">return</span> dx</span><br></pre></td></tr></table></figure>
<p>Note that we have<code>affine---&gt;relu</code> module, we can combine affine and relu module together to create <code>affine_relu_forward/backward</code>, which will make the implementation easier. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">affine_relu_forward</span><span class="params">(x, w, b)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Convenience layer that perorms an affine transform followed by a ReLU</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Inputs:</span></span><br><span class="line"><span class="string">    - x: Input to the affine layer</span></span><br><span class="line"><span class="string">    - w, b: Weights for the affine layer</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns a tuple of:</span></span><br><span class="line"><span class="string">    - out: Output from the ReLU</span></span><br><span class="line"><span class="string">    - cache: Object to give to the backward pass</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    a, fc_cache = affine_forward(x, w, b)</span><br><span class="line">    out, relu_cache = relu_forward(a)</span><br><span class="line">    cache = (fc_cache, relu_cache)</span><br><span class="line">    <span class="keyword">return</span> out, cache</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">affine_relu_backward</span><span class="params">(dout, cache)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Backward pass for the affine-relu convenience layer</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    fc_cache, relu_cache = cache</span><br><span class="line">    da = relu_backward(dout, relu_cache)</span><br><span class="line">    dx, dw, db = affine_backward(da, fc_cache)</span><br><span class="line">    <span class="keyword">return</span> dx, dw, db</span><br></pre></td></tr></table></figure>
<p>Then we can test all the methods we have created in FullyConnectedNets.ipynb according to the error. </p>
<p><img src="/2020/02/24/Two-Layer-Network/1582513523961.png" alt="1582513523961"></p>
<p><img src="/2020/02/24/Two-Layer-Network/1582513543672.png" alt="1582513543672"></p>
<p><img src="/2020/02/24/Two-Layer-Network/1582513558613.png" alt="1582513558613"></p>
<p><img src="/2020/02/24/Two-Layer-Network/1582513570779.png" alt="1582513570779"></p>
<p><img src="/2020/02/24/Two-Layer-Network/1582513594658.png" alt="1582513594658"></p>
<p>All the methods have achieve the requirements so that we can use these functions to make our implementation easy to read and modify. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> builtins <span class="keyword">import</span> range</span><br><span class="line"><span class="keyword">from</span> builtins <span class="keyword">import</span> object</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> cs231n.layers <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> cs231n.layer_utils <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoLayerNet</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A two-layer fully-connected neural network with ReLU nonlinearity and</span></span><br><span class="line"><span class="string">    softmax loss that uses a modular layer design. We assume an input dimension</span></span><br><span class="line"><span class="string">    of D, a hidden dimension of H, and perform classification over C classes.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The architecure should be affine - relu - affine - softmax.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Note that this class does not implement gradient descent; instead, it</span></span><br><span class="line"><span class="string">    will interact with a separate Solver object that is responsible for running</span></span><br><span class="line"><span class="string">    optimization.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The learnable parameters of the model are stored in the dictionary</span></span><br><span class="line"><span class="string">    self.params that maps parameter names to numpy arrays.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, input_dim=<span class="number">3</span>*<span class="number">32</span>*<span class="number">32</span>, hidden_dim=<span class="number">100</span>, num_classes=<span class="number">10</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 weight_scale=<span class="number">1e-3</span>, reg=<span class="number">0.0</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize a new network.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Inputs:</span></span><br><span class="line"><span class="string">        - input_dim: An integer giving the size of the input</span></span><br><span class="line"><span class="string">        - hidden_dim: An integer giving the size of the hidden layer</span></span><br><span class="line"><span class="string">        - num_classes: An integer giving the number of classes to classify</span></span><br><span class="line"><span class="string">        - dropout: Scalar between 0 and 1 giving dropout strength.</span></span><br><span class="line"><span class="string">        - weight_scale: Scalar giving the standard deviation for random</span></span><br><span class="line"><span class="string">          initialization of the weights.</span></span><br><span class="line"><span class="string">        - reg: Scalar giving L2 regularization strength.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.params = &#123;&#125;</span><br><span class="line">        self.reg = reg</span><br><span class="line"></span><br><span class="line">        <span class="comment">############################################################################</span></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> Initialize the weights and biases of the two-layer net. Weights    #</span></span><br><span class="line">        <span class="comment"># should be initialized from a Gaussian with standard deviation equal to   #</span></span><br><span class="line">        <span class="comment"># weight_scale, and biases should be initialized to zero. All weights and  #</span></span><br><span class="line">        <span class="comment"># biases should be stored in the dictionary self.params, with first layer  #</span></span><br><span class="line">        <span class="comment"># weights and biases using the keys 'W1' and 'b1' and second layer weights #</span></span><br><span class="line">        <span class="comment"># and biases using the keys 'W2' and 'b2'.                                 #</span></span><br><span class="line">        <span class="comment">############################################################################</span></span><br><span class="line">        self.params[<span class="string">'W1'</span>] = weight_scale*np.random.randn(input_dim, hidden_dim)</span><br><span class="line">        self.params[<span class="string">'b1'</span>] = np.zeros(hidden_dim)</span><br><span class="line">        self.params[<span class="string">'W2'</span>] = weight_scale*np.random.randn(hidden_dim, num_classes)</span><br><span class="line">        self.params[<span class="string">'b2'</span>] = np.zeros(num_classes)</span><br><span class="line">        <span class="comment">############################################################################</span></span><br><span class="line">        <span class="comment">#                             END OF YOUR CODE                             #</span></span><br><span class="line">        <span class="comment">############################################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loss</span><span class="params">(self, X, y=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Compute loss and gradient for a minibatch of data.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Inputs:</span></span><br><span class="line"><span class="string">        - X: Array of input data of shape (N, d_1, ..., d_k)</span></span><br><span class="line"><span class="string">        - y: Array of labels, of shape (N,). y[i] gives the label for X[i].</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">        If y is None, then run a test-time forward pass of the model and return:</span></span><br><span class="line"><span class="string">        - scores: Array of shape (N, C) giving classification scores, where</span></span><br><span class="line"><span class="string">          scores[i, c] is the classification score for X[i] and class c.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        If y is not None, then run a training-time forward and backward pass and</span></span><br><span class="line"><span class="string">        return a tuple of:</span></span><br><span class="line"><span class="string">        - loss: Scalar value giving the loss</span></span><br><span class="line"><span class="string">        - grads: Dictionary with the same keys as self.params, mapping parameter</span></span><br><span class="line"><span class="string">          names to gradients of the loss with respect to those parameters.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        scores = <span class="literal">None</span></span><br><span class="line">        <span class="comment">############################################################################</span></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> Implement the forward pass for the two-layer net, computing the    #</span></span><br><span class="line">        <span class="comment"># class scores for X and storing them in the scores variable.              #</span></span><br><span class="line">        <span class="comment">############################################################################</span></span><br><span class="line">        W1, b1 = self.params[<span class="string">'W1'</span>], self.params[<span class="string">'b1'</span>]</span><br><span class="line">        W2, b2 = self.params[<span class="string">'W2'</span>], self.params[<span class="string">'b2'</span>]</span><br><span class="line">        N, D = np.reshape(X,(X.shape[<span class="number">0</span>],<span class="number">-1</span>)).shape</span><br><span class="line">        scores,cache1 = affine_relu_forward(X, W1, b1)</span><br><span class="line">        scores,cache2 = affine_forward(scores, W2, b2)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">############################################################################</span></span><br><span class="line">        <span class="comment">#                             END OF YOUR CODE                             #</span></span><br><span class="line">        <span class="comment">############################################################################</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># If y is None then we are in test mode so just return scores</span></span><br><span class="line">        <span class="keyword">if</span> y <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> scores</span><br><span class="line"></span><br><span class="line">        loss, grads = <span class="number">0</span>, &#123;&#125;</span><br><span class="line">        <span class="comment">############################################################################</span></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> Implement the backward pass for the two-layer net. Store the loss  #</span></span><br><span class="line">        <span class="comment"># in the loss variable and gradients in the grads dictionary. Compute data #</span></span><br><span class="line">        <span class="comment"># loss using softmax, and make sure that grads[k] holds the gradients for  #</span></span><br><span class="line">        <span class="comment"># self.params[k]. Don't forget to add L2 regularization!                   #</span></span><br><span class="line">        <span class="comment">#                                                                          #</span></span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> To ensure that your implementation matches ours and you pass the   #</span></span><br><span class="line">        <span class="comment"># automated tests, make sure that your L2 regularization includes a factor #</span></span><br><span class="line">        <span class="comment"># of 0.5 to simplify the expression for the gradient.                      #</span></span><br><span class="line">        <span class="comment">############################################################################</span></span><br><span class="line">        scores -= np.max(scores, axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>)</span><br><span class="line">        pro_scores = np.exp(scores)/ np.sum(np.exp(scores), axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>)</span><br><span class="line">        loss = -np.sum(np.log(pro_scores[np.arange(N),y]))</span><br><span class="line">        </span><br><span class="line">        loss /= N</span><br><span class="line">        loss += <span class="number">0.5</span>*self.reg*np.sum(W1*W1)+ <span class="number">0.5</span>*self.reg*np.sum(W2*W2)</span><br><span class="line">        </span><br><span class="line">        pro_scores[np.arange(N), y] -= <span class="number">1</span></span><br><span class="line">        pro_scores /= N</span><br><span class="line">        </span><br><span class="line">        dhidden, dW2, db2 = affine_backward(pro_scores, cache2)</span><br><span class="line">        _, dW1, db1 = affine_relu_backward(dhidden, cache1)</span><br><span class="line">        </span><br><span class="line">        dW1 += self.reg*W1</span><br><span class="line">        dW2 += self.reg*W2</span><br><span class="line">        </span><br><span class="line">        grads = &#123;<span class="string">'W1'</span>:dW1, <span class="string">'b1'</span>:db1, <span class="string">'W2'</span>:dW2, <span class="string">'b2'</span>:db2&#125;</span><br><span class="line">        <span class="comment">############################################################################</span></span><br><span class="line">        <span class="comment">#                             END OF YOUR CODE                             #</span></span><br><span class="line">        <span class="comment">############################################################################</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> loss, grads</span><br></pre></td></tr></table></figure>
<p>We just use two lines to obtain the scores and the loss, which has greatly simplified the programming.  To see whether we implement the methods correctly we can use the code below to test the error of each parameter. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">231</span>)</span><br><span class="line">N, D, H, C = <span class="number">3</span>, <span class="number">5</span>, <span class="number">50</span>, <span class="number">7</span></span><br><span class="line">X = np.random.randn(N, D)</span><br><span class="line">y = np.random.randint(C, size=N)</span><br><span class="line"></span><br><span class="line">std = <span class="number">1e-3</span></span><br><span class="line">model = TwoLayerNet(input_dim=D, hidden_dim=H, num_classes=C, weight_scale=std)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Testing initialization ... '</span>)</span><br><span class="line">W1_std = abs(model.params[<span class="string">'W1'</span>].std() - std)</span><br><span class="line">b1 = model.params[<span class="string">'b1'</span>]</span><br><span class="line">W2_std = abs(model.params[<span class="string">'W2'</span>].std() - std)</span><br><span class="line">b2 = model.params[<span class="string">'b2'</span>]</span><br><span class="line"><span class="keyword">assert</span> W1_std &lt; std / <span class="number">10</span>, <span class="string">'First layer weights do not seem right'</span></span><br><span class="line"><span class="keyword">assert</span> np.all(b1 == <span class="number">0</span>), <span class="string">'First layer biases do not seem right'</span></span><br><span class="line"><span class="keyword">assert</span> W2_std &lt; std / <span class="number">10</span>, <span class="string">'Second layer weights do not seem right'</span></span><br><span class="line"><span class="keyword">assert</span> np.all(b2 == <span class="number">0</span>), <span class="string">'Second layer biases do not seem right'</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'Testing test-time forward pass ... '</span>)</span><br><span class="line">model.params[<span class="string">'W1'</span>] = np.linspace(<span class="number">-0.7</span>, <span class="number">0.3</span>, num=D*H).reshape(D, H)</span><br><span class="line">model.params[<span class="string">'b1'</span>] = np.linspace(<span class="number">-0.1</span>, <span class="number">0.9</span>, num=H)</span><br><span class="line">model.params[<span class="string">'W2'</span>] = np.linspace(<span class="number">-0.3</span>, <span class="number">0.4</span>, num=H*C).reshape(H, C)</span><br><span class="line">model.params[<span class="string">'b2'</span>] = np.linspace(<span class="number">-0.9</span>, <span class="number">0.1</span>, num=C)</span><br><span class="line">X = np.linspace(<span class="number">-5.5</span>, <span class="number">4.5</span>, num=N*D).reshape(D, N).T</span><br><span class="line">scores = model.loss(X)</span><br><span class="line">correct_scores = np.asarray(</span><br><span class="line">  [[<span class="number">11.53165108</span>,  <span class="number">12.2917344</span>,   <span class="number">13.05181771</span>,  <span class="number">13.81190102</span>,  <span class="number">14.57198434</span>, <span class="number">15.33206765</span>,  <span class="number">16.09215096</span>],</span><br><span class="line">   [<span class="number">12.05769098</span>,  <span class="number">12.74614105</span>,  <span class="number">13.43459113</span>,  <span class="number">14.1230412</span>,   <span class="number">14.81149128</span>, <span class="number">15.49994135</span>,  <span class="number">16.18839143</span>],</span><br><span class="line">   [<span class="number">12.58373087</span>,  <span class="number">13.20054771</span>,  <span class="number">13.81736455</span>,  <span class="number">14.43418138</span>,  <span class="number">15.05099822</span>, <span class="number">15.66781506</span>,  <span class="number">16.2846319</span> ]])</span><br><span class="line">scores_diff = np.abs(scores - correct_scores).sum()</span><br><span class="line"><span class="keyword">assert</span> scores_diff &lt; <span class="number">1e-6</span>, <span class="string">'Problem with test-time forward pass'</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'Testing training loss (no regularization)'</span>)</span><br><span class="line">y = np.asarray([<span class="number">0</span>, <span class="number">5</span>, <span class="number">1</span>])</span><br><span class="line">loss, grads = model.loss(X, y)</span><br><span class="line">correct_loss = <span class="number">3.4702243556</span></span><br><span class="line"><span class="keyword">assert</span> abs(loss - correct_loss) &lt; <span class="number">1e-10</span>, <span class="string">'Problem with training-time loss'</span></span><br><span class="line"></span><br><span class="line">model.reg = <span class="number">1.0</span></span><br><span class="line">loss, grads = model.loss(X, y)</span><br><span class="line">correct_loss = <span class="number">26.5948426952</span></span><br><span class="line"><span class="keyword">assert</span> abs(loss - correct_loss) &lt; <span class="number">1e-10</span>, <span class="string">'Problem with regularization loss'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> reg <span class="keyword">in</span> [<span class="number">0.0</span>, <span class="number">0.7</span>]:</span><br><span class="line">  print(<span class="string">'Running numeric gradient check with reg = '</span>, reg)</span><br><span class="line">  model.reg = reg</span><br><span class="line">  loss, grads = model.loss(X, y)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> name <span class="keyword">in</span> sorted(grads):</span><br><span class="line">    f = <span class="keyword">lambda</span> _: model.loss(X, y)[<span class="number">0</span>]</span><br><span class="line">    grad_num = eval_numerical_gradient(f, model.params[name], verbose=<span class="literal">False</span>)</span><br><span class="line">    print(<span class="string">'%s relative error: %.2e'</span> % (name, rel_error(grad_num, grads[name])))</span><br></pre></td></tr></table></figure>
<p>The error of each parameter should be less than 1e-7.</p>
<p><img src="/2020/02/24/Two-Layer-Network/1582514136392.png" alt="1582514136392"></p>
<p>Finally, we use this Two-Layer Network on the data with <code>Slover</code> which is a modular class that fits the model into it and can train the model, predict the final output etc.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = TwoLayerNet(input_dim=<span class="number">3</span>*<span class="number">32</span>*<span class="number">32</span>, hidden_dim=<span class="number">100</span>, num_classes=<span class="number">10</span>,</span><br><span class="line">                 weight_scale=<span class="number">1e-3</span>, reg=<span class="number">0.1</span>)</span><br><span class="line">solver = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Use a Solver instance to train a TwoLayerNet that achieves at least  #</span></span><br><span class="line"><span class="comment"># 50% accuracy on the validation set.                                        #</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line">data2 = &#123;</span><br><span class="line">      <span class="string">'X_train'</span>: data[<span class="string">'X_train'</span>],</span><br><span class="line">      <span class="string">'y_train'</span>: data[<span class="string">'y_train'</span>],</span><br><span class="line">      <span class="string">'X_val'</span>: data[<span class="string">'X_val'</span>],</span><br><span class="line">      <span class="string">'y_val'</span>: data[<span class="string">'y_val'</span>],</span><br><span class="line">    &#125;</span><br><span class="line">solver = Solver(model, data2,</span><br><span class="line">                    update_rule=<span class="string">'sgd'</span>,</span><br><span class="line">                    optim_config=&#123;</span><br><span class="line">                      <span class="string">'learning_rate'</span>: <span class="number">1e-3</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    lr_decay=<span class="number">0.95</span>,</span><br><span class="line">                    num_epochs=<span class="number">10</span>, batch_size=<span class="number">100</span>,</span><br><span class="line">                    print_every=<span class="number">100</span>)</span><br><span class="line">solver.train()</span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment">#                             END OF YOUR CODE                               #</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br></pre></td></tr></table></figure>
<p>Then, draw the accuracy graph and loss graph to see how they change with the epoch.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Run this cell to visualize training loss and train / val accuracy</span></span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">plt.title(<span class="string">'Training loss'</span>)</span><br><span class="line">plt.plot(solver.loss_history, <span class="string">'o'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Iteration'</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">plt.title(<span class="string">'Accuracy'</span>)</span><br><span class="line">plt.plot(solver.train_acc_history, <span class="string">'-o'</span>, label=<span class="string">'train'</span>)</span><br><span class="line">plt.plot(solver.val_acc_history, <span class="string">'-o'</span>, label=<span class="string">'val'</span>)</span><br><span class="line">plt.plot([<span class="number">0.5</span>] * len(solver.val_acc_history), <span class="string">'k--'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Epoch'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'lower right'</span>)</span><br><span class="line">plt.gcf().set_size_inches(<span class="number">15</span>, <span class="number">12</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/24/Two-Layer-Network/1582514639365.png" alt="1582514639365"></p>
<p><img src="/2020/02/24/Two-Layer-Network/1582514661060.png" alt="1582514661060"></p>
<p>This part of exercise is prepared for the Multilayer Networks in which we have to deal with more complex networks, but the idea is the same that modular programming like above can make it more achievable. </p>
]]></content>
  </entry>
  <entry>
    <title>Fully-Connected Networks</title>
    <url>/2020/02/24/Fully-Connected-Networks/</url>
    <content><![CDATA[<p>Previously, we have learn how to build a Two-Layers Network with modular programming in which we have implemented forward/backward functions for different layers and also combine some layers together. In this part we will continue to do the same work but will build a more complex network adding Batch Normalization and Dropout Layers.</p>
<h4 id="Layers-Modularization"><a href="#Layers-Modularization" class="headerlink" title="Layers Modularization"></a>Layers Modularization</h4><p>For fully-connected network, the architecture of the networok is like that: </p>
<p><code>{affine - [batch norm] - relu - [dropout]} x (L - 1) - affine - softmax</code></p>
<p>Note that Batch Normalization and Dropout are not necessary and we have added parameters for users to decide whether they should use them. In Two-Layers network we combine affine and relu together, and this time we should create <code>affine-batch norm-relu</code>, <code>affine-relu-dropout</code> and <code>affine-batch norm-relu-dropout</code> in layers_utils.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">abr_forward</span><span class="params">(x,w,b,gamma,beta,bn_param)</span>:</span></span><br><span class="line">    </span><br><span class="line">    a, aff_cache = affine_forward(x,w,b)</span><br><span class="line">    b, batch_cache = batchnorm_forward(a, gamma, beta, bn_param)</span><br><span class="line">    out, relu_cache = relu_forward(b)</span><br><span class="line">    cache = (aff_cache, batch_cache, relu_cache)</span><br><span class="line">    <span class="keyword">return</span> out, cache</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">abr_backward</span><span class="params">(dout, cache)</span>:</span></span><br><span class="line">    aff_cache, batch_cache, relu_cache = cache</span><br><span class="line">    dr = relu_backward(dout, relu_cache)</span><br><span class="line">    dbatch, dgamma, dbeta = batchnorm_backward(dr, batch_cache)</span><br><span class="line">    dx, dw, db = affine_backward(dbatch, aff_cache)</span><br><span class="line">    <span class="keyword">return</span> dx, dw, db, dgamma, dbeta</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ard_forward</span><span class="params">(x, w, b, dropout_param)</span>:</span></span><br><span class="line">    ar_out, ar_cache = affine_relu_forward(x,w,b)</span><br><span class="line">    out, d_cache = dropout_forward(ar_out, dropout_param)</span><br><span class="line">    cache = (ar_cache, d_cache)</span><br><span class="line">    <span class="keyword">return</span> out, cache</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ard_backward</span><span class="params">(dout, cache)</span>:</span></span><br><span class="line">    ar_cache, d_cache = cache</span><br><span class="line">    ddropout = dropout_backward(dout, d_cache)</span><br><span class="line">    dx, dw, db = affine_relu_backward(ddropout, ar_cache)</span><br><span class="line">    <span class="keyword">return</span> dx, dw, db</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">abrd_forward</span><span class="params">(x, w, b,gamma,beta,bn_param, dropout_param)</span>:</span></span><br><span class="line">    abr_out, abr_cache = abr_forward(x, w, b,gamma,beta,bn_param)</span><br><span class="line">    out, d_cache = dropout_forward(abr_out, dropout_param)</span><br><span class="line">    cache = (abr_cache, d_cache)</span><br><span class="line">    <span class="keyword">return</span> out, cache</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">abrd_backward</span><span class="params">(dout, cache)</span>:</span></span><br><span class="line">    abr_cache, d_cache = cache</span><br><span class="line">    ddropout = dropout_backward(dout, d_cache)</span><br><span class="line">    dx, dw, db, dgamma, dbeta = abr_backward(ddropout, abr_cache)</span><br><span class="line">    <span class="keyword">return</span> dx, dw, db, dgamma, dbeta</span><br></pre></td></tr></table></figure>
<p>Then, we can turn to fc_net.py to finish all the exercises. </p>
<h4 id="Build-Fully-Connected-Network"><a href="#Build-Fully-Connected-Network" class="headerlink" title="Build Fully-Connected Network"></a>Build Fully-Connected Network</h4><p>First, we need to initialize weights, bias, gamma and beta. Note that we do not know the layer number of  the network, so it might be a little difficult to find the correct size of each parameters. The easier way is to assume a network with certain layers and try to write the general code  to satisfy the demands. This idea is also suitable for next part of exercise and you can use this technique to debug your code. Then, we have to calculate loss and gradients. It is easier to use the functions we have created in layers_utils.py, if not you will find it hard to implement the method. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FullyConnectedNet</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A fully-connected neural network with an arbitrary number of hidden layers,</span></span><br><span class="line"><span class="string">    ReLU nonlinearities, and a softmax loss function. This will also implement</span></span><br><span class="line"><span class="string">    dropout and batch normalization as options. For a network with L layers,</span></span><br><span class="line"><span class="string">    the architecture will be</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#123;affine - [batch norm] - relu - [dropout]&#125; x (L - 1) - affine - softmax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    where batch normalization and dropout are optional, and the &#123;...&#125; block is</span></span><br><span class="line"><span class="string">    repeated L - 1 times.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Similar to the TwoLayerNet above, learnable parameters are stored in the</span></span><br><span class="line"><span class="string">    self.params dictionary and will be learned using the Solver class.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, hidden_dims, input_dim=<span class="number">3</span>*<span class="number">32</span>*<span class="number">32</span>, num_classes=<span class="number">10</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 dropout=<span class="number">0</span>, use_batchnorm=False, reg=<span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 weight_scale=<span class="number">1e-2</span>, dtype=np.float32, seed=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize a new FullyConnectedNet.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Inputs:</span></span><br><span class="line"><span class="string">        - hidden_dims: A list of integers giving the size of each hidden layer.</span></span><br><span class="line"><span class="string">        - input_dim: An integer giving the size of the input.</span></span><br><span class="line"><span class="string">        - num_classes: An integer giving the number of classes to classify.</span></span><br><span class="line"><span class="string">        - dropout: Scalar between 0 and 1 giving dropout strength. If dropout=0 then</span></span><br><span class="line"><span class="string">          the network should not use dropout at all.</span></span><br><span class="line"><span class="string">        - use_batchnorm: Whether or not the network should use batch normalization.</span></span><br><span class="line"><span class="string">        - reg: Scalar giving L2 regularization strength.</span></span><br><span class="line"><span class="string">        - weight_scale: Scalar giving the standard deviation for random</span></span><br><span class="line"><span class="string">          initialization of the weights.</span></span><br><span class="line"><span class="string">        - dtype: A numpy datatype object; all computations will be performed using</span></span><br><span class="line"><span class="string">          this datatype. float32 is faster but less accurate, so you should use</span></span><br><span class="line"><span class="string">          float64 for numeric gradient checking.</span></span><br><span class="line"><span class="string">        - seed: If not None, then pass this random seed to the dropout layers. This</span></span><br><span class="line"><span class="string">          will make the dropout layers deteriminstic so we can gradient check the</span></span><br><span class="line"><span class="string">          model.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.use_batchnorm = use_batchnorm</span><br><span class="line">        self.use_dropout = dropout &gt; <span class="number">0</span></span><br><span class="line">        self.reg = reg</span><br><span class="line">        self.num_layers = <span class="number">1</span> + len(hidden_dims)</span><br><span class="line">        self.dtype = dtype</span><br><span class="line">        self.params = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">############################################################################</span></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> Initialize the parameters of the network, storing all values in    #</span></span><br><span class="line">        <span class="comment"># the self.params dictionary. Store weights and biases for the first layer #</span></span><br><span class="line">        <span class="comment"># in W1 and b1; for the second layer use W2 and b2, etc. Weights should be #</span></span><br><span class="line">        <span class="comment"># initialized from a normal distribution with standard deviation equal to  #</span></span><br><span class="line">        <span class="comment"># weight_scale and biases should be initialized to zero.                   #</span></span><br><span class="line">        <span class="comment">#                                                                          #</span></span><br><span class="line">        <span class="comment"># When using batch normalization, store scale and shift parameters for the #</span></span><br><span class="line">        <span class="comment"># first layer in gamma1 and beta1; for the second layer use gamma2 and     #</span></span><br><span class="line">        <span class="comment"># beta2, etc. Scale parameters should be initialized to one and shift      #</span></span><br><span class="line">        <span class="comment"># parameters should be initialized to zero.                                #</span></span><br><span class="line">        <span class="comment">############################################################################</span></span><br><span class="line">        self.params[<span class="string">'W1'</span>] = weight_scale*np.random.randn(input_dim, hidden_dims[<span class="number">0</span>])</span><br><span class="line">        self.params[<span class="string">'b1'</span>] = np.zeros(hidden_dims[<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(hidden_dims)<span class="number">-1</span>):</span><br><span class="line">            self.params[<span class="string">'W'</span>+str(i+<span class="number">2</span>)] = weight_scale*np.random.randn(hidden_dims[i], hidden_dims[i+<span class="number">1</span>])</span><br><span class="line">            self.params[<span class="string">'b'</span>+str(i+<span class="number">2</span>)] = np.zeros(hidden_dims[i+<span class="number">1</span>])</span><br><span class="line">            </span><br><span class="line">        self.params[<span class="string">'W'</span>+str(self.num_layers)] = weight_scale*np.random.randn(hidden_dims[<span class="number">-1</span>], num_classes)</span><br><span class="line">        self.params[<span class="string">'b'</span>+str(self.num_layers)] = np.zeros(num_classes)</span><br><span class="line">        <span class="keyword">if</span> self.use_batchnorm:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(hidden_dims)):</span><br><span class="line">                self.params[<span class="string">'gamma'</span>+ str(j+<span class="number">1</span>)] = np.zeros(hidden_dims[j])+<span class="number">1</span></span><br><span class="line">                self.params[<span class="string">'beta'</span>+ str(j+<span class="number">1</span>)] = np.zeros(hidden_dims[j])</span><br><span class="line">        <span class="comment">############################################################################</span></span><br><span class="line">        <span class="comment">#                             END OF YOUR CODE                             #</span></span><br><span class="line">        <span class="comment">############################################################################</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># When using dropout we need to pass a dropout_param dictionary to each</span></span><br><span class="line">        <span class="comment"># dropout layer so that the layer knows the dropout probability and the mode</span></span><br><span class="line">        <span class="comment"># (train / test). You can pass the same dropout_param to each dropout layer.</span></span><br><span class="line">        self.dropout_param = &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span> self.use_dropout:</span><br><span class="line">            self.dropout_param = &#123;<span class="string">'mode'</span>: <span class="string">'train'</span>, <span class="string">'p'</span>: dropout&#125;</span><br><span class="line">            <span class="keyword">if</span> seed <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                self.dropout_param[<span class="string">'seed'</span>] = seed</span><br><span class="line"></span><br><span class="line">        <span class="comment"># With batch normalization we need to keep track of running means and</span></span><br><span class="line">        <span class="comment"># variances, so we need to pass a special bn_param object to each batch</span></span><br><span class="line">        <span class="comment"># normalization layer. You should pass self.bn_params[0] to the forward pass</span></span><br><span class="line">        <span class="comment"># of the first batch normalization layer, self.bn_params[1] to the forward</span></span><br><span class="line">        <span class="comment"># pass of the second batch normalization layer, etc.</span></span><br><span class="line">        self.bn_params = []</span><br><span class="line">        <span class="keyword">if</span> self.use_batchnorm:</span><br><span class="line">            self.bn_params = [&#123;<span class="string">'mode'</span>: <span class="string">'train'</span>&#125; <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_layers - <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Cast all parameters to the correct datatype</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.params.items():</span><br><span class="line">            self.params[k] = v.astype(dtype)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loss</span><span class="params">(self, X, y=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Compute loss and gradient for the fully-connected net.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Input / output: Same as TwoLayerNet above.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        X = X.astype(self.dtype)</span><br><span class="line">        mode = <span class="string">'test'</span> <span class="keyword">if</span> y <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">'train'</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Set train/test mode for batchnorm params and dropout param since they</span></span><br><span class="line">        <span class="comment"># behave differently during training and testing.</span></span><br><span class="line">        <span class="keyword">if</span> self.use_dropout:</span><br><span class="line">            self.dropout_param[<span class="string">'mode'</span>] = mode</span><br><span class="line">        <span class="keyword">if</span> self.use_batchnorm:</span><br><span class="line">            <span class="keyword">for</span> bn_param <span class="keyword">in</span> self.bn_params:</span><br><span class="line">                bn_param[<span class="string">'mode'</span>] = mode</span><br><span class="line"></span><br><span class="line">        scores = <span class="literal">None</span></span><br><span class="line">        <span class="comment">############################################################################</span></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> Implement the forward pass for the fully-connected net, computing  #</span></span><br><span class="line">        <span class="comment"># the class scores for X and storing them in the scores variable.          #</span></span><br><span class="line">        <span class="comment">#                                                                          #</span></span><br><span class="line">        <span class="comment"># When using dropout, you'll need to pass self.dropout_param to each       #</span></span><br><span class="line">        <span class="comment"># dropout forward pass.                                                    #</span></span><br><span class="line">        <span class="comment">#                                                                          #</span></span><br><span class="line">        <span class="comment"># When using batch normalization, you'll need to pass self.bn_params[0] to #</span></span><br><span class="line">        <span class="comment"># the forward pass for the first batch normalization layer, pass           #</span></span><br><span class="line">        <span class="comment"># self.bn_params[1] to the forward pass for the second batch normalization #</span></span><br><span class="line">        <span class="comment"># layer, etc.                                                              #</span></span><br><span class="line">        <span class="comment">############################################################################</span></span><br><span class="line">        L=self.num_layers </span><br><span class="line">        cache = [<span class="literal">None</span>]*L</span><br><span class="line">        <span class="keyword">if</span> self.use_batchnorm:</span><br><span class="line">            <span class="keyword">if</span> self.use_dropout:                </span><br><span class="line">                 <span class="keyword">for</span> i <span class="keyword">in</span> range(L<span class="number">-1</span>):</span><br><span class="line">                    <span class="keyword">if</span> i == <span class="number">0</span> :</span><br><span class="line">                        scores,cache[i] = abrd_forward(X, self.params[<span class="string">'W1'</span>], </span><br><span class="line">                                                       self.params[<span class="string">'b1'</span>], self.params[<span class="string">'gamma1'</span>], </span><br><span class="line">                                                       self.params[<span class="string">'beta1'</span>], self.bn_params[i],self.dropout_param )</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                         scores,cache[i] = abrd_forward(scores, self.params[<span class="string">'W'</span>+str(i+<span class="number">1</span>)], </span><br><span class="line">                                                        self.params[<span class="string">'b'</span>+str(i+<span class="number">1</span>)], </span><br><span class="line">                                                      self.params[<span class="string">'gamma'</span>+str(i+<span class="number">1</span>)], self.params[<span class="string">'beta'</span>+str(i+<span class="number">1</span>)],</span><br><span class="line">                                                        self.bn_params[i], self.dropout_param)                 </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(L<span class="number">-1</span>):</span><br><span class="line">                    <span class="keyword">if</span> i == <span class="number">0</span> :</span><br><span class="line">                        scores,cache[i] = abr_forward(X, self.params[<span class="string">'W1'</span>], self.params[<span class="string">'b1'</span>], </span><br><span class="line">                                                      self.params[<span class="string">'gamma1'</span>], self.params[<span class="string">'beta1'</span>], self.bn_params[i])</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                         scores,cache[i] = abr_forward(scores, self.params[<span class="string">'W'</span>+str(i+<span class="number">1</span>)], self.params[<span class="string">'b'</span>+str(i+<span class="number">1</span>)], </span><br><span class="line">                                                      self.params[<span class="string">'gamma'</span>+str(i+<span class="number">1</span>)], self.params[<span class="string">'beta'</span>+str(i+<span class="number">1</span>)], self.bn_params[i])                               </span><br><span class="line">        <span class="keyword">elif</span> self.use_dropout:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(L<span class="number">-1</span>):                </span><br><span class="line">                <span class="keyword">if</span> i ==<span class="number">0</span> :</span><br><span class="line">                    scores,cache[i] = ard_forward(X, self.params[<span class="string">'W1'</span>], self.params[<span class="string">'b1'</span>], self.dropout_param) </span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    scores,cache[i] = ard_forward(scores, self.params[<span class="string">'W'</span>+str(i+<span class="number">1</span>)], self.params[<span class="string">'b'</span>+str(i+<span class="number">1</span>)], self.dropout_param) </span><br><span class="line">                        </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(L<span class="number">-1</span>):</span><br><span class="line">                <span class="keyword">if</span> i ==<span class="number">0</span> :</span><br><span class="line">                    scores,cache[i] = affine_relu_forward(X, self.params[<span class="string">'W1'</span>], self.params[<span class="string">'b1'</span>]) </span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    scores,cache[i] = affine_relu_forward(scores, self.params[<span class="string">'W'</span>+str(i+<span class="number">1</span>)], self.params[<span class="string">'b'</span>+str(i+<span class="number">1</span>)]) </span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">        scores,cache[L<span class="number">-1</span>] = affine_forward(scores, self.params[<span class="string">'W'</span>+str(L)], self.params[<span class="string">'b'</span>+str(L)])</span><br><span class="line">                    </span><br><span class="line"></span><br><span class="line">        <span class="comment">############################################################################</span></span><br><span class="line">        <span class="comment">#                             END OF YOUR CODE                             #</span></span><br><span class="line">        <span class="comment">############################################################################</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># If test mode return early</span></span><br><span class="line">        <span class="keyword">if</span> mode == <span class="string">'test'</span>:</span><br><span class="line">            <span class="keyword">return</span> scores</span><br><span class="line"></span><br><span class="line">        loss, grads = <span class="number">0.0</span>, &#123;&#125;</span><br><span class="line">        <span class="comment">############################################################################</span></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> Implement the backward pass for the fully-connected net. Store the #</span></span><br><span class="line">        <span class="comment"># loss in the loss variable and gradients in the grads dictionary. Compute #</span></span><br><span class="line">        <span class="comment"># data loss using softmax, and make sure that grads[k] holds the gradients #</span></span><br><span class="line">        <span class="comment"># for self.params[k]. Don't forget to add L2 regularization!               #</span></span><br><span class="line">        <span class="comment">#                                                                          #</span></span><br><span class="line">        <span class="comment"># When using batch normalization, you don't need to regularize the scale   #</span></span><br><span class="line">        <span class="comment"># and shift parameters.                                                    #</span></span><br><span class="line">        <span class="comment">#                                                                          #</span></span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> To ensure that your implementation matches ours and you pass the   #</span></span><br><span class="line">        <span class="comment"># automated tests, make sure that your L2 regularization includes a factor #</span></span><br><span class="line">        <span class="comment"># of 0.5 to simplify the expression for the gradient.                      #</span></span><br><span class="line">        <span class="comment">############################################################################</span></span><br><span class="line">        loss, pro_scores = softmax_loss(scores,y)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(L):</span><br><span class="line">            loss += <span class="number">0.5</span>*self.reg*np.sum(self.params[<span class="string">'W'</span>+str(i+<span class="number">1</span>)]*self.params[<span class="string">'W'</span>+str(i+<span class="number">1</span>)])</span><br><span class="line">        <span class="keyword">if</span> self.use_batchnorm:</span><br><span class="line">            <span class="keyword">if</span> self.use_dropout:</span><br><span class="line">                </span><br><span class="line">                dhidden, grads[<span class="string">'W'</span>+str(L)], grads[<span class="string">'b'</span>+str(L)] = affine_backward(pro_scores, cache[L<span class="number">-1</span>])</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(L<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">                    dhidden, grads[<span class="string">'W'</span>+str(i+<span class="number">1</span>)], grads[<span class="string">'b'</span>+str(i+<span class="number">1</span>)],  grads[<span class="string">'gamma'</span>+str(i+<span class="number">1</span>)], </span><br><span class="line">                    grads[<span class="string">'beta'</span>+str(i+<span class="number">1</span>)]= abrd_backward(dhidden, cache[i])</span><br><span class="line">                    </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dhidden, grads[<span class="string">'W'</span>+str(L)], grads[<span class="string">'b'</span>+str(L)] = affine_backward(pro_scores, cache[L<span class="number">-1</span>])</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(L<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">                    dhidden, grads[<span class="string">'W'</span>+str(i+<span class="number">1</span>)], grads[<span class="string">'b'</span>+str(i+<span class="number">1</span>)],  grads[<span class="string">'gamma'</span>+str(i+<span class="number">1</span>)],</span><br><span class="line">                    grads[<span class="string">'beta'</span>+str(i+<span class="number">1</span>)]= abr_backward(dhidden, cache[i])</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">elif</span> self.use_dropout: </span><br><span class="line">            dhidden, grads[<span class="string">'W'</span>+str(L)], grads[<span class="string">'b'</span>+str(L)] = affine_backward(pro_scores, cache[L<span class="number">-1</span>])</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(L<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">                dhidden, grads[<span class="string">'W'</span>+str(i+<span class="number">1</span>)], grads[<span class="string">'b'</span>+str(i+<span class="number">1</span>)] = ard_backward(dhidden, cache[i])</span><br><span class="line">                          </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dhidden, grads[<span class="string">'W'</span>+str(L)], grads[<span class="string">'b'</span>+str(L)] = affine_backward(pro_scores, cache[L<span class="number">-1</span>])</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(L<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">                dhidden, grads[<span class="string">'W'</span>+str(i+<span class="number">1</span>)], grads[<span class="string">'b'</span>+str(i+<span class="number">1</span>)] = affine_relu_backward(dhidden, cache[i])</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(L):</span><br><span class="line">            grads[<span class="string">'W'</span>+str(i+<span class="number">1</span>)] += self.reg*self.params[<span class="string">'W'</span>+str(i+<span class="number">1</span>)]</span><br><span class="line">            grads[<span class="string">'b'</span>+str(i+<span class="number">1</span>)] += self.reg*self.params[<span class="string">'b'</span>+str(i+<span class="number">1</span>)]</span><br><span class="line">            </span><br><span class="line">        <span class="comment">############################################################################</span></span><br><span class="line">        <span class="comment">#                             END OF YOUR CODE                             #</span></span><br><span class="line">        <span class="comment">############################################################################</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> loss, grads</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Neural Net</title>
    <url>/2020/02/18/Neural-Net/</url>
    <content><![CDATA[<h4 id="Problem-Overview"><a href="#Problem-Overview" class="headerlink" title="Problem Overview"></a>Problem Overview</h4><p>The last classifier in assignment1 is Neural Network. We need to build a two-layers network from scratch, which means we know the function for each layer. But in many cases, if we deal with a complex problem and need a complex model, it is very hard to know exactly the function for each layer and this can make the model unexplainable. That is why sometimes we may prefer to use machine learning algorithms to deal with problems. </p>
<p>Compared to previous classifier, I find it more difficult to understand and the calculation is a little bit more complex. In this exercise, using your pen to do the math on a paper may be clear and comprehensible before you start to write the code. </p>
<p>At the end, you can see that neural network performs well in the classification and has a high validation accuracy. The problem with it, however, is the efficiency because of using two layers linear function and one hidden layer(using ReLU). </p>
<h4 id="Neural-Network"><a href="#Neural-Network" class="headerlink" title="Neural Network"></a>Neural Network</h4><ol>
<li>Model Architectures </li>
</ol>
<p>When you start to write the code, you should keep on mind of the structure of the model. We use two layers &amp; one hidden layer network, so that you can easily know what exactly the structure is. Just like that:</p>
<p><img src="/2020/02/18/Neural-Net/1581992206941.png" alt="1581992206941"> </p>
<h4 id><a href="#" class="headerlink" title=" "></a> </h4><p>For input layer, we have </p>
<script type="math/tex; mode=display">
f_{in}=W_1X+b_1</script><p>and output layer :</p>
<script type="math/tex; mode=display">
f_{out}=W_2X+b_2</script><p>For hidden layer, we use ReLU as activation function.</p>
<script type="math/tex; mode=display">
Re(x)=max(0,x)</script><p>There are also many activation functions, you can choose them to test the result, but ReLU is suitable to most problems. </p>
<p><img src="/2020/02/18/Neural-Net/1581992588211.png" alt="1581992588211"></p>
<ol>
<li>Computational Graph</li>
</ol>
<p>Notice that we can easily get the loss of the networks by calculating the scores first and then use softmax loss to get the loss. Gradient calculation, on the contrary, is more difficult to obtain. If you calculate it directly from input to output, it will be complicated and easy to make mistakes. If the model is very complex , it is unrealistic to do in that way. Thus, we choose to use computational graph &amp; Backpropagation. Let me give you a simple example to help you understand it. </p>
<p>Now, we have a function like that and we want to get the derivative of each parameters. </p>
<p><img src="/2020/02/18/Neural-Net/1581995492794.png" alt="1581995492794"> </p>
<p>Based on the computational graph, we can clearly see the relationships between each parameters, and we can use chain rule to write the derivative of each parameters. </p>
<script type="math/tex; mode=display">
\frac{\partial f}{\partial x} = \frac{\partial f}{\partial q}\frac{\partial q}{\partial x}</script><script type="math/tex; mode=display">
\frac{\partial f}{\partial y} = \frac{\partial f}{\partial q}\frac{\partial q}{\partial y}</script><p><img src="/2020/02/18/Neural-Net/1581996049609.png" alt="1581996049609"></p>
<p><img src="/2020/02/18/Neural-Net/1581996072635.png" alt="1581996072635"></p>
<p>We know basically how it works and now we can get our computational graph based on the model. </p>
<p><img src="/2020/02/18/Neural-Net/1581998109205.png" alt="1581998109205"></p>
<ol>
<li>Backpropagation</li>
</ol>
<p>After we get the computational graph, we can use backpropagation to get the gradients. Because we use softmax loss, we can obtain the gradient of $\frac{\partial L}{\partial y}$​, then we can use the chain rule to get all the gradients. </p>
<script type="math/tex; mode=display">
\frac{\partial L}{\partial W_2} = \frac{\partial L}{\partial y}\frac{\partial y}{\partial W_2} = y_1^{T}\frac{\partial L}{\partial y} \\</script><script type="math/tex; mode=display">
\frac{\partial L}{\partial b_2} = \frac{\partial L}{\partial y}\frac{\partial y}{\partial b_2} = 1_{(1\times N)}\frac{\partial L}{\partial y} \\</script><script type="math/tex; mode=display">
\frac{\partial L}{\partial y_1} = \frac{\partial L}{\partial y}\frac{\partial y}{\partial y_1} =\frac{\partial L}{\partial y}W_2^T\\</script><script type="math/tex; mode=display">
\frac{\partial y_1}{\partial y_2} = \begin{cases}
1& y_{2_{ij}} >0\\
0& otherwise
\end{cases} \\</script><script type="math/tex; mode=display">
\frac{\partial L}{\partial y_2}=\frac{\partial L}{\partial y_1}\frac{\partial y_1}{\partial y_2}=\frac{\partial L}{\partial y_1}, (\frac{\partial L}{\partial y_1}[y_1<=0] = 0)\\</script><script type="math/tex; mode=display">
\frac{\partial L}{\partial W_1} = \frac{\partial L}{\partial y_2}\frac{\partial y_2}{\partial W_1} = x^{T}\frac{\partial L}{\partial y_2} \\</script><script type="math/tex; mode=display">
\frac{\partial L}{\partial b_1} = \frac{\partial L}{\partial y_2}\frac{\partial y_2}{\partial b_2} = 1_{(1\times C)}\frac{\partial L}{\partial y_2} \\</script><p>Based on these equations, we can write the code easily without any big mistakes. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> past.builtins <span class="keyword">import</span> xrange</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoLayerNet</span><span class="params">(object)</span>:</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">  A two-layer fully-connected neural network. The net has an input dimension of</span></span><br><span class="line"><span class="string">  N, a hidden layer dimension of H, and performs classification over C classes.</span></span><br><span class="line"><span class="string">  We train the network with a softmax loss function and L2 regularization on the</span></span><br><span class="line"><span class="string">  weight matrices. The network uses a ReLU nonlinearity after the first fully</span></span><br><span class="line"><span class="string">  connected layer.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  In other words, the network has the following architecture:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  input - fully connected layer - ReLU - fully connected layer - softmax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  The outputs of the second fully-connected layer are the scores for each class.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, input_size, hidden_size, output_size, std=<span class="number">1e-4</span>)</span>:</span></span><br><span class="line">              </span><br><span class="line">        </span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">    Initialize the model. Weights are initialized to small random values and</span></span><br><span class="line"><span class="string">    biases are initialized to zero. Weights and biases are stored in the</span></span><br><span class="line"><span class="string">    variable self.params, which is a dictionary with the following keys:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    W1: First layer weights; has shape (D, H)</span></span><br><span class="line"><span class="string">    b1: First layer biases; has shape (H,)</span></span><br><span class="line"><span class="string">    W2: Second layer weights; has shape (H, C)</span></span><br><span class="line"><span class="string">    b2: Second layer biases; has shape (C,)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Inputs:</span></span><br><span class="line"><span class="string">    - input_size: The dimension D of the input data.</span></span><br><span class="line"><span class="string">    - hidden_size: The number of neurons H in the hidden layer.</span></span><br><span class="line"><span class="string">    - output_size: The number of classes C.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.params = &#123;&#125;</span><br><span class="line">        self.params[<span class="string">'W1'</span>] = std * np.random.randn(input_size, hidden_size)</span><br><span class="line">        self.params[<span class="string">'b1'</span>] = np.zeros(hidden_size)</span><br><span class="line">        self.params[<span class="string">'W2'</span>] = std * np.random.randn(hidden_size, output_size)</span><br><span class="line">        self.params[<span class="string">'b2'</span>] = np.zeros(output_size)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loss</span><span class="params">(self, X, y=None, reg=<span class="number">0.0</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">    Compute the loss and gradients for a two layer fully connected neural</span></span><br><span class="line"><span class="string">    network.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Inputs:</span></span><br><span class="line"><span class="string">    - X: Input data of shape (N, D). Each X[i] is a training sample.</span></span><br><span class="line"><span class="string">    - y: Vector of training labels. y[i] is the label for X[i], and each y[i] is</span></span><br><span class="line"><span class="string">      an integer in the range 0 &lt;= y[i] &lt; C. This parameter is optional; if it</span></span><br><span class="line"><span class="string">      is not passed then we only return scores, and if it is passed then we</span></span><br><span class="line"><span class="string">      instead return the loss and gradients.</span></span><br><span class="line"><span class="string">    - reg: Regularization strength.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    If y is None, return a matrix scores of shape (N, C) where scores[i, c] is</span></span><br><span class="line"><span class="string">    the score for class c on input X[i].</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    If y is not None, instead return a tuple of:</span></span><br><span class="line"><span class="string">    - loss: Loss (data loss and regularization loss) for this batch of training</span></span><br><span class="line"><span class="string">      samples.</span></span><br><span class="line"><span class="string">    - grads: Dictionary mapping parameter names to gradients of those parameters</span></span><br><span class="line"><span class="string">      with respect to the loss function; has the same keys as self.params.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">    <span class="comment"># Unpack variables from the params dictionary</span></span><br><span class="line">        W1, b1 = self.params[<span class="string">'W1'</span>], self.params[<span class="string">'b1'</span>]</span><br><span class="line">        W2, b2 = self.params[<span class="string">'W2'</span>], self.params[<span class="string">'b2'</span>]</span><br><span class="line">        N, D = X.shape</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Compute the forward pass</span></span><br><span class="line">        scores = <span class="literal">None</span></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> Perform the forward pass, computing the class scores for the input. #</span></span><br><span class="line">    <span class="comment"># Store the result in the scores variable, which should be an array of      #</span></span><br><span class="line">    <span class="comment"># shape (N, C).                                                             #</span></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line">        score_layer1 = X.dot(W1) + b1</span><br><span class="line">        score_ReLU =np.maximum(score_layer1,<span class="number">0</span>)</span><br><span class="line">        scores = score_ReLU.dot(W2) + b2</span><br><span class="line"></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line">    <span class="comment">#                              END OF YOUR CODE                             #</span></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># If the targets are not given then jump out, we're done</span></span><br><span class="line">        <span class="keyword">if</span> y <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> scores</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Compute the loss</span></span><br><span class="line">        loss = <span class="literal">None</span></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> Finish the forward pass, and compute the loss. This should include  #</span></span><br><span class="line">    <span class="comment"># both the data loss and L2 regularization for W1 and W2. Store the result  #</span></span><br><span class="line">    <span class="comment"># in the variable loss, which should be a scalar. Use the Softmax           #</span></span><br><span class="line">    <span class="comment"># classifier loss.                                                          #</span></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line">        </span><br><span class="line">        scores -= np.max(scores, axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>)</span><br><span class="line">        pro_scores = np.exp(scores)/ np.sum(np.exp(scores), axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>)</span><br><span class="line">        loss = -np.sum(np.log(pro_scores[np.arange(N),y]))</span><br><span class="line">        </span><br><span class="line">        loss /= N</span><br><span class="line">        loss += reg*np.sum(W1*W1)+ reg*np.sum(W2*W2)</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line">    <span class="comment">#                              END OF YOUR CODE                             #</span></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Backward pass: compute gradients</span></span><br><span class="line">        grads = &#123;&#125;</span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> Compute the backward pass, computing the derivatives of the weights #</span></span><br><span class="line">    <span class="comment"># and biases. Store the results in the grads dictionary. For example,       #</span></span><br><span class="line">    <span class="comment"># grads['W1'] should store the gradient on W1, and be a matrix of same size #</span></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line">        pro_scores[np.arange(N), y] -= <span class="number">1</span></span><br><span class="line">        pro_scores /= N</span><br><span class="line">        </span><br><span class="line">        dW2 = score_ReLU.T.dot(pro_scores)</span><br><span class="line">        db2 = np.sum(pro_scores, axis=<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        dscore_ReLU = pro_scores.dot(W2.T)</span><br><span class="line">        dscore_ReLU[score_ReLU &lt;= <span class="number">0</span> ] = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        dW1 = X.T.dot(dscore_ReLU)</span><br><span class="line">        db1 = np.sum(dscore_ReLU, axis=<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        dW1 += <span class="number">2</span>*reg*W1</span><br><span class="line">        dW2 += <span class="number">2</span>*reg*W2</span><br><span class="line">        </span><br><span class="line">        grads = &#123;<span class="string">'W1'</span>:dW1, <span class="string">'b1'</span>:db1, <span class="string">'W2'</span>:dW2, <span class="string">'b2'</span>:db2&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line">    <span class="comment">#                              END OF YOUR CODE                             #</span></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> loss, grads</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(self, X, y, X_val, y_val,</span></span></span><br><span class="line"><span class="function"><span class="params">            learning_rate=<span class="number">1e-3</span>, learning_rate_decay=<span class="number">0.95</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            reg=<span class="number">5e-6</span>, num_iters=<span class="number">100</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            batch_size=<span class="number">200</span>, verbose=False)</span>:</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">    Train this neural network using stochastic gradient descent.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Inputs:</span></span><br><span class="line"><span class="string">    - X: A numpy array of shape (N, D) giving training data.</span></span><br><span class="line"><span class="string">    - y: A numpy array f shape (N,) giving training labels; y[i] = c means that</span></span><br><span class="line"><span class="string">      X[i] has label c, where 0 &lt;= c &lt; C.</span></span><br><span class="line"><span class="string">    - X_val: A numpy array of shape (N_val, D) giving validation data.</span></span><br><span class="line"><span class="string">    - y_val: A numpy array of shape (N_val,) giving validation labels.</span></span><br><span class="line"><span class="string">    - learning_rate: Scalar giving learning rate for optimization.</span></span><br><span class="line"><span class="string">    - learning_rate_decay: Scalar giving factor used to decay the learning rate</span></span><br><span class="line"><span class="string">      after each epoch.</span></span><br><span class="line"><span class="string">    - reg: Scalar giving regularization strength.</span></span><br><span class="line"><span class="string">    - num_iters: Number of steps to take when optimizing.</span></span><br><span class="line"><span class="string">    - batch_size: Number of training examples to use per step.</span></span><br><span class="line"><span class="string">    - verbose: boolean; if true print progress during optimization.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        num_train = X.shape[<span class="number">0</span>]</span><br><span class="line">        iterations_per_epoch = max(num_train / batch_size, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Use SGD to optimize the parameters in self.model</span></span><br><span class="line">        loss_history = []</span><br><span class="line">        train_acc_history = []</span><br><span class="line">        val_acc_history = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> it <span class="keyword">in</span> xrange(num_iters):</span><br><span class="line">            </span><br><span class="line">            X_batch = <span class="literal">None</span></span><br><span class="line">            y_batch = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#########################################################################</span></span><br><span class="line">      <span class="comment"># <span class="doctag">TODO:</span> Create a random minibatch of training data and labels, storing  #</span></span><br><span class="line">      <span class="comment"># them in X_batch and y_batch respectively.                             #</span></span><br><span class="line">      <span class="comment">#########################################################################</span></span><br><span class="line">            choice_index = np.random.choice(num_train, batch_size)</span><br><span class="line">            X_batch = X[choice_index]</span><br><span class="line">            y_batch = y[choice_index]</span><br><span class="line">      </span><br><span class="line">      <span class="comment">#########################################################################</span></span><br><span class="line">      <span class="comment">#                             END OF YOUR CODE                          #</span></span><br><span class="line">      <span class="comment">#########################################################################</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Compute loss and gradients using the current minibatch</span></span><br><span class="line">            loss, grads = self.loss(X_batch, y=y_batch, reg=reg)</span><br><span class="line">            loss_history.append(loss)</span><br><span class="line"></span><br><span class="line">      <span class="comment">#########################################################################</span></span><br><span class="line">      <span class="comment"># <span class="doctag">TODO:</span> Use the gradients in the grads dictionary to update the         #</span></span><br><span class="line">      <span class="comment"># parameters of the network (stored in the dictionary self.params)      #</span></span><br><span class="line">      <span class="comment"># using stochastic gradient descent. You'll need to use the gradients   #</span></span><br><span class="line">      <span class="comment"># stored in the grads dictionary defined above.                         #</span></span><br><span class="line">      <span class="comment">#########################################################################</span></span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> self.params:</span><br><span class="line">                </span><br><span class="line">            </span><br><span class="line">                self.params[key] -= learning_rate * grads[key]</span><br><span class="line">      </span><br><span class="line">      <span class="comment">#########################################################################</span></span><br><span class="line">      <span class="comment">#                             END OF YOUR CODE                          #</span></span><br><span class="line">      <span class="comment">#########################################################################</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> verbose <span class="keyword">and</span> it % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">                </span><br><span class="line">                print(<span class="string">'iteration %d / %d: loss %f'</span> % (it, num_iters, loss))</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Every epoch, check train and val accuracy and decay learning rate.</span></span><br><span class="line">            <span class="keyword">if</span> it % iterations_per_epoch == <span class="number">0</span>:</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># Check accuracy</span></span><br><span class="line">                train_acc = (self.predict(X_batch) == y_batch).mean()</span><br><span class="line">                val_acc = (self.predict(X_val) == y_val).mean()</span><br><span class="line">                train_acc_history.append(train_acc)</span><br><span class="line">                val_acc_history.append(val_acc)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Decay learning rate</span></span><br><span class="line">                learning_rate *= learning_rate_decay</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="string">'loss_history'</span>: loss_history,</span><br><span class="line">      <span class="string">'train_acc_history'</span>: train_acc_history,</span><br><span class="line">      <span class="string">'val_acc_history'</span>: val_acc_history,</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, X)</span>:</span></span><br><span class="line">        </span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">    Use the trained weights of this two-layer network to predict labels for</span></span><br><span class="line"><span class="string">    data points. For each data point we predict scores for each of the C</span></span><br><span class="line"><span class="string">    classes, and assign each data point to the class with the highest score.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Inputs:</span></span><br><span class="line"><span class="string">    - X: A numpy array of shape (N, D) giving N D-dimensional data points to</span></span><br><span class="line"><span class="string">      classify.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    - y_pred: A numpy array of shape (N,) giving predicted labels for each of</span></span><br><span class="line"><span class="string">      the elements of X. For all i, y_pred[i] = c means that X[i] is predicted</span></span><br><span class="line"><span class="string">       to have class c, where 0 &lt;= c &lt; C.</span></span><br><span class="line"><span class="string">       """</span></span><br><span class="line">        y_pred = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> Implement this function; it should be VERY simple!                #</span></span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">        y_pred = np.argmax(self.loss(X), axis=<span class="number">1</span>)</span><br><span class="line">  </span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line">    <span class="comment">#                              END OF YOUR CODE                           #</span></span><br><span class="line">    <span class="comment">###########################################################################</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> y_pred</span><br></pre></td></tr></table></figure>
<h4 id="Checking"><a href="#Checking" class="headerlink" title="Checking"></a>Checking</h4><p>Now you can go to two_layer_net.ipynb to train your model, but before it you should check the algorithm you create to see whether it is correct. We use a simple dataset to check. </p>
<p><img src="/2020/02/18/Neural-Net/1582003562296.png" alt="1582003562296"></p>
<p><img src="/2020/02/18/Neural-Net/1582003592110.png" alt="1582003592110"></p>
<p><img src="/2020/02/18/Neural-Net/1582003605931.png" alt="1582003605931"></p>
<p><img src="/2020/02/18/Neural-Net/1582003620532.png" alt="1582003620532"></p>
<p><img src="/2020/02/18/Neural-Net/1582003637573.png" alt="1582003637573"></p>
<p>We can see that the loss and gradients we calculate using the algorithm we write have reach the requirements, so that we can go to the next step : training our model.</p>
<h4 id="Training-the-Model"><a href="#Training-the-Model" class="headerlink" title="Training the Model"></a>Training the Model</h4><p>First, we just set those parameters randomly and you can see that the validation accuracy is very low. </p>
<p><img src="/2020/02/18/Neural-Net/1582003790638.png" alt="1582003790638"></p>
<p><img src="/2020/02/18/Neural-Net/1582003850830.png" alt="1582003850830"></p>
<p><img src="/2020/02/18/Neural-Net/1582003872346.png" alt="1582003872346"></p>
<p><strong>What’s wrong?</strong>. Looking at the visualizations above, we see that the loss is decreasing more or less linearly, which seems to suggest that the learning rate may be too low. Moreover, there is no gap between the training and validation accuracy, suggesting that the model we used has low capacity, and that we should increase its size. On the other hand, with a very large model we would expect to see more overfitting, which would manifest itself as a very large gap between the training and validation accuracy.</p>
<p> <strong>Tuning</strong>. Tuning the hyperparameters and developing intuition for how they affect the final performance is a large part of using Neural Networks, so we want  to get a lot of practice. Below,we should experiment with different values of the various hyperparameters, including hidden layer size, learning rate, number of training epochs, and regularization strength. You might also consider tuning the learning rate decay, but you should be able to get good performance using the default value.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">best_net = <span class="literal">None</span> <span class="comment"># store the best model into this </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Tune hyperparameters using the validation set. Store your best trained  #</span></span><br><span class="line"><span class="comment"># model in best_net.                                                            #</span></span><br><span class="line"><span class="comment">#                                                                               #</span></span><br><span class="line"><span class="comment"># To help debug your network, it may help to use visualizations similar to the  #</span></span><br><span class="line"><span class="comment"># ones we used above; these visualizations will have significant qualitative    #</span></span><br><span class="line"><span class="comment"># differences from the ones we saw above for the poorly tuned network.          #</span></span><br><span class="line"><span class="comment">#                                                                               #</span></span><br><span class="line"><span class="comment"># Tweaking hyperparameters by hand can be fun, but you might find it useful to  #</span></span><br><span class="line"><span class="comment"># write code to sweep through possible combinations of hyperparameters          #</span></span><br><span class="line"><span class="comment"># automatically like we did on the previous exercises.                          #</span></span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">learning_rate = [<span class="number">0.9e-3</span>,<span class="number">1e-3</span>,<span class="number">1.1e-3</span>]</span><br><span class="line">hlsize = [<span class="number">80</span>,<span class="number">100</span>,<span class="number">120</span>, <span class="number">150</span>,<span class="number">180</span>]</span><br><span class="line">reg_strengths = [<span class="number">0.1</span>, <span class="number">0.15</span>,<span class="number">0.05</span>]</span><br><span class="line">learning_rate_decay = []</span><br><span class="line">best_val = <span class="number">-1</span></span><br><span class="line">results = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> h_i <span class="keyword">in</span> hlsize:</span><br><span class="line">    <span class="keyword">for</span> lr_i <span class="keyword">in</span> learning_rate:</span><br><span class="line">        <span class="keyword">for</span> rs_i <span class="keyword">in</span> reg_strengths:</span><br><span class="line">            net = TwoLayerNet(input_size, h_i, num_classes)</span><br><span class="line">            net.train(X_train, y_train, X_val, y_val, num_iters=<span class="number">2000</span>, batch_size=<span class="number">200</span>,</span><br><span class="line">                learning_rate=lr_i, learning_rate_decay=<span class="number">0.95</span>,</span><br><span class="line">                reg=rs_i, verbose=<span class="literal">True</span>)</span><br><span class="line">            y_train_pred = net.predict(X_train)</span><br><span class="line">            y_val_pred = net.predict(X_val)</span><br><span class="line">            y_train_acc = np.mean(y_train == y_train_pred)</span><br><span class="line">            y_val_acc = np.mean(y_val == y_val_pred)</span><br><span class="line">            results[(lr_i, rs_i)] = y_train_acc , y_val_acc</span><br><span class="line">            <span class="keyword">if</span> y_val_acc &gt; best_val:</span><br><span class="line">                best_val = y_val_acc</span><br><span class="line">                best_net = net</span><br><span class="line"></span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line"><span class="comment">#                               END OF YOUR CODE                                #</span></span><br><span class="line"><span class="comment">#################################################################################</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/18/Neural-Net/1582003979640.png" alt="1582003979640"></p>
<p>Finally, we get the 0.528 test accuracy. Consequently, the parameters of neural network are very crucial for its performance. Getting the best parameters can take a long time for you should change them every time based on the last performance. When you get the best or near best parameters, the neural network can greatly improve the accuracy.</p>
<p><img src="/2020/02/18/Neural-Net/1582004046620.png" alt="1582004046620"></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Softmax</title>
    <url>/2020/02/16/Softmax/</url>
    <content><![CDATA[<h4 id="Problem-Overview"><a href="#Problem-Overview" class="headerlink" title="Problem Overview"></a>Problem Overview</h4><p>In this part, we will try to understand the idea of Softmax classifier and use this algorithm for the picture classification and see the difference between Softmax and SVM. To be more specific, we will solve the problems below:</p>
<ul>
<li>implement a fully-vectorized <strong>loss function</strong> for the Softmax classifier</li>
<li>implement the fully-vectorized expression for its <strong>analytic gradient</strong></li>
<li><strong>check your implementation</strong> with numerical gradient</li>
<li>use a validation set to <strong>tune the learning rate and regularization</strong> strength</li>
<li><strong>optimize</strong> the loss function with <strong>SGD</strong></li>
<li><strong>visualize</strong> the final learned weights</li>
</ul>
<p>Actually, this exercise is quit analogous to the SVM exercise. The most different is the loss function of Softmax. Now, we are going to have a clear idea of Softmax first and then realize the algorithm with the code. </p>
<h4 id="Softmax-Explaintion"><a href="#Softmax-Explaintion" class="headerlink" title="Softmax Explaintion"></a>Softmax Explaintion</h4><p>In SVM, we use hinge loss as its loss function, which treats scores for each class. Now, for Softmax, we not only have to get the scores for each class, but also need to normalize them and finally obtain the probabilities of each class. The loss function we use here is cross-entropy loss:</p>
<p><img src="/2020/02/16/Softmax/1581826848602.png" alt="1581826848602"></p>
<p><img src="/2020/02/16/Softmax/1581826764671.png" alt="1581826764671"></p>
<p>To be honest, the calculation of cross-entropy loss is easier than hinge loss. There are no other limited  conditions and it is more straightforward. But the only thing you should pay attention to is the numerical stability. Notice that the scores for each class may be huge numbers and the exp(f) can be very large so that dividing large numbers can be unstable. When I first did this problem I did not take care of this issue and the loss I got is very large and is not closed to -log(0.1). Then I changed my algorithm by adding a constant C to eliminate the instability.  </p>
<p><img src="/2020/02/16/Softmax/1581827688934.png" alt="1581827688934"></p>
<p>A common choice for C is to set log C = -max(f). This will simply states that we should shift the value inside the vector f so that the highest value is zero, so that the exp(f) will not be very large. </p>
<p>The most troublesome problem is the calculation of dW. I have gone through many troubles because of unfamiliarity with matrix derivative.  Using the chain rule and flexible matrix derivate will simplify the calculation, which makes it easy to code. I have searched other people’s method for this problem and I clearly know how it works. </p>
<p><img src="/2020/02/16/Softmax/1581828245723.png" alt="1581828245723"></p>
<p><img src="/2020/02/16/Softmax/1581828320014.png" alt="1581828320014"></p>
<p><img src="/2020/02/16/Softmax/1581828939035.png" alt="1581828939035"></p>
<p><img src="/2020/02/16/Softmax/1581828963231.png" alt="1581828963231"></p>
<p>Then we can easily obtain dW using this method. Here is the code:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle</span><br><span class="line"><span class="keyword">from</span> past.builtins <span class="keyword">import</span> xrange</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">softmax_loss_naive</span><span class="params">(W, X, y, reg)</span>:</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">  Softmax loss function, naive implementation (with loops)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Inputs have dimension D, there are C classes, and we operate on minibatches</span></span><br><span class="line"><span class="string">  of N examples.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Inputs:</span></span><br><span class="line"><span class="string">  - W: A numpy array of shape (D, C) containing weights.</span></span><br><span class="line"><span class="string">  - X: A numpy array of shape (N, D) containing a minibatch of data.</span></span><br><span class="line"><span class="string">  - y: A numpy array of shape (N,) containing training labels; y[i] = c means</span></span><br><span class="line"><span class="string">    that X[i] has label c, where 0 &lt;= c &lt; C.</span></span><br><span class="line"><span class="string">  - reg: (float) regularization strength</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Returns a tuple of:</span></span><br><span class="line"><span class="string">  - loss as single float</span></span><br><span class="line"><span class="string">  - gradient with respect to weights W; an array of same shape as W</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">  <span class="comment"># Initialize the loss and gradient to zero.</span></span><br><span class="line">    </span><br><span class="line">    loss = <span class="number">0.0</span></span><br><span class="line">    dW = np.zeros_like(W)</span><br><span class="line"></span><br><span class="line">  <span class="comment">#############################################################################</span></span><br><span class="line">  <span class="comment"># <span class="doctag">TODO:</span> Compute the softmax loss and its gradient using explicit loops.     #</span></span><br><span class="line">  <span class="comment"># Store the loss in loss and the gradient in dW. If you are not careful     #</span></span><br><span class="line">  <span class="comment"># here, it is easy to run into numeric instability. Don't forget the        #</span></span><br><span class="line">  <span class="comment"># regularization!                                                           #</span></span><br><span class="line">  <span class="comment">#############################################################################</span></span><br><span class="line">    num_classes = W.shape[<span class="number">1</span>]</span><br><span class="line">    num_train = X.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(num_train):</span><br><span class="line">        </span><br><span class="line">        scores = X[i].dot(W)</span><br><span class="line">        scores -= np.max(scores)</span><br><span class="line">        correct_score = scores[y[i]]</span><br><span class="line">        sum_scores = np.sum(np.exp(scores))</span><br><span class="line">        loss += np.log(sum_scores) - correct_score</span><br><span class="line">        dW[:,y[i]] -= X[i].T </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(num_classes):</span><br><span class="line">            </span><br><span class="line">            dW[:,j] += (np.exp(scores[j])/sum_scores * X[i]).T</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    loss /= num_train</span><br><span class="line">    loss += reg*np.sum(W*W)</span><br><span class="line">    dW /= num_train</span><br><span class="line">    dW += <span class="number">2</span>*reg*W</span><br><span class="line">            </span><br><span class="line">  </span><br><span class="line">  <span class="comment">#############################################################################</span></span><br><span class="line">  <span class="comment">#                          END OF YOUR CODE                                 #</span></span><br><span class="line">  <span class="comment">#############################################################################</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> loss, dW</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">softmax_loss_vectorized</span><span class="params">(W, X, y, reg)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">  Softmax loss function, vectorized version.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Inputs and outputs are the same as softmax_loss_naive.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">  <span class="comment"># Initialize the loss and gradient to zero.</span></span><br><span class="line">    </span><br><span class="line">    loss = <span class="number">0.0</span></span><br><span class="line">    dW = np.zeros_like(W)</span><br><span class="line"></span><br><span class="line">  <span class="comment">#############################################################################</span></span><br><span class="line">  <span class="comment"># <span class="doctag">TODO:</span> Compute the softmax loss and its gradient using no explicit loops.  #</span></span><br><span class="line">  <span class="comment"># Store the loss in loss and the gradient in dW. If you are not careful     #</span></span><br><span class="line">  <span class="comment"># here, it is easy to run into numeric instability. Don't forget the        #</span></span><br><span class="line">  <span class="comment"># regularization!                                                           #</span></span><br><span class="line">  <span class="comment">#############################################################################</span></span><br><span class="line">    num_train = X.shape[<span class="number">0</span>]</span><br><span class="line">    scores = X.dot(W)</span><br><span class="line">    scores -= np.max(scores, axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>)</span><br><span class="line">    correct_scores = scores[np.arange(num_train),y]</span><br><span class="line">    pro_scores = np.exp(scores)/ np.sum(np.exp(scores), axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>)</span><br><span class="line">    loss += -np.sum(np.log(pro_scores[np.arange(num_train),y]))</span><br><span class="line">    </span><br><span class="line">    pro_scores[np.arange(num_train),y] += <span class="number">-1</span> </span><br><span class="line">    dW += X.T.dot(pro_scores)</span><br><span class="line">    </span><br><span class="line">    loss /= num_train</span><br><span class="line">    dW /= num_train</span><br><span class="line">    </span><br><span class="line">    loss += reg*np.sum(W*W)</span><br><span class="line">    dW += <span class="number">2</span>*reg*W</span><br><span class="line">    </span><br><span class="line">  <span class="comment">#############################################################################</span></span><br><span class="line">  <span class="comment">#                          END OF YOUR CODE                                 #</span></span><br><span class="line">  <span class="comment">#############################################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> loss, dW</span><br></pre></td></tr></table></figure>
<h4 id="Check-You-Code"><a href="#Check-You-Code" class="headerlink" title="Check You Code"></a>Check You Code</h4><p>Just like the SVM exercise, you can use the method provided to check your code. Before it you have to load the data. As it is the same with SVM, I am not going to show it here and turn to the checking process directly.</p>
<p>Check the loss: the loss you calculate should be close to 2.302585, if not check you algorithm. </p>
<p><img src="/2020/02/16/Softmax/1581829212177.png" alt="1581829212177"></p>
<p>Check the gradient: numerical gradient and analytical gradient should be very close. </p>
<p><img src="/2020/02/16/Softmax/1581829307591.png" alt="1581829307591"></p>
<p>Then you can see the running time of using naive method and vetorized method. </p>
<p><img src="/2020/02/16/Softmax/1581829383085.png" alt="1581829383085"></p>
<h4 id="Cross-Validation-Getting-the-Best-Model"><a href="#Cross-Validation-Getting-the-Best-Model" class="headerlink" title="Cross Validation: Getting the Best Model"></a>Cross Validation: Getting the Best Model</h4><p>Finally, if all processes have been done successfully, which means the algorithm you write is correctly, then you can go to next step: training your model by using cross validation. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use the validation set to tune hyperparameters (regularization strength and</span></span><br><span class="line"><span class="comment"># learning rate). You should experiment with different ranges for the learning</span></span><br><span class="line"><span class="comment"># rates and regularization strengths; if you are careful you should be able to</span></span><br><span class="line"><span class="comment"># get a classification accuracy of over 0.35 on the validation set.</span></span><br><span class="line"><span class="keyword">from</span> cs231n.classifiers <span class="keyword">import</span> Softmax</span><br><span class="line">results = &#123;&#125;</span><br><span class="line">best_val = <span class="number">-1</span></span><br><span class="line">best_softmax = <span class="literal">None</span></span><br><span class="line">learning_rates = [<span class="number">1e-7</span>, <span class="number">1.2e-7</span>,<span class="number">1.4e-7</span>,<span class="number">1.6e-7</span>,<span class="number">1.8e-7</span>,<span class="number">2.0e-7</span>]</span><br><span class="line">regularization_strengths = [<span class="number">2.5e4</span>, <span class="number">2.7e4</span>,<span class="number">2.9e4</span>,<span class="number">3.1e4</span>,<span class="number">3.3e4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span>                                                                        #</span></span><br><span class="line"><span class="comment"># Use the validation set to set the learning rate and regularization strength. #</span></span><br><span class="line"><span class="comment"># This should be identical to the validation that you did for the SVM; save    #</span></span><br><span class="line"><span class="comment"># the best trained softmax classifer in best_softmax.                          #</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="keyword">for</span> lr_i <span class="keyword">in</span> learning_rates:</span><br><span class="line">    <span class="keyword">for</span> rs_i <span class="keyword">in</span> regularization_strengths:</span><br><span class="line">        softmax = Softmax()</span><br><span class="line">        softmax.train(X_train, y_train, learning_rate=lr_i, reg=rs_i,num_iters=<span class="number">500</span>, verbose=<span class="literal">True</span>)</span><br><span class="line">        y_train_pred = softmax.predict(X_train)</span><br><span class="line">        y_val_pred = softmax.predict(X_val)</span><br><span class="line">        y_train_acc = np.mean(y_train == y_train_pred)</span><br><span class="line">        y_val_acc = np.mean(y_val == y_val_pred)</span><br><span class="line">        results[(lr_i, rs_i)] = y_train_acc , y_val_acc</span><br><span class="line">        <span class="keyword">if</span> y_val_acc &gt; best_val:</span><br><span class="line">            best_val = y_val_acc</span><br><span class="line">            best_softmax =softmax</span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#                              END OF YOUR CODE                                #</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># Print out results.</span></span><br><span class="line"><span class="keyword">for</span> lr, reg <span class="keyword">in</span> sorted(results):</span><br><span class="line">    train_accuracy, val_accuracy = results[(lr, reg)]</span><br><span class="line">    print(<span class="string">'lr %e reg %e train accuracy: %f val accuracy: %f'</span> % (</span><br><span class="line">                lr, reg, train_accuracy, val_accuracy))</span><br><span class="line">    </span><br><span class="line">print(<span class="string">'best validation accuracy achieved during cross-validation: %f'</span> % best_val)</span><br></pre></td></tr></table></figure>
<p>Then use the best model to predict the testing data. </p>
<p><img src="/2020/02/16/Softmax/1581829600085.png" alt="1581829600085"></p>
<p><img src="/2020/02/16/Softmax/1581829619119.png" alt="1581829619119"></p>
<h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><p>As we can see, using softmax performs not as well as SVM in this problem. The distinction between them can be shown by a graph below:</p>
<p><img src="/2020/02/16/Softmax/1581829896775.png" alt="1581829896775"></p>
<p>The Softmax classifier is never fully happy with the scores it produces: the correct class could always have a higher probability and the incorrect classes always a lower probability and the loss would always get better. However, the SVM is happy once the margins are satisfied and it does not micromanage the exact scores beyond this constraint.</p>
]]></content>
  </entry>
  <entry>
    <title>SVM</title>
    <url>/2020/02/14/SVM/</url>
    <content><![CDATA[<h4 id="Problem-Overview"><a href="#Problem-Overview" class="headerlink" title="Problem Overview"></a>Problem Overview</h4><p>In assignment1, the second problem is using SVM to classify the pictures. To be more specific, we have to finish questions below:</p>
<ul>
<li>implement a fully-vectorized <strong>loss function</strong> for the SVM</li>
<li>implement the fully-vectorized expression for its <strong>analytic gradient</strong></li>
<li><strong>check your implementation</strong> using numerical gradient</li>
<li>use a validation set to <strong>tune the learning rate and regularization</strong> strength</li>
<li><strong>optimize</strong> the loss function with <strong>SGD</strong></li>
<li><strong>visualize</strong> the final learned weights</li>
</ul>
<p>In this part, the most important is the SVM algorithm. Note that there are up to 10 categories of the pictures, it is unrealistic to use two-classes SVM. In two-classes SVM, we need a line with maximum margin to separate two classes. The basic model is like that: </p>
<p><img src="/2020/02/14/SVM/12.png" alt="12"></p>
<p><img src="/2020/02/14/SVM/1581650269438.png" alt="1581650269438"> </p>
<p>For multiclass classification, we obviously need a different algorithm for SVM. If you have watched the course online, you basically know that Multiclass SVM uses Hinge loss for loss function. Next, I will illustrate it in details and give the code.</p>
<h4 id="Multiclass-Support-Vector-Machine"><a href="#Multiclass-Support-Vector-Machine" class="headerlink" title="Multiclass Support Vector Machine"></a>Multiclass Support Vector Machine</h4><p>Similar to two-classes SVM, the main idea of Multiclass SVM is also to find a hyperplane to separate different categories. Unlike the two-classes SVM(the hyperplane is a line), the Multiclass SVM has a more than two dimensional hyperplane. Thus, the function of the hyperplane is:</p>
<p><img src="/2020/02/14/SVM/1581651442942.png" alt="1581651442942"></p>
<p>where xi and W is more than two dimensional. That is why SVM is also a linear classifier. </p>
<p>The loss function that Multiclass SVM uses is hinge loss. </p>
<p><img src="/2020/02/14/SVM/1581651848316.png" alt="1581651848316"></p>
<p>where Δ is a fixed margin, and it is helpful to decide which is correctly classified. Because we want the score of correctly classified data is greater than those incorrectly classified. In this problem we set Δ to 1.  </p>
<p><img src="/2020/02/14/SVM/1581651765041.png" alt="1581651765041"></p>
<p>To avoid overfitting, we add a regularization loss to the loss function. Then the ultimate loss function is :</p>
<p><img src="/2020/02/14/SVM/1581652469289.png" alt="1581652469289"></p>
<p>For this loss function, we use gradient descent to find the W with the least loss, so that we can obtain the hyperplane. The code of the algorithm is below. The most difficult part for me is the calculation of dW, which needs the knowledge of matrix derivative. For more detail information, you can click the link: <a href="https://en.wikipedia.org/wiki/Matrix_calculus" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Matrix_calculus</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle</span><br><span class="line"><span class="keyword">from</span> past.builtins <span class="keyword">import</span> xrange</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">svm_loss_naive</span><span class="params">(W, X, y, reg)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Structured SVM loss function, naive implementation (with loops).</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">    Inputs have dimension D, there are C classes, and we operate on minibatches</span></span><br><span class="line"><span class="string">    of N examples.</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">    Inputs:</span></span><br><span class="line"><span class="string">    - W: A numpy array of shape (D, C) containing weights.</span></span><br><span class="line"><span class="string">    - X: A numpy array of shape (N, D) containing a minibatch of data.</span></span><br><span class="line"><span class="string">    - y: A numpy array of shape (N,) containing training labels; y[i] = c means</span></span><br><span class="line"><span class="string">      that X[i] has label c, where 0 &lt;= c &lt; C.</span></span><br><span class="line"><span class="string">    - reg: (float) regularization strength</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">    Returns a tuple of:</span></span><br><span class="line"><span class="string">    - loss as single float</span></span><br><span class="line"><span class="string">    - gradient with respect to weights W; an array of same shape as W</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    dW = np.zeros(W.shape)  <span class="comment"># initialize the gradient as zero</span></span><br><span class="line">    <span class="comment"># compute the loss and the gradient</span></span><br><span class="line">    num_classes = W.shape[<span class="number">1</span>]</span><br><span class="line">    num_train = X.shape[<span class="number">0</span>]</span><br><span class="line">    loss = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(num_train):</span><br><span class="line">        scores = X[i].dot(W)</span><br><span class="line">        correct_class_score = scores[y[i]]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(num_classes):</span><br><span class="line">            <span class="keyword">if</span> j == y[i]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            margin = scores[j] - correct_class_score + <span class="number">1</span>  <span class="comment"># note delta = 1</span></span><br><span class="line">            <span class="keyword">if</span> margin &gt; <span class="number">0</span>:</span><br><span class="line">                loss += margin</span><br><span class="line">                dW[:, y[i]] += -X[i].T</span><br><span class="line">                dW[:, j] += X[i].T</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Right now the loss is a sum over all training examples, but we want it</span></span><br><span class="line">    <span class="comment"># to be an average instead so we divide by num_train.</span></span><br><span class="line">    loss /= num_train</span><br><span class="line">    dW /= num_train</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Add regularization to the loss.</span></span><br><span class="line">    loss += reg * np.sum(W * W)</span><br><span class="line">    dW += <span class="number">2</span>*reg * W</span><br><span class="line"></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>                                                                     #</span></span><br><span class="line">    <span class="comment"># Compute the gradient of the loss function and store it dW.                #</span></span><br><span class="line">    <span class="comment"># Rather that first computing the loss and then computing the derivative,   #</span></span><br><span class="line">    <span class="comment"># it may be simpler to compute the derivative at the same time that the     #</span></span><br><span class="line">    <span class="comment"># loss is being computed. As a result you may need to modify some of the    #</span></span><br><span class="line">    <span class="comment"># code above to compute the gradient.                                       #</span></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> loss, dW</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">svm_loss_vectorized</span><span class="params">(W, X, y, reg)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Structured SVM loss function, vectorized implementation.</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">    Inputs and outputs are the same as svm_loss_naive.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    loss = <span class="number">0.0</span></span><br><span class="line">    dW = np.zeros(W.shape)  <span class="comment"># initialize the gradient as zero</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>                                                                     #</span></span><br><span class="line">    <span class="comment"># Implement a vectorized version of the structured SVM loss, storing the    #</span></span><br><span class="line">    <span class="comment"># result in loss.                                                           #</span></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line">    scores = X.dot(W)</span><br><span class="line">    num_train = X.shape[<span class="number">0</span>]</span><br><span class="line">    margins = np.maximum(<span class="number">0</span>, (scores - np.reshape(scores[np.arange(num_train), y],(num_train,<span class="number">-1</span>)) + <span class="number">1</span>))</span><br><span class="line">    margins[np.arange(num_train), y] = <span class="number">0</span></span><br><span class="line">    loss += np.sum(margins) / num_train</span><br><span class="line">    loss += reg * np.sum(W * W)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line">    <span class="comment">#                             END OF YOUR CODE                              #</span></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>                                                                     #</span></span><br><span class="line">    <span class="comment"># Implement a vectorized version of the gradient for the structured SVM     #</span></span><br><span class="line">    <span class="comment"># loss, storing the result in dW.                                           #</span></span><br><span class="line">    <span class="comment">#                                                                           #</span></span><br><span class="line">    <span class="comment"># Hint: Instead of computing the gradient from scratch, it may be easier    #</span></span><br><span class="line">    <span class="comment"># to reuse some of the intermediate values that you used to compute the     #</span></span><br><span class="line">    <span class="comment"># loss.                                                                     #</span></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line">    margins[margins &gt; <span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    num_minus = np.sum(margins, axis=<span class="number">1</span>)</span><br><span class="line">    margins[np.arange(num_train), y] = -num_minus</span><br><span class="line">    dW = X.T.dot(margins) / num_train + <span class="number">2</span> * reg * W</span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line">    <span class="comment">#                             END OF YOUR CODE                              #</span></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> loss, dW</span><br></pre></td></tr></table></figure>
<p>After finish the code of SVM, you can turn to svm.ipynb file to test your algorithm and do the further exercises. </p>
<h4 id="Checking-your-Code"><a href="#Checking-your-Code" class="headerlink" title="Checking your Code"></a>Checking your Code</h4><p>The idea of debugging the code is based on numerical estimate and analytical estimate. Before you start the word, you should load the data and preprocess it. </p>
<p><img src="/2020/02/14/SVM/1581653437812.png" alt="1581653437812"></p>
<p><img src="/2020/02/14/SVM/1581653462776.png" alt="1581653462776"></p>
<p><img src="/2020/02/14/SVM/1581653476956.png" alt="1581653476956"></p>
<p><img src="/2020/02/14/SVM/Users\zhong201707030308\AppData\Roaming\Typora\typora-user-images\1581653495267.png" alt="1581653495267"></p>
<p><img src="/2020/02/14/SVM/1581653546323.png" alt="1581653546323"></p>
<p><img src="/2020/02/14/SVM/1581653560001.png" alt="1581653560001"></p>
<p><img src="/2020/02/14/SVM/1581653577111.png" alt="1581653577111"></p>
<p>Then you can use the algorithm to calculate the loss and dW. As the graph shown below, the error between numerical estimate and analytical estimate is very low, so we can believe that our algorithm is ok. </p>
<p><img src="/2020/02/14/SVM/1581653628627.png" alt="1581653628627"></p>
<p><img src="/2020/02/14/SVM/1581653643802.png" alt="1581653643802"></p>
<p><img src="/2020/02/14/SVM/1581653654946.png" alt="1581653654946"></p>
<p>Remember that we use two way to calculate loss and dW : with loops and without loops. It is obvious the latter is more efficient. We can check it by observing the running time. </p>
<p><img src="/2020/02/14/SVM/1581654019461.png" alt="1581654019461"></p>
<p><img src="/2020/02/14/SVM/1581654031173.png" alt="1581654031173"></p>
<h4 id="Training-the-Model"><a href="#Training-the-Model" class="headerlink" title="Training the Model"></a>Training the Model</h4><p>The training dataset is so large(49000), so if we use the normal way to calculate loss and dW, it will take a long time. The strategy we use here is SGD( Randomly select a small part of the data to get the loss and dW.) which is more effective. You need to modify some code in linear_classifier.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> cs231n.classifiers.linear_svm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> cs231n.classifiers.softmax <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> past.builtins <span class="keyword">import</span> xrange</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinearClassifier</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.W = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(self, X, y, learning_rate=<span class="number">1e-3</span>, reg=<span class="number">1e-5</span>, num_iters=<span class="number">100</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              batch_size=<span class="number">200</span>, verbose=False)</span>:</span></span><br><span class="line">        </span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Train this linear classifier using stochastic gradient descent.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        Inputs:</span></span><br><span class="line"><span class="string">        - X: A numpy array of shape (N, D) containing training data; there are N</span></span><br><span class="line"><span class="string">          training samples each of dimension D.</span></span><br><span class="line"><span class="string">        - y: A numpy array of shape (N,) containing training labels; y[i] = c</span></span><br><span class="line"><span class="string">          means that X[i] has label 0 &lt;= c &lt; C for C classes.</span></span><br><span class="line"><span class="string">        - learning_rate: (float) learning rate for optimization.</span></span><br><span class="line"><span class="string">        - reg: (float) regularization strength.</span></span><br><span class="line"><span class="string">        - num_iters: (integer) number of steps to take when optimizing</span></span><br><span class="line"><span class="string">        - batch_size: (integer) number of training examples to use at each step.</span></span><br><span class="line"><span class="string">        - verbose: (boolean) If true, print progress during optimization.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        Outputs:</span></span><br><span class="line"><span class="string">        A list containing the value of the loss function at each training iteration.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        num_train, dim = X.shape</span><br><span class="line">        num_classes = np.max(y) + <span class="number">1</span>  <span class="comment"># assume y takes values 0...K-1 where K is number of classes</span></span><br><span class="line">        <span class="keyword">if</span> self.W <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># lazily initialize W</span></span><br><span class="line">            self.W = <span class="number">0.001</span> * np.random.randn(dim, num_classes)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Run stochastic gradient descent to optimize W</span></span><br><span class="line">        loss_history = []</span><br><span class="line">        <span class="keyword">for</span> it <span class="keyword">in</span> xrange(num_iters):</span><br><span class="line">            </span><br><span class="line">            X_batch = <span class="literal">None</span></span><br><span class="line">            y_batch = <span class="literal">None</span></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="comment">#########################################################################</span></span><br><span class="line">            <span class="comment"># <span class="doctag">TODO:</span>                                                                 #</span></span><br><span class="line">            <span class="comment"># Sample batch_size elements from the training data and their           #</span></span><br><span class="line">            <span class="comment"># corresponding labels to use in this round of gradient descent.        #</span></span><br><span class="line">            <span class="comment"># Store the data in X_batch and their corresponding labels in           #</span></span><br><span class="line">            <span class="comment"># y_batch; after sampling X_batch should have shape (dim, batch_size)   #</span></span><br><span class="line">            <span class="comment"># and y_batch should have shape (batch_size,)                           #</span></span><br><span class="line">            <span class="comment">#                                                                       #</span></span><br><span class="line">            <span class="comment"># Hint: Use np.random.choice to generate indices. Sampling with         #</span></span><br><span class="line">            <span class="comment"># replacement is faster than sampling without replacement.              #</span></span><br><span class="line">            <span class="comment">#########################################################################</span></span><br><span class="line">            index_choice = np.random.choice(num_train, batch_size)</span><br><span class="line">            X_batch = X[index_choice]</span><br><span class="line">            y_batch = y[index_choice]</span><br><span class="line">            <span class="comment">#########################################################################</span></span><br><span class="line">            <span class="comment">#                       END OF YOUR CODE                                #</span></span><br><span class="line">            <span class="comment">#########################################################################</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># evaluate loss and gradient</span></span><br><span class="line">            loss, grad = self.loss(X_batch, y_batch, reg)</span><br><span class="line">            loss_history.append(loss)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># perform parameter update</span></span><br><span class="line">            <span class="comment">#########################################################################</span></span><br><span class="line">            <span class="comment"># <span class="doctag">TODO:</span>                                                                 #</span></span><br><span class="line">            <span class="comment"># Update the weights using the gradient and the learning rate.          #</span></span><br><span class="line">            <span class="comment">#########################################################################</span></span><br><span class="line">            self.W -= learning_rate*grad </span><br><span class="line">            <span class="comment">#########################################################################</span></span><br><span class="line">            <span class="comment">#                       END OF YOUR CODE                                #</span></span><br><span class="line">            <span class="comment">#########################################################################</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> verbose <span class="keyword">and</span> it % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">'iteration %d / %d: loss %f'</span> % (it, num_iters, loss))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> loss_history</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, X)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Use the trained weights of this linear classifier to predict labels for</span></span><br><span class="line"><span class="string">        data points.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        Inputs:</span></span><br><span class="line"><span class="string">        - X: A numpy array of shape (N, D) containing training data; there are N</span></span><br><span class="line"><span class="string">          training samples each of dimension D.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">        - y_pred: Predicted labels for the data in X. y_pred is a 1-dimensional</span></span><br><span class="line"><span class="string">          array of length N, and each element is an integer giving the predicted</span></span><br><span class="line"><span class="string">          class.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        y_pred = np.zeros(X.shape[<span class="number">0</span>])</span><br><span class="line">        <span class="comment">###########################################################################</span></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span>                                                                   #</span></span><br><span class="line">        <span class="comment"># Implement this method. Store the predicted labels in y_pred.            #</span></span><br><span class="line">        <span class="comment">###########################################################################</span></span><br><span class="line">        scores = X.dot(self.W)</span><br><span class="line">        y_pred = np.argmax(scores, axis=<span class="number">1</span>)</span><br><span class="line">        <span class="comment">###########################################################################</span></span><br><span class="line">        <span class="comment">#                           END OF YOUR CODE                              #</span></span><br><span class="line">        <span class="comment">###########################################################################</span></span><br><span class="line">        <span class="keyword">return</span> y_pred</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loss</span><span class="params">(self, X_batch, y_batch, reg)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Compute the loss function and its derivative. </span></span><br><span class="line"><span class="string">        Subclasses will override this.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        Inputs:</span></span><br><span class="line"><span class="string">        - X_batch: A numpy array of shape (N, D) containing a minibatch of N</span></span><br><span class="line"><span class="string">          data points; each point has dimension D.</span></span><br><span class="line"><span class="string">        - y_batch: A numpy array of shape (N,) containing labels for the minibatch.</span></span><br><span class="line"><span class="string">        - reg: (float) regularization strength.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        Returns: A tuple containing:</span></span><br><span class="line"><span class="string">        - loss as a single float</span></span><br><span class="line"><span class="string">        - gradient with respect to self.W; an array of the same shape as W</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinearSVM</span><span class="params">(LinearClassifier)</span>:</span></span><br><span class="line">    <span class="string">""" A subclass that uses the Multiclass SVM loss function """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loss</span><span class="params">(self, X_batch, y_batch, reg)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> svm_loss_vectorized(self.W, X_batch, y_batch, reg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Softmax</span><span class="params">(LinearClassifier)</span>:</span></span><br><span class="line">    <span class="string">""" A subclass that uses the Softmax + Cross-entropy loss function """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loss</span><span class="params">(self, X_batch, y_batch, reg)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> softmax_loss_vectorized(self.W, X_batch, y_batch, reg)</span><br></pre></td></tr></table></figure>
<p> Then, you can see the time it take to run the algorithm and the change of the loss. </p>
<p><img src="/2020/02/14/SVM/1581654617210.png" alt="1581654617210"></p>
<p><img src="/2020/02/14/SVM/1581654631673.png" alt="1581654631673"></p>
<p>Use the model to predict the data. The accuracy of validation is 0.38 which is higher than knn.</p>
<p><img src="/2020/02/14/SVM/1581655038395.png" alt="1581655038395"></p>
<p>The accuracy is related to learning rate and the regularization rate. Then we use cross validate to find the best learning rate and regularization rate. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use the validation set to tune hyperparameters (regularization strength and</span></span><br><span class="line"><span class="comment"># learning rate). You should experiment with different ranges for the learning</span></span><br><span class="line"><span class="comment"># rates and regularization strengths; if you are careful you should be able to</span></span><br><span class="line"><span class="comment"># get a classification accuracy of about 0.4 on the validation set.</span></span><br><span class="line">learning_rates = [<span class="number">1.31e-7</span>,<span class="number">1.33e-7</span>,<span class="number">1.35e-7</span>,<span class="number">1.37e-7</span>,<span class="number">1.38e-7</span>,<span class="number">1.4e-7</span>]</span><br><span class="line">regularization_strengths = [<span class="number">2.6e4</span>, <span class="number">2.63e4</span>,<span class="number">2.66e4</span>,<span class="number">2.69e4</span>,<span class="number">2.72e4</span>,<span class="number">2.75e4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># results is dictionary mapping tuples of the form</span></span><br><span class="line"><span class="comment"># (learning_rate, regularization_strength) to tuples of the form</span></span><br><span class="line"><span class="comment"># (training_accuracy, validation_accuracy). The accuracy is simply the fraction</span></span><br><span class="line"><span class="comment"># of data points that are correctly classified.</span></span><br><span class="line">results = &#123;&#125;</span><br><span class="line">best_val = <span class="number">-1</span>   <span class="comment"># The highest validation accuracy that we have seen so far.</span></span><br><span class="line">best_svm = <span class="literal">None</span> <span class="comment"># The LinearSVM object that achieved the highest validation rate.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span>                                                                        #</span></span><br><span class="line"><span class="comment"># Write code that chooses the best hyperparameters by tuning on the validation #</span></span><br><span class="line"><span class="comment"># set. For each combination of hyperparameters, train a linear SVM on the      #</span></span><br><span class="line"><span class="comment"># training set, compute its accuracy on the training and validation sets, and  #</span></span><br><span class="line"><span class="comment"># store these numbers in the results dictionary. In addition, store the best   #</span></span><br><span class="line"><span class="comment"># validation accuracy in best_val and the LinearSVM object that achieves this  #</span></span><br><span class="line"><span class="comment"># accuracy in best_svm.                                                        #</span></span><br><span class="line"><span class="comment">#                                                                              #</span></span><br><span class="line"><span class="comment"># Hint: You should use a small value for num_iters as you develop your         #</span></span><br><span class="line"><span class="comment"># validation code so that the SVMs don't take much time to train; once you are #</span></span><br><span class="line"><span class="comment"># confident that your validation code works, you should rerun the validation   #</span></span><br><span class="line"><span class="comment"># code with a larger value for num_iters.                                      #</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> lr_i <span class="keyword">in</span> learning_rates:</span><br><span class="line">    <span class="keyword">for</span> rs_i <span class="keyword">in</span> regularization_strengths:</span><br><span class="line">        svm = LinearSVM()</span><br><span class="line">        svm.train(X_train, y_train, learning_rate=lr_i, reg=rs_i,num_iters=<span class="number">1500</span>, verbose=<span class="literal">True</span>)</span><br><span class="line">        y_train_pred = svm.predict(X_train)</span><br><span class="line">        y_val_pred = svm.predict(X_val)</span><br><span class="line">        y_train_acc = np.mean(y_train == y_train_pred)</span><br><span class="line">        y_val_acc = np.mean(y_val == y_val_pred)</span><br><span class="line">        results[(lr_i, rs_i)] = y_train_acc , y_val_acc</span><br><span class="line">        <span class="keyword">if</span> y_val_acc &gt; best_val:</span><br><span class="line">            best_val = y_val_acc</span><br><span class="line">            best_svm = svm</span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#                              END OF YOUR CODE                                #</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># Print out results.</span></span><br><span class="line"><span class="keyword">for</span> lr, reg <span class="keyword">in</span> sorted(results):</span><br><span class="line">    train_accuracy, val_accuracy = results[(lr, reg)]</span><br><span class="line">    print(<span class="string">'lr %e reg %e train accuracy: %f val accuracy: %f'</span> % (</span><br><span class="line">                lr, reg, train_accuracy, val_accuracy))</span><br><span class="line">    </span><br><span class="line">print(<span class="string">'best validation accuracy achieved during cross-validation: %f'</span> % best_val)</span><br></pre></td></tr></table></figure>
<p>We can get the best validate accuracy is 0.394, then use the best model for testing and the accuracy is 0.371</p>
<p><img src="/2020/02/14/SVM/1581655455574.png" alt="1581655455574"></p>
<p><img src="/2020/02/14/SVM/1581655532270.png" alt="1581655532270"></p>
<p><img src="/2020/02/14/SVM/1581655545859.png" alt="1581655545859"></p>
<p><img src="/2020/02/14/SVM/1581655565773.png" alt="1581655565773"></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>KNN</title>
    <url>/2020/02/13/KNN/</url>
    <content><![CDATA[<h4 id="KNN"><a href="#KNN" class="headerlink" title="KNN"></a>KNN</h4><h5 id="KNN-Classifier"><a href="#KNN-Classifier" class="headerlink" title="KNN Classifier"></a>KNN Classifier</h5><p>In assignment1 the first question is K-Nearest Neighbor Classifier. You should open the classifiers file and write your code in the k_nearest_neighbor.py. </p>
<p>The first thing you should keep in mind is the idea of KNN. Let me give a brief of it. In our dataset, we often split the data into training data and testing data. In testing data, we do not know the value of the target variable(the variable we need to predict), while in training data, the target variable is given and we use this data to train our model. For KNN, we also need the training data to predict the target variable in the testing data. How to achieve this? We can understand it by the name of KNN. For example, now we have a testing data point and we need to know which categories it belongs to. And then we find k points which are near the testing point most. The way we decide the k points is by measuring the distance between the testing point and all training data points. After we get these k points and they all have their own categories, we can see the most common category in these points and the testing point belongs to this category. </p>
<p>The idea of KNN is quite straightforward. In conclusion, we just need three steps:</p>
<ol>
<li>Measuring the distance between testing data and training data.</li>
<li>For every testing data point, selecting nearsest k points. </li>
<li>In those k points, find the most common value of target variable and use it to predict the value of target variable for testing data.</li>
</ol>
<p>Knowing the idea of KNN, now we can code in the file. You can see that there are some instructions in the file, and you just need to follow them. </p>
<p>These code are already written for you and you just need to understand them. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> past.builtins <span class="keyword">import</span> xrange</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KNearestNeighbor</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="string">""" a kNN classifier with L2 distance """</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">     <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(self, X, y)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Train the classifier. For k-nearest neighbors this is just </span></span><br><span class="line"><span class="string">    memorizing the training data.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Inputs:</span></span><br><span class="line"><span class="string">    - X: A numpy array of shape (num_train, D) containing the training data</span></span><br><span class="line"><span class="string">    consisting of num_train samples each of dimension D.</span></span><br><span class="line"><span class="string">    - y: A numpy array of shape (N,) containing the training labels, where</span></span><br><span class="line"><span class="string">      y[i] is the label for X[i].</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    self.X_train = X</span><br><span class="line">    self.y_train = y</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, X, k=<span class="number">1</span>, num_loops=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Predict labels for test data using this classifier.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Inputs:</span></span><br><span class="line"><span class="string">    - X: A numpy array of shape (num_test, D) containing test data consisting</span></span><br><span class="line"><span class="string">         of num_test samples each of dimension D.</span></span><br><span class="line"><span class="string">    - k: The number of nearest neighbors that vote for the predicted labels.</span></span><br><span class="line"><span class="string">    - num_loops: Determines which implementation to use to compute distances</span></span><br><span class="line"><span class="string">      between training points and testing points.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    - y: A numpy array of shape (num_test,) containing predicted labels for the</span></span><br><span class="line"><span class="string">      test data, where y[i] is the predicted label for the test point X[i].  </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> num_loops == <span class="number">0</span>:</span><br><span class="line">      dists = self.compute_distances_no_loops(X)</span><br><span class="line">    <span class="keyword">elif</span> num_loops == <span class="number">1</span>:</span><br><span class="line">      dists = self.compute_distances_one_loop(X)</span><br><span class="line">    <span class="keyword">elif</span> num_loops == <span class="number">2</span>:</span><br><span class="line">      dists = self.compute_distances_two_loops(X)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">raise</span> ValueError(<span class="string">'Invalid value %d for num_loops'</span> % num_loops)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> self.predict_labels(dists, k=k)</span><br></pre></td></tr></table></figure>
<p>Here is the first step: measuring the distance. We have three algorithms to do this. Different algorithms have different performance and you can see it in the next session. </p>
<p>The first algorithm is simple but consume more time.  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_distances_two_loops</span><span class="params">(self, X)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Compute the distance between each test point in X and each training point</span></span><br><span class="line"><span class="string">    in self.X_train using a nested loop over both the training data and the </span></span><br><span class="line"><span class="string">    test data.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Inputs:</span></span><br><span class="line"><span class="string">    - X: A numpy array of shape (num_test, D) containing test data.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    - dists: A numpy array of shape (num_test, num_train) where dists[i, j]</span></span><br><span class="line"><span class="string">      is the Euclidean distance between the ith test point and the jth training</span></span><br><span class="line"><span class="string">      point.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    num_test = X.shape[<span class="number">0</span>]</span><br><span class="line">    num_train = self.X_train.shape[<span class="number">0</span>]</span><br><span class="line">    dists = np.zeros((num_test, num_train))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(num_test):</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> xrange(num_train): </span><br><span class="line">        <span class="comment"># calculate the distance</span></span><br><span class="line">        dists[i][j] = np.sum((X[i] - self.X_train[j])**<span class="number">2</span>)**<span class="number">0.5</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        np.sum() method is used to add an matrix, axis is one of the peremeter in this           method. In this case, the X[i] - self.X_train[j] has one axis, and we do not need         to give the axis peremeter or if you like you can set it to 0.</span></span><br><span class="line"><span class="string">        We can also see that in many numpy method there will be axis peremeter.Different         dataset has different dimension and axis is the one you want to delete by using           the method. </span></span><br><span class="line"><span class="string">        For example, by using np.sum(One dimensional dataset, axis=0) it will give you a         point. np.sum(two dimensional dataset, axis=0) will add each row and return a one         dimensional data, while axis=1 will add each column. </span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">#####################################################################</span></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span>                                                             #</span></span><br><span class="line">        <span class="comment"># Compute the l2 distance between the ith test point and the jth    #</span></span><br><span class="line">        <span class="comment"># training point, and store the result in dists[i, j]. You should   #</span></span><br><span class="line">        <span class="comment"># not use a loop over dimension.                                    #</span></span><br><span class="line">        <span class="comment">#####################################################################</span></span><br><span class="line">        <span class="comment">#         pass</span></span><br><span class="line">        <span class="comment">#####################################################################</span></span><br><span class="line">        <span class="comment">#                       END OF YOUR CODE                            #</span></span><br><span class="line">        <span class="comment">#####################################################################</span></span><br><span class="line">    <span class="keyword">return</span> dists</span><br></pre></td></tr></table></figure>
<p>The second algorithm uses one loop.  The most important method is tile().</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_distances_one_loop</span><span class="params">(self, X)</span>:</span></span><br><span class="line">   <span class="string">"""</span></span><br><span class="line"><span class="string">   Compute the distance between each test point in X and each training point</span></span><br><span class="line"><span class="string">   in self.X_train using a single loop over the test data.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Input / Output: Same as compute_distances_two_loops</span></span><br><span class="line"><span class="string">   """</span></span><br><span class="line">   num_test = X.shape[<span class="number">0</span>]</span><br><span class="line">   num_train = self.X_train.shape[<span class="number">0</span>]</span><br><span class="line">   dists = np.zeros((num_test, num_train))</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> xrange(num_test):</span><br><span class="line">       diff = np.tile(X[i], (num_train, <span class="number">1</span>)) - self.X_train</span><br><span class="line">       dists[i] = np.sum(diff**<span class="number">2</span>, axis=<span class="number">1</span>)**<span class="number">0.5</span></span><br><span class="line">       <span class="string">"""</span></span><br><span class="line"><span class="string">       np.tile() can duplicate an array in different size. The second peremeter(rows,           columns) indicate the array should be duplicated rows times in the row                   direction and columns times in the column direction. </span></span><br><span class="line"><span class="string">       In this case, we duplicate the X[i] num_train times so the size of the X[i] is           the same with X_train, then do the substraction.</span></span><br><span class="line"><span class="string">       """</span></span><br><span class="line">     <span class="comment">#######################################################################</span></span><br><span class="line">     <span class="comment"># <span class="doctag">TODO:</span>                                                               #</span></span><br><span class="line">     <span class="comment"># Compute the l2 distance between the ith test point and all training #</span></span><br><span class="line">     <span class="comment"># points, and store the result in dists[i, :].                        #</span></span><br><span class="line">     <span class="comment">#######################################################################</span></span><br><span class="line">   </span><br><span class="line">     <span class="comment">#       pass</span></span><br><span class="line">     <span class="comment">#######################################################################</span></span><br><span class="line">     <span class="comment">#                         END OF YOUR CODE                            #</span></span><br><span class="line">     <span class="comment">#######################################################################</span></span><br><span class="line">   <span class="keyword">return</span> dists</span><br></pre></td></tr></table></figure>
<p>The last algorithm is the most effective one because it uses no loops. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_distances_no_loops</span><span class="params">(self, X)</span>:</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  Compute the distance between each test point in X and each training point</span></span><br><span class="line"><span class="string">  in self.X_train using no explicit loops.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Input / Output: Same as compute_distances_two_loops</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  num_test = X.shape[<span class="number">0</span>]</span><br><span class="line">  num_train = self.X_train.shape[<span class="number">0</span>]</span><br><span class="line">  dists = np.zeros((num_test, num_train)) </span><br><span class="line">  <span class="comment"># the main idea is (a-b)**2 = a**2 +b**2 -2ab</span></span><br><span class="line">  multi_matrix = np.dot(X, self.X_train.T)</span><br><span class="line">  X_sum = np.sum(X**<span class="number">2</span>, axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>)</span><br><span class="line">  <span class="comment"># using sum will return a vector so we set keepdims to True and it will not change       the shape of the data.</span></span><br><span class="line">  X_squared = np.tile(X_sum,  multi_matrix.shape[<span class="number">1</span>])</span><br><span class="line">  X_train_sum = np.sum(self.X_train.T**<span class="number">2</span>, axis=<span class="number">0</span>)</span><br><span class="line">  X_train_squared = np.tile(X_train_sum, (multi_matrix.shape[<span class="number">0</span>], <span class="number">1</span>))</span><br><span class="line">  dists = (X_squared + X_train_squared - <span class="number">2</span>*multi_matrix)**<span class="number">0.5</span></span><br><span class="line">  <span class="comment">#########################################################################</span></span><br><span class="line">  <span class="comment"># <span class="doctag">TODO:</span>                                                                 #</span></span><br><span class="line">  <span class="comment"># Compute the l2 distance between all test points and all training      #</span></span><br><span class="line">  <span class="comment"># points without using any explicit loops, and store the result in      #</span></span><br><span class="line">  <span class="comment"># dists.                                                                #</span></span><br><span class="line">  <span class="comment">#                                                                       #</span></span><br><span class="line">  <span class="comment"># You should implement this function using only basic array operations; #</span></span><br><span class="line">  <span class="comment"># in particular you should not use functions from scipy.                #</span></span><br><span class="line">  <span class="comment">#                                                                       #</span></span><br><span class="line">  <span class="comment"># HINT: Try to formulate the l2 distance using matrix multiplication    #</span></span><br><span class="line">  <span class="comment">#       and two broadcast sums.                                         #</span></span><br><span class="line">  <span class="comment">#########################################################################</span></span><br><span class="line">  <span class="comment">#     pass</span></span><br><span class="line">  <span class="comment">#########################################################################</span></span><br><span class="line">  <span class="comment">#                         END OF YOUR CODE                              #</span></span><br><span class="line">  <span class="comment">#########################################################################</span></span><br><span class="line">  <span class="keyword">return</span> dists</span><br></pre></td></tr></table></figure>
<p>Then, we can test those three algorithms to see whether they can get the same result. </p>
<p><img src="/2020/02/13/KNN/1581326111097.png" alt="1581326111097"></p>
<p>Now we will turn to step2 and step3. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">predict_labels</span><span class="params">(self, dists, k=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Given a matrix of distances between test points and training points,</span></span><br><span class="line"><span class="string">    predict a label for each test point.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Inputs:</span></span><br><span class="line"><span class="string">    - dists: A numpy array of shape (num_test, num_train) where dists[i, j]</span></span><br><span class="line"><span class="string">      gives the distance betwen the ith test point and the jth training point.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    - y: A numpy array of shape (num_test,) containing predicted labels for the</span></span><br><span class="line"><span class="string">      test data, where y[i] is the predicted label for the test point X[i].  </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    num_test = dists.shape[<span class="number">0</span>]</span><br><span class="line">    y_pred = np.zeros(num_test)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(num_test):</span><br><span class="line">      <span class="comment"># A list of length k storing the labels of the k nearest neighbors to</span></span><br><span class="line">      <span class="comment"># the ith test point.</span></span><br><span class="line">        closest_y = []</span><br><span class="line">      <span class="comment">#########################################################################</span></span><br><span class="line">      <span class="comment"># <span class="doctag">TODO:</span>                                                                 #</span></span><br><span class="line">      <span class="comment"># Use the distance matrix to find the k nearest neighbors of the ith    #</span></span><br><span class="line">      <span class="comment"># testing point, and use self.y_train to find the labels of these       #</span></span><br><span class="line">      <span class="comment"># neighbors. Store these labels in closest_y.                           #</span></span><br><span class="line">      <span class="comment"># Hint: Look up the function numpy.argsort.                             #</span></span><br><span class="line">      <span class="comment">#########################################################################</span></span><br><span class="line">      </span><br><span class="line">        labels_index = np.argsort(dists[i]) </span><br><span class="line">        closest_y = np.array(self.y_train)[labels_index[:k]]</span><br><span class="line">        </span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        np.argsort() can return the index of the value from low to high. Then we can get         the k points. </span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"><span class="comment">#       pass</span></span><br><span class="line">      <span class="comment">#########################################################################</span></span><br><span class="line">      <span class="comment"># <span class="doctag">TODO:</span>                                                                 #</span></span><br><span class="line">      <span class="comment"># Now that you have found the labels of the k nearest neighbors, you    #</span></span><br><span class="line">      <span class="comment"># need to find the most common label in the list closest_y of labels.   #</span></span><br><span class="line">      <span class="comment"># Store this label in y_pred[i]. Break ties by choosing the smaller     #</span></span><br><span class="line">      <span class="comment"># label.                                                                #</span></span><br><span class="line">      <span class="comment">#########################################################################</span></span><br><span class="line">       </span><br><span class="line"><span class="comment">#         from collections import Counter</span></span><br><span class="line"><span class="comment">#         labels_counter = Counter(closest_y)</span></span><br><span class="line"><span class="comment">#         y_pred[i] = labels_counter.most_common()[0][0]</span></span><br><span class="line">       <span class="comment"># The above is one way to get the most common value in closest_y. And I have the          #more simple way below.  </span></span><br><span class="line">        y_pred[i] = np.argmax(np.bincount(closest_y.tolist()))</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        np.bincount() returns the times of different value appears in closest_y.</span></span><br><span class="line"><span class="string">        np.argmax() returns the most common value in closest_y</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#       pass</span></span><br><span class="line">      <span class="comment">#########################################################################</span></span><br><span class="line">      <span class="comment">#                           END OF YOUR CODE                            # </span></span><br><span class="line">      <span class="comment">#########################################################################</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y_pred</span><br></pre></td></tr></table></figure>
<p>We can use a simple example to test the model. The result is true, which means now we can use it to classify our data.</p>
<p><img src="/2020/02/13/KNN/1581327098979.png" alt="1581327098979"></p>
<h5 id="Training-and-Testing"><a href="#Training-and-Testing" class="headerlink" title="Training and Testing"></a>Training and Testing</h5><p>In this session, I will show you the whole process of training and testing the model and get the predictions. First, you have to open the knn.ipynb file and you can see you are given some instructions. </p>
<p>1) Load the dataset. </p>
<p><img src="/2020/02/13/KNN/1581327308499.png" alt="1581327308499"></p>
<p><img src="/2020/02/13/KNN/1581327332838.png" alt="1581327332838"></p>
<p>You can find the shape of X_train, y_train, X_test and y_test. load_CIFAR10() is a method that can split the data into training data and testing data. </p>
<p>Then using method below can visualize the dataset. </p>
<p><img src="/2020/02/13/KNN/1581327868618.png" alt="1581327868618"></p>
<p><img src="/2020/02/13/KNN/1581327880973.png" alt="1581327880973"></p>
<p>For the original dataset is too large, we just choose some of the data to analyse. </p>
<p><img src="/2020/02/13/KNN/1581327940045.png" alt="1581327940045"></p>
<p>Then import the knn to train.</p>
<p><img src="/2020/02/13/KNN/1581328056138.png" alt="1581328056138"></p>
<p><img src="/2020/02/13/KNN/1581328071246.png" alt="1581328071246"></p>
<p>We can draw the graph above to see the distance between testing data and training data. Then we can use the model to predict and get the accuracy. We can see that the accuracy is 0.274. It is very low, because we classify the data just by the RGB value of the picture. </p>
<p><img src="/2020/02/13/KNN/1581328131076.png" alt="1581328131076"></p>
<p><img src="/2020/02/13/KNN/1581328226483.png" alt="1581328226483"></p>
<p>When we set k to 1, the accuracy slightly increases. And then we see whether we can get the same distance matrix by using three different algorithms. </p>
<p><img src="/2020/02/13/KNN/1581328356671.png" alt="1581328356671"></p>
<p><img src="/2020/02/13/KNN/1581328379895.png" alt="1581328379895"></p>
<p>Then look at the running time. It is obvious that no-loops is the most effective. </p>
<p><img src="/2020/02/13/KNN/1581328411502.png" alt="1581328411502"></p>
<p>You may notice that when we use k=1 and k=5, the accuracy is different, so can we find the best k value which has the highest accuracy? For this, we can use cross validation. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num_folds = <span class="number">5</span></span><br><span class="line">k_choices = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line">X_train_folds = []</span><br><span class="line">y_train_folds = []</span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span>                                                                        #</span></span><br><span class="line"><span class="comment"># Split up the training data into folds. After splitting, X_train_folds and    #</span></span><br><span class="line"><span class="comment"># y_train_folds should each be lists of length num_folds, where                #</span></span><br><span class="line"><span class="comment"># y_train_folds[i] is the label vector for the points in X_train_folds[i].     #</span></span><br><span class="line"><span class="comment"># Hint: Look up the numpy array_split function.                                #</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line">X_train_folds = np.array_split(X_train, num_folds)</span><br><span class="line">y_train_folds = np.array_split(y_train, num_folds)</span><br><span class="line"><span class="comment"># pass</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#                                 END OF YOUR CODE                             #</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A dictionary holding the accuracies for different values of k that we find</span></span><br><span class="line"><span class="comment"># when running cross-validation. After running cross-validation,</span></span><br><span class="line"><span class="comment"># k_to_accuracies[k] should be a list of length num_folds giving the different</span></span><br><span class="line"><span class="comment"># accuracy values that we found when using that value of k.</span></span><br><span class="line">k_to_accuracies = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span>                                                                        #</span></span><br><span class="line"><span class="comment"># Perform k-fold cross validation to find the best value of k. For each        #</span></span><br><span class="line"><span class="comment"># possible value of k, run the k-nearest-neighbor algorithm num_folds times,   #</span></span><br><span class="line"><span class="comment"># where in each case you use all but one of the folds as training data and the #</span></span><br><span class="line"><span class="comment"># last fold as a validation set. Store the accuracies for all fold and all     #</span></span><br><span class="line"><span class="comment"># values of k in the k_to_accuracies dictionary.                               #</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="keyword">for</span> k_value <span class="keyword">in</span> k_choices:</span><br><span class="line">    k_to_accuracies[k_value] = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_folds):</span><br><span class="line">        <span class="comment"># didn't work</span></span><br><span class="line"><span class="comment">#         X_train_cv = np.delete(X_train_folds, i).tolist()</span></span><br><span class="line"><span class="comment">#         y_train_cv = np.delete(y_train_folds, i).tolist()        </span></span><br><span class="line"><span class="comment">#         X_train_cv = np.delete(X_train_folds, i,         axis=0).reshape(X_train_folds[i].shape[0],X_train_folds[i].shape[1])</span></span><br><span class="line">        X_train_temp = np.delete(X_train_folds, i, axis=<span class="number">0</span>)</span><br><span class="line">        X_train_cv = np.concatenate(X_train_temp)</span><br><span class="line">        y_train_temp = np.delete(y_train_folds, i, axis=<span class="number">0</span>)</span><br><span class="line">        y_train_cv = np.concatenate(y_train_temp)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        classifier.train(X_train_cv, y_train_cv)</span><br><span class="line">        dist = classifier.compute_distances_no_loops(X_train_folds[i])</span><br><span class="line">        y_test_predictions = classifier.predict_labels(dist, k_value)</span><br><span class="line">        num_corrects = np.sum(y_test_predictions == y_train_folds[i])</span><br><span class="line">        accuracy = float(num_corrects) / y_train_folds[i].shape[<span class="number">0</span>]</span><br><span class="line">        k_to_accuracies[k_value].append(accuracy)</span><br><span class="line"><span class="comment"># pass</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#                                 END OF YOUR CODE                             #</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Print out the computed accuracies</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> sorted(k_to_accuracies):</span><br><span class="line">    <span class="keyword">for</span> accuracy <span class="keyword">in</span> k_to_accuracies[k]:</span><br><span class="line">        print(<span class="string">'k = %d, accuracy = %f'</span> % (k, accuracy))</span><br></pre></td></tr></table></figure>
<p>You can draw the graph to see which k is the best. </p>
<p><img src="/2020/02/13/KNN/1581329141634.png" alt="1581329141634"></p>
<p><img src="/2020/02/13/KNN/1581329151487.png" alt="1581329151487"></p>
<p><img src="/2020/02/13/KNN/1581329185444.png" alt="1581329185444"></p>
<p>We can see that 8 is the best value for k and we use it to get the accuracy: 0.274.</p>
<h5 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h5><p>KNN is an easy algorithm to classify different categories just by calculating the distance between testing data and training data. There are three ways to calculae the distance and the no-loops way is the most efficient. But it is not a very effective way to correctly classify different categories. The accuracy is not very high as we can see from the result. </p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>CS231n assignment1 Environment Setup</title>
    <url>/2020/02/13/Setup/</url>
    <content><![CDATA[<h3 id="Environment-setup"><a href="#Environment-setup" class="headerlink" title="Environment setup"></a>Environment setup</h3><p>In this session, I will illustrate how to setup an environment for the CS231n assignment1. It is a little difference from the way we carry out our projects before. I know that many people would use Pycharm to do python programming, which is convenient and easy. However, the requirement of the environment for assigment1 is based on ubuntu system and ipython. If you do not have ubuntu system, you can download it from its website or if you are using window system, you can get it from microsoft store.  The one I use is Ubuntu 18.04 LTS. I assume that you have downloaded ubuntu system and use python3.x, and now I will show you the whole environment setup for the assignment. </p>
<p>In the website: <a href="http://cs231n.github.io/assignments2017/assignment1/" target="_blank" rel="noopener">http://cs231n.github.io/assignments2017/assignment1/</a> , you can see that there are some instructions of the environment setup. </p>
<ol>
<li><p>Get the code as a zip file in the website. Click here and you can download the file. Please remember the path of the file.</p>
<p><img src="/2020/02/13/Setup/1581303993815.png" alt="1581303993815"></p>
</li>
<li><p>In your ubuntu setup a virtual environment. </p>
<p>1) Enter your file.</p>
</li>
</ol>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">cd assignment1          <span class="comment"># this is the path of your file</span></span><br></pre></td></tr></table></figure>
<p>If your file is stored on your windows system, you should remember to add <strong>/mnt/</strong> before the path  eg. <strong>/mnt/c/Users/zhong201707030308/Desktop/assignment1</strong> </p>
<p>​     2) Install vituralenv if you do not have it.</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo pip <span class="keyword">install</span> virtualenv      <span class="comment"># This may already be installed</span></span><br></pre></td></tr></table></figure>
<p>​    3)Create a virtual environment.</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">virtualenv -p python3 .env       <span class="comment"># Create a virtual environment (python3)</span></span><br></pre></td></tr></table></figure>
<p>   4)Activate your virtual environment.</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">source .env/bin/activate         <span class="comment"># Activate the virtual environment</span></span><br></pre></td></tr></table></figure>
<p>Now that you have created your virtual environment, in this environment you can use python3. Note that you do not have any necessary packages now, so you need to download them. </p>
<ol>
<li>Download all the necessary packages. </li>
</ol>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> -r requirements.txt  <span class="comment"># Install dependencies</span></span><br></pre></td></tr></table></figure>
<p>The requirements.txt has listed all the libraries you may have to use.  You may also face the same problem as I did when installing the libraries. The first one may be downloading numpy==1.10.4. The easiest way to deal with it is downloading the latest version. It is quite tricky sometimes when you are installing some packages. In this case, the only thing you can do is to search on the internet. The second problem is site==0.0.1. You will be prompted that the compute can find any version of site, but you do not need to worry about it. You can just ignore this package which does not matter the programming. </p>
<p>After that ,you have installed some necessary packages, but if you need other libraries you can just install them by yourself. Next, I will show you other way to install these packages. </p>
<ol>
<li><p>Start programming. </p>
<p>1）Download dataset.</p>
</li>
</ol>
<p>In the assignment1 file enter the path:  <strong>cs231n/datasets</strong>, and then use <strong>./get_datasets.sh</strong> to get the dataset.</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">cd cs231n/datasets</span><br><span class="line"></span><br><span class="line">./get_datasets.sh</span><br></pre></td></tr></table></figure>
<p>When you have implemented the command above, you will find that in the <strong>datasets/cifar-10-batches-py</strong> file there are many datasets. You can click readme.html to see the descriptions of the data.</p>
<p><img src="/2020/02/13/Setup/1581306454897.png" alt="1581306454897"></p>
<p>​      2) Start your jupyter notebook.</p>
<p>Use the command : <strong>jupyter notebook</strong> and you can start it. In this case, you can get the url and then open your notebook on the website. </p>
<p><img src="/2020/02/13/Setup/1581306823481.png" alt="1581306823481"></p>
<p><img src="/2020/02/13/Setup/1581306996635.png" alt="1581306996635"></p>
<p>If you want to create a .py file and want to run it on the notebook, you should click <strong>New</strong> on the top right  corner and then choose python3. </p>
<p><img src="/2020/02/13/Setup/1581307248848.png" alt="1581307248848"></p>
<p>Then you can program your code and run it. </p>
<p><img src="/2020/02/13/Setup/1581307297557.png" alt="1581307297557"></p>
<p>However, you may face the last and troublesome problem that is you can not import the packages which you have installed before. That is because the python3 jupyter notebook uses is not the same with the python3 that you have created in the virtual environment. You need to change the path of it. </p>
<p>First, check the path of python3 you use in the virtual environment. </p>
<p><img src="/2020/02/13/Setup/1581307763017.png" alt="1581307763017"></p>
<p>The path is where your python.exe exists. </p>
<p>Second, check the path of python3 the jupyter notebook uses. </p>
<p><img src="/2020/02/13/Setup/1581307874063.png" alt="1581307874063"></p>
<p>The first time I run this code, I got <strong>“/usr/bin/python3”</strong>. You can notice that the two paths are different. Now, you should modify the path of the jupyter notebook. </p>
<p><img src="/2020/02/13/Setup/1581308104047.png" alt="1581308104047"></p>
<p>Then enter the path shown above in your ubuntu and modify the kernel.json .</p>
<p><img src="/2020/02/13/Setup/1581308180368.png" alt="1581308180368"></p>
<p><img src="/2020/02/13/Setup/1581308206901.png" alt="1581308206901"></p>
<p>Change the path to your python’s path, then you can import all those packages successfully. That means you can enjoy the coding. </p>
]]></content>
  </entry>
</search>
